
DualChannelCounter1PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  000022c0  00002354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000061  00800170  00800170  00002464  2**0
                  ALLOC
  3 .debug_aranges 000002a0  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000625  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000037a2  00000000  00000000  00002d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b7a  00000000  00000000  000064cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002192  00000000  00000000  00008045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  0000a1d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000086b  00000000  00000000  0000a728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ed6  00000000  00000000  0000af93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000be69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_1>
       8:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3d       	cpi	r26, 0xD1	; 209
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 04 	call	0x9ca	; 0x9ca <main>
      8a:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
char usart_rxbuff[32];
uint8_t usart_position;

void usart_init(){
    
    UBRRH = UBRRH_VALUE;
      92:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
      94:	82 e2       	ldi	r24, 0x22	; 34
      96:	89 b9       	out	0x09, r24	; 9
    #if USE_2X
    setbit(UCSRA, BIT(U2X));
      98:	eb e2       	ldi	r30, 0x2B	; 43
      9a:	f0 e0       	ldi	r31, 0x00	; 0
      9c:	80 81       	ld	r24, Z
      9e:	82 60       	ori	r24, 0x02	; 2
      a0:	80 83       	st	Z, r24
    #else
    clearbit(UCSRA, BIT(U2X));
    #endif

	// Enable receiver and transmitter
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
      a2:	ea e2       	ldi	r30, 0x2A	; 42
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	88 69       	ori	r24, 0x98	; 152
      aa:	80 83       	st	Z, r24
}
      ac:	08 95       	ret

000000ae <usart_putchr>:

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
}
      ae:	08 95       	ret

000000b0 <usart_send>:
	RETURN_IF_AVRSIM;
	while (*s){
		if (*s == '\n') usart_putchr('\r');
      	usart_putchr(*s++);
    }
}
      b0:	08 95       	ret

000000b2 <usart_send_by_length>:
		usart_putchr(s[i]);
	}
	for (uint8_t i = 0; i < 5; i ++){
		usart_putchr(terminator[i]);
	}
}
      b2:	08 95       	ret

000000b4 <usart_psend>:
	for (uint8_t i = 0; i < 5; i ++){
		usart_putchr(terminator[i])	;	
	}


}
      b4:	08 95       	ret

000000b6 <usart_print_int32>:
	usart_putchr('>');
	char str[64] = "";
	sprintf(str, "%" PRIi32, v);
	usart_send_by_length(str, strlen(str));	
	
}
      b6:	08 95       	ret

000000b8 <usart_print_int32_hex>:
	RETURN_IF_AVRSIM;
	char str[64] = "";
	sprintf(str, "%" PRIX32, v);
	usart_send_by_length(str, strlen(str));	
	
}
      b8:	08 95       	ret

000000ba <usart_parse_rx>:
	uint8_t c;
	c = UDR;
	usart_parse_rx(c);
}

void usart_parse_rx(uint8_t c){
      ba:	98 2f       	mov	r25, r24
	
	// detect packet trailer 0x00 0xFF 0xFF 0xFF 0xFF
	// small finite state machine here
	static uint8_t trailer = 0;

	if (c == 0x00) trailer = 1;
      bc:	88 23       	and	r24, r24
      be:	21 f4       	brne	.+8      	; 0xc8 <usart_parse_rx+0xe>
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	80 93 70 01 	sts	0x0170, r24
      c6:	1b c0       	rjmp	.+54     	; 0xfe <usart_parse_rx+0x44>
	else if (c == 0xFF && trailer > 0) trailer ++;
      c8:	8f 3f       	cpi	r24, 0xFF	; 255
      ca:	51 f4       	brne	.+20     	; 0xe0 <usart_parse_rx+0x26>
      cc:	80 91 70 01 	lds	r24, 0x0170
      d0:	88 23       	and	r24, r24
      d2:	31 f0       	breq	.+12     	; 0xe0 <usart_parse_rx+0x26>
      d4:	8f 5f       	subi	r24, 0xFF	; 255
      d6:	80 93 70 01 	sts	0x0170, r24
	else trailer = 0;   
	
	if (trailer > 4){
      da:	85 30       	cpi	r24, 0x05	; 5
      dc:	20 f4       	brcc	.+8      	; 0xe6 <usart_parse_rx+0x2c>
      de:	0f c0       	rjmp	.+30     	; 0xfe <usart_parse_rx+0x44>
	// small finite state machine here
	static uint8_t trailer = 0;

	if (c == 0x00) trailer = 1;
	else if (c == 0xFF && trailer > 0) trailer ++;
	else trailer = 0;   
      e0:	10 92 70 01 	sts	0x0170, r1
      e4:	0c c0       	rjmp	.+24     	; 0xfe <usart_parse_rx+0x44>
	
	if (trailer > 4){
		trailer = 0;
      e6:	10 92 70 01 	sts	0x0170, r1
		usart_rx_callback(usart_rxbuff, usart_position+1);
      ea:	60 91 ac 01 	lds	r22, 0x01AC
      ee:	6f 5f       	subi	r22, 0xFF	; 255
      f0:	8d ea       	ldi	r24, 0xAD	; 173
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	0e 94 1a 02 	call	0x434	; 0x434 <usart_rx_callback>
		usart_position = 0;
      f8:	10 92 ac 01 	sts	0x01AC, r1
      fc:	08 95       	ret
    	return;
	}

	usart_position ++;
      fe:	e0 91 ac 01 	lds	r30, 0x01AC
     102:	ef 5f       	subi	r30, 0xFF	; 255
     104:	e0 93 ac 01 	sts	0x01AC, r30
    
    if (usart_position >= 64){
        usart_psend(PSTR("!buffer_full\n"));
    }
    
    usart_rxbuff[usart_position-1] = c;		
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	e4 55       	subi	r30, 0x54	; 84
     10c:	fe 4f       	sbci	r31, 0xFE	; 254
     10e:	90 83       	st	Z, r25
     110:	08 95       	ret

00000112 <__vector_13>:


}


ISR(USART_RXC_vect){
     112:	1f 92       	push	r1
     114:	0f 92       	push	r0
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	0f 92       	push	r0
     11a:	11 24       	eor	r1, r1
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	4f 93       	push	r20
     122:	5f 93       	push	r21
     124:	6f 93       	push	r22
     126:	7f 93       	push	r23
     128:	8f 93       	push	r24
     12a:	9f 93       	push	r25
     12c:	af 93       	push	r26
     12e:	bf 93       	push	r27
     130:	ef 93       	push	r30
     132:	ff 93       	push	r31
    
    if (!bit_is_clear(UCSRA, FE)){
     134:	5c 9b       	sbis	0x0b, 4	; 11
     136:	03 c0       	rjmp	.+6      	; 0x13e <__vector_13+0x2c>
 		usart_position = 0;
     138:	10 92 ac 01 	sts	0x01AC, r1
     13c:	03 c0       	rjmp	.+6      	; 0x144 <__vector_13+0x32>
		usart_psend(PSTR("!framing_error\n"));
        return;
    }

	uint8_t c;
	c = UDR;
     13e:	8c b1       	in	r24, 0x0c	; 12
	usart_parse_rx(c);
     140:	0e 94 5d 00 	call	0xba	; 0xba <usart_parse_rx>
}
     144:	ff 91       	pop	r31
     146:	ef 91       	pop	r30
     148:	bf 91       	pop	r27
     14a:	af 91       	pop	r26
     14c:	9f 91       	pop	r25
     14e:	8f 91       	pop	r24
     150:	7f 91       	pop	r23
     152:	6f 91       	pop	r22
     154:	5f 91       	pop	r21
     156:	4f 91       	pop	r20
     158:	3f 91       	pop	r19
     15a:	2f 91       	pop	r18
     15c:	0f 90       	pop	r0
     15e:	0f be       	out	0x3f, r0	; 63
     160:	0f 90       	pop	r0
     162:	1f 90       	pop	r1
     164:	18 95       	reti

00000166 <Packets_error>:
}

static uint8_t* Packets_error(){
	static uint8_t error = 0;	
	return &error;
}
     166:	81 e7       	ldi	r24, 0x71	; 113
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	08 95       	ret

0000016c <Packets_getError>:

uint8_t Packets_getError(){
	uint8_t* error = Packets_error();
     16c:	0e 94 b3 00 	call	0x166	; 0x166 <Packets_error>
     170:	fc 01       	movw	r30, r24
	uint8_t value = *error;
     172:	80 81       	ld	r24, Z
	*error = 0x00;
     174:	10 82       	st	Z, r1
	return value;
}
     176:	08 95       	ret

00000178 <Packets_getQueue>:

}



Queue* Packets_getQueue(){
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	29 97       	sbiw	r28, 0x09	; 9
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
	static Queue queue;
	static char is_created = 0x00;
	if (is_created == 0x00){
     190:	80 91 72 01 	lds	r24, 0x0172
     194:	88 23       	and	r24, r24
     196:	a1 f4       	brne	.+40     	; 0x1c0 <Packets_getQueue+0x48>
		// create the queue
		queue = Queue_create(10, sizeof (Packet) );
     198:	8e 01       	movw	r16, r28
     19a:	0f 5f       	subi	r16, 0xFF	; 255
     19c:	1f 4f       	sbci	r17, 0xFF	; 255
     19e:	c8 01       	movw	r24, r16
     1a0:	6a e0       	ldi	r22, 0x0A	; 10
     1a2:	4c e0       	ldi	r20, 0x0C	; 12
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	0e 94 93 02 	call	0x526	; 0x526 <Queue_create>
     1aa:	a3 e7       	ldi	r26, 0x73	; 115
     1ac:	b1 e0       	ldi	r27, 0x01	; 1
     1ae:	f8 01       	movw	r30, r16
     1b0:	89 e0       	ldi	r24, 0x09	; 9
     1b2:	01 90       	ld	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	81 50       	subi	r24, 0x01	; 1
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <Packets_getQueue+0x3a>
		is_created = 0x01;
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 72 01 	sts	0x0172, r24
	}
	return &queue;
}
     1c0:	83 e7       	ldi	r24, 0x73	; 115
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	29 96       	adiw	r28, 0x09	; 9
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	cf 91       	pop	r28
     1d2:	df 91       	pop	r29
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	08 95       	ret

000001da <Packets_send>:
	packet.data[2] = error;
	packet.length = 3;
	Packets_send(packet);
}

void Packets_send(Packet packet){
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	6c 97       	sbiw	r28, 0x1c	; 28
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	e9 8a       	std	Y+17, r14	; 0x11
     1f8:	fa 8a       	std	Y+18, r15	; 0x12
     1fa:	0b 8b       	std	Y+19, r16	; 0x13
     1fc:	1c 8b       	std	Y+20, r17	; 0x14
     1fe:	2d 8b       	std	Y+21, r18	; 0x15
     200:	3e 8b       	std	Y+22, r19	; 0x16
     202:	4f 8b       	std	Y+23, r20	; 0x17
     204:	58 8f       	std	Y+24, r21	; 0x18
     206:	69 8f       	std	Y+25, r22	; 0x19
     208:	7a 8f       	std	Y+26, r23	; 0x1a
     20a:	8b 8f       	std	Y+27, r24	; 0x1b
     20c:	9c 8f       	std	Y+28, r25	; 0x1c

	char buffer[PACKETS_MAXLENGTH+8];
	//char terminator[PACKETS_TERMINATOR_LEN] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	buffer[0] = PACKETS_SEND_ADD;
     20e:	8a ef       	ldi	r24, 0xFA	; 250
     210:	89 83       	std	Y+1, r24	; 0x01
	memcpy(&buffer[1], &packet.data[0], packet.length);
     212:	8e 01       	movw	r16, r28
     214:	0e 5f       	subi	r16, 0xFE	; 254
     216:	1f 4f       	sbci	r17, 0xFF	; 255
     218:	49 2f       	mov	r20, r25
     21a:	9e 01       	movw	r18, r28
     21c:	2e 5e       	subi	r18, 0xEE	; 238
     21e:	3f 4f       	sbci	r19, 0xFF	; 255
     220:	80 2f       	mov	r24, r16
     222:	91 2f       	mov	r25, r17
     224:	62 2f       	mov	r22, r18
     226:	73 2f       	mov	r23, r19
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <memcpy>
	uint16_t crc = crc16(buffer, packet.length+1);
     22e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     230:	6f 5f       	subi	r22, 0xFF	; 255
     232:	7e 01       	movw	r14, r28
     234:	08 94       	sec
     236:	e1 1c       	adc	r14, r1
     238:	f1 1c       	adc	r15, r1
     23a:	c7 01       	movw	r24, r14
     23c:	0e 94 bd 02 	call	0x57a	; 0x57a <crc16>
	buffer[packet.length+1] = crc >> 8;
     240:	6c 8d       	ldd	r22, Y+28	; 0x1c
     242:	26 2f       	mov	r18, r22
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	02 0f       	add	r16, r18
     248:	13 1f       	adc	r17, r19
     24a:	f8 01       	movw	r30, r16
     24c:	90 83       	st	Z, r25
	buffer[packet.length+2] = crc & 0x00FF;
     24e:	fe 01       	movw	r30, r28
     250:	e2 0f       	add	r30, r18
     252:	f3 1f       	adc	r31, r19
     254:	83 83       	std	Z+3, r24	; 0x03
	//memcpy(&buffer[packet.length+3], &terminator, PACKETS_TERMINATOR_LEN);
	usart_send_by_length(buffer, packet.length+3);
     256:	6d 5f       	subi	r22, 0xFD	; 253
     258:	c7 01       	movw	r24, r14
     25a:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_send_by_length>
}
     25e:	6c 96       	adiw	r28, 0x1c	; 28
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	08 95       	ret

00000278 <Packets_sendError>:
	Packet packet;
	Queue_dequeue(queue, &packet);
	return packet;
}

void Packets_sendError(uint8_t feature, uint8_t error){
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	2c 97       	sbiw	r28, 0x0c	; 12
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61

	// send an error back over the stream
	Packet packet;
	packet.data[0] = PACKETS_ERRORCMD;
     294:	9f ef       	ldi	r25, 0xFF	; 255
     296:	9a 83       	std	Y+2, r25	; 0x02
	packet.data[1] = feature;
     298:	8b 83       	std	Y+3, r24	; 0x03
	packet.data[2] = error;
     29a:	6c 83       	std	Y+4, r22	; 0x04
	packet.length = 3;
     29c:	93 e0       	ldi	r25, 0x03	; 3
     29e:	9c 87       	std	Y+12, r25	; 0x0c
	Packets_send(packet);
     2a0:	e9 80       	ldd	r14, Y+1	; 0x01
     2a2:	ff 24       	eor	r15, r15
     2a4:	fa 94       	dec	r15
     2a6:	08 2f       	mov	r16, r24
     2a8:	16 2f       	mov	r17, r22
     2aa:	2d 81       	ldd	r18, Y+5	; 0x05
     2ac:	3e 81       	ldd	r19, Y+6	; 0x06
     2ae:	4f 81       	ldd	r20, Y+7	; 0x07
     2b0:	58 85       	ldd	r21, Y+8	; 0x08
     2b2:	69 85       	ldd	r22, Y+9	; 0x09
     2b4:	7a 85       	ldd	r23, Y+10	; 0x0a
     2b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     2b8:	0e 94 ed 00 	call	0x1da	; 0x1da <Packets_send>
}
     2bc:	2c 96       	adiw	r28, 0x0c	; 12
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	08 95       	ret

000002d6 <Packets_getNext>:
	queue = Packets_getQueue();
	Queue_enqueue(queue, &packet);

}

Packet Packets_getNext(){
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	2c 97       	sbiw	r28, 0x0c	; 12
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	f8 2e       	mov	r15, r24
     2f4:	e9 2e       	mov	r14, r25
	
	static Queue* queue; queue = Packets_getQueue();
     2f6:	0e 94 bc 00 	call	0x178	; 0x178 <Packets_getQueue>
     2fa:	90 93 7d 01 	sts	0x017D, r25
     2fe:	80 93 7c 01 	sts	0x017C, r24
	Packet packet;
	Queue_dequeue(queue, &packet);
     302:	8e 01       	movw	r16, r28
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	b8 01       	movw	r22, r16
     30a:	0e 94 28 02 	call	0x450	; 0x450 <Queue_dequeue>
	return packet;
     30e:	8f 2d       	mov	r24, r15
     310:	9e 2d       	mov	r25, r14
     312:	dc 01       	movw	r26, r24
     314:	f8 01       	movw	r30, r16
     316:	8c e0       	ldi	r24, 0x0C	; 12
     318:	01 90       	ld	r0, Z+
     31a:	0d 92       	st	X+, r0
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	e1 f7       	brne	.-8      	; 0x318 <Packets_getNext+0x42>
}
     320:	8f 2d       	mov	r24, r15
     322:	9e 2d       	mov	r25, r14
     324:	2c 96       	adiw	r28, 0x0c	; 12
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	cf 91       	pop	r28
     332:	df 91       	pop	r29
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	ff 90       	pop	r15
     33a:	ef 90       	pop	r14
     33c:	08 95       	ret

0000033e <Packets_rxCallback>:

// set an error
static void Packets_setError(uint8_t value);

// parse a recieved byte stream for packets
void Packets_rxCallback(char* rx, uint8_t length){
     33e:	8f 92       	push	r8
     340:	9f 92       	push	r9
     342:	af 92       	push	r10
     344:	bf 92       	push	r11
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	2c 97       	sbiw	r28, 0x0c	; 12
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	8c 01       	movw	r16, r24
	
	length -= PACKETS_TERMINATOR_LEN;
     366:	76 2f       	mov	r23, r22
     368:	75 50       	subi	r23, 0x05	; 5
	uint8_t crc_high = length-2;
     36a:	36 2f       	mov	r19, r22
     36c:	37 50       	subi	r19, 0x07	; 7
	uint8_t crc_low = length-1;
     36e:	0f 2e       	mov	r0, r31
     370:	fa ef       	ldi	r31, 0xFA	; 250
     372:	df 2e       	mov	r13, r31
     374:	f0 2d       	mov	r31, r0
     376:	d6 0e       	add	r13, r22
	
	Packet packet;
	packet.crc = 0;
     378:	1b 86       	std	Y+11, r1	; 0x0b
     37a:	1a 86       	std	Y+10, r1	; 0x0a
	packet.length = length-3;
     37c:	68 50       	subi	r22, 0x08	; 8
     37e:	6c 87       	std	Y+12, r22	; 0x0c

	for (uint8_t i = 0; i < length; i++){
     380:	77 23       	and	r23, r23
     382:	81 f1       	breq	.+96     	; 0x3e4 <Packets_rxCallback+0xa6>
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	50 e0       	ldi	r21, 0x00	; 0
		else if (i == crc_high){
			packet.crc = rx[i]; 
			packet.crc = packet.crc << 8 ; 
		}
		else if (i == crc_low) packet.crc += rx[i];
		else packet.data[i-1] = rx[i]; 
     388:	4e 01       	movw	r8, r28
     38a:	08 94       	sec
     38c:	81 1c       	adc	r8, r1
     38e:	91 1c       	adc	r9, r1
		if (i == 0) packet.address = rx[i]; 
		else if (i == crc_high){
			packet.crc = rx[i]; 
			packet.crc = packet.crc << 8 ; 
		}
		else if (i == crc_low) packet.crc += rx[i];
     390:	5c 01       	movw	r10, r24
     392:	ad 0c       	add	r10, r13
     394:	b1 1c       	adc	r11, r1
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
		if (i == 0) packet.address = rx[i]; 
		else if (i == crc_high){
			packet.crc = rx[i]; 
     396:	7c 01       	movw	r14, r24
     398:	e3 0e       	add	r14, r19
     39a:	f1 1c       	adc	r15, r1
	Packet packet;
	packet.crc = 0;
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
		if (i == 0) packet.address = rx[i]; 
     39c:	44 23       	and	r20, r20
     39e:	21 f4       	brne	.+8      	; 0x3a8 <Packets_rxCallback+0x6a>
     3a0:	f8 01       	movw	r30, r16
     3a2:	80 81       	ld	r24, Z
     3a4:	89 83       	std	Y+1, r24	; 0x01
     3a6:	1a c0       	rjmp	.+52     	; 0x3dc <Packets_rxCallback+0x9e>
		else if (i == crc_high){
     3a8:	34 17       	cp	r19, r20
     3aa:	29 f4       	brne	.+10     	; 0x3b6 <Packets_rxCallback+0x78>
			packet.crc = rx[i]; 
     3ac:	f7 01       	movw	r30, r14
     3ae:	80 81       	ld	r24, Z
			packet.crc = packet.crc << 8 ; 
     3b0:	1a 86       	std	Y+10, r1	; 0x0a
     3b2:	8b 87       	std	Y+11, r24	; 0x0b
     3b4:	13 c0       	rjmp	.+38     	; 0x3dc <Packets_rxCallback+0x9e>
		}
		else if (i == crc_low) packet.crc += rx[i];
     3b6:	d4 16       	cp	r13, r20
     3b8:	49 f4       	brne	.+18     	; 0x3cc <Packets_rxCallback+0x8e>
     3ba:	f5 01       	movw	r30, r10
     3bc:	20 81       	ld	r18, Z
     3be:	8a 85       	ldd	r24, Y+10	; 0x0a
     3c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     3c2:	82 0f       	add	r24, r18
     3c4:	91 1d       	adc	r25, r1
     3c6:	9b 87       	std	Y+11, r25	; 0x0b
     3c8:	8a 87       	std	Y+10, r24	; 0x0a
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <Packets_rxCallback+0x9e>
		else packet.data[i-1] = rx[i]; 
     3cc:	f4 01       	movw	r30, r8
     3ce:	e4 0f       	add	r30, r20
     3d0:	f5 1f       	adc	r31, r21
     3d2:	d8 01       	movw	r26, r16
     3d4:	a4 0f       	add	r26, r20
     3d6:	b5 1f       	adc	r27, r21
     3d8:	8c 91       	ld	r24, X
     3da:	80 83       	st	Z, r24
     3dc:	4f 5f       	subi	r20, 0xFF	; 255
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
	
	Packet packet;
	packet.crc = 0;
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
     3e0:	47 17       	cp	r20, r23
     3e2:	e0 f2       	brcs	.-72     	; 0x39c <Packets_rxCallback+0x5e>
		else packet.data[i-1] = rx[i]; 
	}

		
	// check crc
	uint16_t crc = crc16(rx, length-2);
     3e4:	c8 01       	movw	r24, r16
     3e6:	63 2f       	mov	r22, r19
     3e8:	0e 94 bd 02 	call	0x57a	; 0x57a <crc16>
	if (crc != packet.crc){
     3ec:	2a 85       	ldd	r18, Y+10	; 0x0a
     3ee:	3b 85       	ldd	r19, Y+11	; 0x0b
     3f0:	82 17       	cp	r24, r18
     3f2:	93 07       	cpc	r25, r19
     3f4:	31 f0       	breq	.+12     	; 0x402 <Packets_rxCallback+0xc4>
	*error = 0x00;
	return value;
}

static void Packets_setError(uint8_t value){
	uint8_t* error = Packets_error();
     3f6:	0e 94 b3 00 	call	0x166	; 0x166 <Packets_error>
     3fa:	fc 01       	movw	r30, r24
	*error = value;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 83       	st	Z, r24
     400:	07 c0       	rjmp	.+14     	; 0x410 <Packets_rxCallback+0xd2>
	}
	
	

	Queue* queue; 
	queue = Packets_getQueue();
     402:	0e 94 bc 00 	call	0x178	; 0x178 <Packets_getQueue>
	Queue_enqueue(queue, &packet);
     406:	be 01       	movw	r22, r28
     408:	6f 5f       	subi	r22, 0xFF	; 255
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Queue_enqueue>

}
     410:	2c 96       	adiw	r28, 0x0c	; 12
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	cf 91       	pop	r28
     41e:	df 91       	pop	r29
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	9f 90       	pop	r9
     430:	8f 90       	pop	r8
     432:	08 95       	ret

00000434 <usart_rx_callback>:
	usart_send_by_length(buffer, packet.length+3);
}

void usart_rx_callback(char *buffer, uint8_t length){

	cli();
     434:	f8 94       	cli
	Packets_rxCallback(buffer, length);
     436:	0e 94 9f 01 	call	0x33e	; 0x33e <Packets_rxCallback>
	sei();
     43a:	78 94       	sei

}
     43c:	08 95       	ret

0000043e <Queue_getCount>:
}

// get the current buffer size of the queue
uint8_t Queue_getCount(Queue *instance){
	return instance->count;
}
     43e:	fc 01       	movw	r30, r24
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	08 95       	ret

00000444 <Queue_getError>:

// return the queue error and clear the current queue error
uint8_t Queue_getError(Queue *instance){
     444:	fc 01       	movw	r30, r24
	static uint8_t error;
	error = instance->error;
     446:	86 81       	ldd	r24, Z+6	; 0x06
     448:	80 93 7e 01 	sts	0x017E, r24
	instance->error = QUEUE_ERROR_NOERROR;
     44c:	16 82       	std	Z+6, r1	; 0x06
	return error; 
}
     44e:	08 95       	ret

00000450 <Queue_dequeue>:
}



// dequeue and return a value from the queue
void Queue_dequeue(Queue *instance, void* value){
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ec 01       	movw	r28, r24

	static uint8_t temp;
	if (instance->count == 0){
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	88 23       	and	r24, r24
     45a:	19 f4       	brne	.+6      	; 0x462 <Queue_dequeue+0x12>
		instance->error = QUEUE_ERROR_QUEUEEMPTY;
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	8e 83       	std	Y+6, r24	; 0x06
     460:	29 c0       	rjmp	.+82     	; 0x4b4 <Queue_dequeue+0x64>
		//static QueueElement element;
		//return NULL;
		value = NULL;
		return;
	}
	temp = instance->out;
     462:	29 81       	ldd	r18, Y+1	; 0x01
     464:	20 93 7f 01 	sts	0x017F, r18
	if (instance->out > (instance->size - 1) ) instance->out = 0;
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	82 17       	cp	r24, r18
     472:	93 07       	cpc	r25, r19
     474:	0c f4       	brge	.+2      	; 0x478 <Queue_dequeue+0x28>
     476:	19 82       	std	Y+1, r1	; 0x01
	memcpy(value, instance->queue + instance->out * instance->element_size, instance->element_size);
     478:	ec 81       	ldd	r30, Y+4	; 0x04
     47a:	fd 81       	ldd	r31, Y+5	; 0x05
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	9c 01       	movw	r18, r24
     482:	2e 9f       	mul	r18, r30
     484:	c0 01       	movw	r24, r0
     486:	2f 9f       	mul	r18, r31
     488:	90 0d       	add	r25, r0
     48a:	3e 9f       	mul	r19, r30
     48c:	90 0d       	add	r25, r0
     48e:	11 24       	eor	r1, r1
     490:	2f 81       	ldd	r18, Y+7	; 0x07
     492:	38 85       	ldd	r19, Y+8	; 0x08
     494:	28 0f       	add	r18, r24
     496:	39 1f       	adc	r19, r25
     498:	86 2f       	mov	r24, r22
     49a:	97 2f       	mov	r25, r23
     49c:	62 2f       	mov	r22, r18
     49e:	73 2f       	mov	r23, r19
     4a0:	4e 2f       	mov	r20, r30
     4a2:	5f 2f       	mov	r21, r31
     4a4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <memcpy>
	instance->count--;
     4a8:	8a 81       	ldd	r24, Y+2	; 0x02
     4aa:	81 50       	subi	r24, 0x01	; 1
     4ac:	8a 83       	std	Y+2, r24	; 0x02
	instance->out++;
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	89 83       	std	Y+1, r24	; 0x01
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <Queue_enqueue>:

}


// Enqueue a new value into the queue
void Queue_enqueue(Queue *instance, void* value){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24

	// check for overflowed queue
	if (instance->count + 1 > instance->size){
     4c0:	8b 81       	ldd	r24, Y+3	; 0x03
     4c2:	28 2f       	mov	r18, r24
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	8a 81       	ldd	r24, Y+2	; 0x02
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	28 17       	cp	r18, r24
     4ce:	39 07       	cpc	r19, r25
     4d0:	1c f4       	brge	.+6      	; 0x4d8 <Queue_enqueue+0x1e>
		instance->error = QUEUE_ERROR_QUEUEFULL;
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	8e 83       	std	Y+6, r24	; 0x06
     4d6:	24 c0       	rjmp	.+72     	; 0x520 <Queue_enqueue+0x66>
		return;
	}

	// assign new queue value
	if (instance->in > (instance->size - 1) ) instance->in = 0;
     4d8:	88 81       	ld	r24, Y
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	30 40       	sbci	r19, 0x00	; 0
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	0c f4       	brge	.+2      	; 0x4e8 <Queue_enqueue+0x2e>
     4e6:	18 82       	st	Y, r1

	memcpy(instance->queue + instance->in * instance->element_size, value, instance->element_size);
     4e8:	ec 81       	ldd	r30, Y+4	; 0x04
     4ea:	fd 81       	ldd	r31, Y+5	; 0x05
     4ec:	88 81       	ld	r24, Y
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9c 01       	movw	r18, r24
     4f2:	2e 9f       	mul	r18, r30
     4f4:	c0 01       	movw	r24, r0
     4f6:	2f 9f       	mul	r18, r31
     4f8:	90 0d       	add	r25, r0
     4fa:	3e 9f       	mul	r19, r30
     4fc:	90 0d       	add	r25, r0
     4fe:	11 24       	eor	r1, r1
     500:	2f 81       	ldd	r18, Y+7	; 0x07
     502:	38 85       	ldd	r19, Y+8	; 0x08
     504:	28 0f       	add	r18, r24
     506:	39 1f       	adc	r19, r25
     508:	82 2f       	mov	r24, r18
     50a:	93 2f       	mov	r25, r19
     50c:	4e 2f       	mov	r20, r30
     50e:	5f 2f       	mov	r21, r31
     510:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <memcpy>
	instance->in ++;	
     514:	88 81       	ld	r24, Y
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	88 83       	st	Y, r24
	instance->count ++;
     51a:	8a 81       	ldd	r24, Y+2	; 0x02
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	8a 83       	std	Y+2, r24	; 0x02

}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <Queue_create>:
#include "../queue.h"

// Create a new queue
Queue Queue_create(uint8_t queue_size, size_t element_size){
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
     532:	f6 2e       	mov	r15, r22
     534:	8a 01       	movw	r16, r20
	instance.out = 0;
	instance.count = 0;
	instance.size = queue_size;
	instance.element_size = element_size;
	instance.error = QUEUE_ERROR_NOERROR;
	instance.queue = calloc(queue_size,  element_size);
     536:	86 2f       	mov	r24, r22
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <calloc>


	// check for malloc errors
	if (instance.queue == NULL){ 
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	59 f4       	brne	.+22     	; 0x55a <Queue_create+0x34>
		instance.error =  QUEUE_ERROR_MALLOC;
		return instance;
     544:	18 86       	std	Y+8, r1	; 0x08
     546:	1f 82       	std	Y+7, r1	; 0x07
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	8e 83       	std	Y+6, r24	; 0x06
     54c:	1d 83       	std	Y+5, r17	; 0x05
     54e:	0c 83       	std	Y+4, r16	; 0x04
     550:	fb 82       	std	Y+3, r15	; 0x03
     552:	1a 82       	std	Y+2, r1	; 0x02
     554:	19 82       	std	Y+1, r1	; 0x01
     556:	18 82       	st	Y, r1
     558:	09 c0       	rjmp	.+18     	; 0x56c <Queue_create+0x46>
	}
	
	return instance;
     55a:	98 87       	std	Y+8, r25	; 0x08
     55c:	8f 83       	std	Y+7, r24	; 0x07
     55e:	1e 82       	std	Y+6, r1	; 0x06
     560:	1d 83       	std	Y+5, r17	; 0x05
     562:	0c 83       	std	Y+4, r16	; 0x04
     564:	fb 82       	std	Y+3, r15	; 0x03
     566:	1a 82       	std	Y+2, r1	; 0x02
     568:	19 82       	std	Y+1, r1	; 0x01
     56a:	18 82       	st	Y, r1

}
     56c:	ce 01       	movw	r24, r28
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	08 95       	ret

0000057a <crc16>:
	}
	return crc;
	
}

uint16_t crc16(char* s, uint8_t length){	
     57a:	dc 01       	movw	r26, r24

	uint16_t i;
	uint16_t crc;
	crc = 0xFFFF;
	for (i = 0; i < length; i++){
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	61 15       	cp	r22, r1
     580:	71 05       	cpc	r23, r1
     582:	19 f4       	brne	.+6      	; 0x58a <crc16+0x10>
     584:	4f ef       	ldi	r20, 0xFF	; 255
     586:	5f ef       	ldi	r21, 0xFF	; 255
     588:	24 c0       	rjmp	.+72     	; 0x5d2 <crc16+0x58>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	4f ef       	ldi	r20, 0xFF	; 255
     590:	5f ef       	ldi	r21, 0xFF	; 255
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     592:	fd 01       	movw	r30, r26
     594:	e2 0f       	add	r30, r18
     596:	f3 1f       	adc	r31, r19
     598:	80 81       	ld	r24, Z
     59a:	48 27       	eor	r20, r24
     59c:	84 2f       	mov	r24, r20
     59e:	82 95       	swap	r24
     5a0:	84 27       	eor	r24, r20
     5a2:	08 2e       	mov	r0, r24
     5a4:	86 95       	lsr	r24
     5a6:	86 95       	lsr	r24
     5a8:	80 25       	eor	r24, r0
     5aa:	08 2e       	mov	r0, r24
     5ac:	86 95       	lsr	r24
     5ae:	80 25       	eor	r24, r0
     5b0:	87 70       	andi	r24, 0x07	; 7
     5b2:	04 2e       	mov	r0, r20
     5b4:	45 2f       	mov	r20, r21
     5b6:	86 95       	lsr	r24
     5b8:	07 94       	ror	r0
     5ba:	87 95       	ror	r24
     5bc:	50 2d       	mov	r21, r0
     5be:	48 27       	eor	r20, r24
     5c0:	06 94       	lsr	r0
     5c2:	87 95       	ror	r24
     5c4:	50 25       	eor	r21, r0
     5c6:	48 27       	eor	r20, r24
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	26 17       	cp	r18, r22
     5ce:	37 07       	cpc	r19, r23
     5d0:	00 f3       	brcs	.-64     	; 0x592 <crc16+0x18>
		crc = _crc16_update	(crc, s[i]);
	}
	return crc;
	
}
     5d2:	84 2f       	mov	r24, r20
     5d4:	95 2f       	mov	r25, r21
     5d6:	08 95       	ret

000005d8 <crc16ccitt>:
#include "../crc16.h"


uint16_t crc16ccitt(char* s){	
     5d8:	bc 01       	movw	r22, r24

	static uint16_t i;
	static uint16_t crc = 0xFFFF;
	for (i = 0; i < strlen(s); i++){
     5da:	10 92 81 01 	sts	0x0181, r1
     5de:	10 92 80 01 	sts	0x0180, r1
     5e2:	23 c0       	rjmp	.+70     	; 0x62a <crc16ccitt+0x52>
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     5e4:	fb 01       	movw	r30, r22
     5e6:	e4 0f       	add	r30, r20
     5e8:	f5 1f       	adc	r31, r21
     5ea:	20 81       	ld	r18, Z
     5ec:	80 91 60 00 	lds	r24, 0x0060
     5f0:	90 91 61 00 	lds	r25, 0x0061
     5f4:	82 27       	eor	r24, r18
     5f6:	08 2e       	mov	r0, r24
     5f8:	82 95       	swap	r24
     5fa:	80 7f       	andi	r24, 0xF0	; 240
     5fc:	80 25       	eor	r24, r0
     5fe:	09 2e       	mov	r0, r25
     600:	98 2f       	mov	r25, r24
     602:	82 95       	swap	r24
     604:	8f 70       	andi	r24, 0x0F	; 15
     606:	08 26       	eor	r0, r24
     608:	86 95       	lsr	r24
     60a:	98 27       	eor	r25, r24
     60c:	89 27       	eor	r24, r25
     60e:	88 0f       	add	r24, r24
     610:	88 0f       	add	r24, r24
     612:	88 0f       	add	r24, r24
     614:	80 25       	eor	r24, r0
		crc = _crc_ccitt_update	(crc, s[i]);
     616:	90 93 61 00 	sts	0x0061, r25
     61a:	80 93 60 00 	sts	0x0060, r24

uint16_t crc16ccitt(char* s){	

	static uint16_t i;
	static uint16_t crc = 0xFFFF;
	for (i = 0; i < strlen(s); i++){
     61e:	ca 01       	movw	r24, r20
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	90 93 81 01 	sts	0x0181, r25
     626:	80 93 80 01 	sts	0x0180, r24
     62a:	a6 2f       	mov	r26, r22
     62c:	b7 2f       	mov	r27, r23
     62e:	fd 01       	movw	r30, r26
     630:	01 90       	ld	r0, Z+
     632:	00 20       	and	r0, r0
     634:	e9 f7       	brne	.-6      	; 0x630 <crc16ccitt+0x58>
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	ea 1b       	sub	r30, r26
     63a:	fb 0b       	sbc	r31, r27
     63c:	40 91 80 01 	lds	r20, 0x0180
     640:	50 91 81 01 	lds	r21, 0x0181
     644:	4e 17       	cp	r20, r30
     646:	5f 07       	cpc	r21, r31
     648:	08 f4       	brcc	.+2      	; 0x64c <crc16ccitt+0x74>
     64a:	cc cf       	rjmp	.-104    	; 0x5e4 <crc16ccitt+0xc>
		crc = _crc_ccitt_update	(crc, s[i]);
	}
	return crc;
	
}
     64c:	80 91 60 00 	lds	r24, 0x0060
     650:	90 91 61 00 	lds	r25, 0x0061
     654:	08 95       	ret

00000656 <pwm_init>:

// init PWM
void pwm_init(){
	
	// set  PORTB to output mode
	setbit(DDRD, BIT(DDD4) | BIT(DDD5));
     656:	e1 e3       	ldi	r30, 0x31	; 49
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	80 63       	ori	r24, 0x30	; 48
     65e:	80 83       	st	Z, r24
    
    // set initial values
    OCR1A = 0x00; // channel 1
     660:	1b bc       	out	0x2b, r1	; 43
     662:	1a bc       	out	0x2a, r1	; 42
    OCR1B = 0x00; // channel 2
     664:	19 bc       	out	0x29, r1	; 41
     666:	18 bc       	out	0x28, r1	; 40
    // enable output compare match channel A intterupt
    //setbit(TIMSK, BIT(OCIE1A));
    
    // initialize timer
    // 8 bit PWM non-inverted
	setbit(TCCR1A, BIT(COM1A1) | BIT(COM1B1) | BIT(WGM10) | BIT(WGM11));
     668:	ef e4       	ldi	r30, 0x4F	; 79
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	83 6a       	ori	r24, 0xA3	; 163
     670:	80 83       	st	Z, r24
	
	// TCCR1A = 0xA1;
	
    // set scalar and kick off timer
    setbit(TCCR1B, BIT(CS10));
     672:	ee e4       	ldi	r30, 0x4E	; 78
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	81 60       	ori	r24, 0x01	; 1
     67a:	80 83       	st	Z, r24
	//setbit(TCCR1B, 0x02);  
}
     67c:	08 95       	ret

0000067e <pwm_set_scalar>:

// modify the pwn prescalar on the fly
void pwm_set_scalar(char scalar){	
	char temp = (TCCR1B & 0xF8);
     67e:	ee e4       	ldi	r30, 0x4E	; 78
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	90 81       	ld	r25, Z
	TCCR1B =  temp| (scalar &= 0x07);
     684:	87 70       	andi	r24, 0x07	; 7
     686:	98 7f       	andi	r25, 0xF8	; 248
     688:	89 2b       	or	r24, r25
     68a:	80 83       	st	Z, r24
} 
     68c:	08 95       	ret

0000068e <pwm_set>:

// set a pwm channel to value
void pwm_set(char channel, uint16_t value){
    switch (channel){
     68e:	88 23       	and	r24, r24
     690:	19 f0       	breq	.+6      	; 0x698 <pwm_set+0xa>
     692:	81 30       	cpi	r24, 0x01	; 1
     694:	31 f4       	brne	.+12     	; 0x6a2 <pwm_set+0x14>
     696:	03 c0       	rjmp	.+6      	; 0x69e <pwm_set+0x10>
        case PWM_CHAN_A: OCR1A = value; break;
     698:	7b bd       	out	0x2b, r23	; 43
     69a:	6a bd       	out	0x2a, r22	; 42
     69c:	08 95       	ret
        case PWM_CHAN_B: OCR1B = value; break;
     69e:	79 bd       	out	0x29, r23	; 41
     6a0:	68 bd       	out	0x28, r22	; 40
     6a2:	08 95       	ret

000006a4 <time_init>:
/* 
 * initialize and kick off the timer
 */
void time_init(){
    // initialize timer in normal mode with no scalar
    setbit(TIME_CONFIG, 2);
     6a4:	e5 e4       	ldi	r30, 0x45	; 69
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	80 83       	st	Z, r24
    
    // set overflow interrupt
    setbit(TIMSK, BIT(TIME_OVFLOW_INTERRUPT));
     6ae:	e9 e5       	ldi	r30, 0x59	; 89
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	80 64       	ori	r24, 0x40	; 64
     6b6:	80 83       	st	Z, r24
}
     6b8:	08 95       	ret

000006ba <time_get_time_counter>:
 * get main timer address, used internally
 */
uint32_t* time_get_time_counter(){
    static uint32_t time = 0;
    return &time;
}
     6ba:	82 e8       	ldi	r24, 0x82	; 130
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	08 95       	ret

000006c0 <time_get_time>:

/* 
 * get current time
 */
uint32_t time_get_time(){
    uint32_t* time = time_get_time_counter();
     6c0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <time_get_time_counter>
     6c4:	fc 01       	movw	r30, r24
    uint32_t buffer = 0;
    buffer = (*time << 8) + (uint32_t) TIME_PRECISION_TIMER;
     6c6:	84 b5       	in	r24, 0x24	; 36
     6c8:	20 81       	ld	r18, Z
     6ca:	31 81       	ldd	r19, Z+1	; 0x01
     6cc:	42 81       	ldd	r20, Z+2	; 0x02
     6ce:	53 81       	ldd	r21, Z+3	; 0x03
     6d0:	54 2f       	mov	r21, r20
     6d2:	43 2f       	mov	r20, r19
     6d4:	32 2f       	mov	r19, r18
     6d6:	22 27       	eor	r18, r18
     6d8:	28 0f       	add	r18, r24
     6da:	31 1d       	adc	r19, r1
     6dc:	41 1d       	adc	r20, r1
     6de:	51 1d       	adc	r21, r1
    return buffer;    
}
     6e0:	62 2f       	mov	r22, r18
     6e2:	73 2f       	mov	r23, r19
     6e4:	84 2f       	mov	r24, r20
     6e6:	95 2f       	mov	r25, r21
     6e8:	08 95       	ret

000006ea <get_time_in_ms>:

/* 
 * view a time in seconds
 */
double get_time_in_ms(uint32_t time){
    if (time == 0) time = time_get_time();
     6ea:	61 15       	cp	r22, r1
     6ec:	71 05       	cpc	r23, r1
     6ee:	81 05       	cpc	r24, r1
     6f0:	91 05       	cpc	r25, r1
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <get_time_in_ms+0xe>
     6f4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <time_get_time>
     6f8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__floatunsisf>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	34 e2       	ldi	r19, 0x24	; 36
     700:	44 e7       	ldi	r20, 0x74	; 116
     702:	5b e4       	ldi	r21, 0x4B	; 75
     704:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__divsf3>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	51 e4       	ldi	r21, 0x41	; 65
     710:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__mulsf3>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	4a e7       	ldi	r20, 0x7A	; 122
     71a:	54 e4       	ldi	r21, 0x44	; 68
     71c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__mulsf3>
    return (double) time / F_CPU * TIME_SCALAR * 1000;
}
     720:	08 95       	ret

00000722 <time_get_time_delta>:

/* 
 * get a time delta, 
 * also returns current time so to not miss time with a subsequent time_get_time() call
 */
TimeResult time_get_time_delta(uint32_t previous){
     722:	af 92       	push	r10
     724:	bf 92       	push	r11
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	28 97       	sbiw	r28, 0x08	; 8
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
    TimeResult result;
    uint32_t current = time_get_time();
     74a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <time_get_time>
     74e:	5b 01       	movw	r10, r22
     750:	6c 01       	movw	r12, r24
    if (current > previous) result.delta = current - previous;
     752:	e6 16       	cp	r14, r22
     754:	f7 06       	cpc	r15, r23
     756:	08 07       	cpc	r16, r24
     758:	19 07       	cpc	r17, r25
     75a:	38 f4       	brcc	.+14     	; 0x76a <time_get_time_delta+0x48>
     75c:	9b 01       	movw	r18, r22
     75e:	ac 01       	movw	r20, r24
     760:	2e 19       	sub	r18, r14
     762:	3f 09       	sbc	r19, r15
     764:	40 0b       	sbc	r20, r16
     766:	51 0b       	sbc	r21, r17
     768:	0c c0       	rjmp	.+24     	; 0x782 <time_get_time_delta+0x60>
    else result.delta = (uint32_t) TIME_MAINTIMEOVERFLOW * TIME_TIMER_RESOLUTION - previous + current;
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	80 50       	subi	r24, 0x00	; 0
     770:	90 4c       	sbci	r25, 0xC0	; 192
     772:	ad 4b       	sbci	r26, 0xBD	; 189
     774:	b0 4f       	sbci	r27, 0xF0	; 240
     776:	9c 01       	movw	r18, r24
     778:	ad 01       	movw	r20, r26
     77a:	2e 19       	sub	r18, r14
     77c:	3f 09       	sbc	r19, r15
     77e:	40 0b       	sbc	r20, r16
     780:	51 0b       	sbc	r21, r17
    result.previous = current;
    return result;
     782:	ad 82       	std	Y+5, r10	; 0x05
     784:	be 82       	std	Y+6, r11	; 0x06
     786:	cf 82       	std	Y+7, r12	; 0x07
     788:	d8 86       	std	Y+8, r13	; 0x08
     78a:	29 83       	std	Y+1, r18	; 0x01
     78c:	3a 83       	std	Y+2, r19	; 0x02
     78e:	4b 83       	std	Y+3, r20	; 0x03
     790:	5c 83       	std	Y+4, r21	; 0x04
     792:	3a 81       	ldd	r19, Y+2	; 0x02
     794:	4b 81       	ldd	r20, Y+3	; 0x03
     796:	5c 81       	ldd	r21, Y+4	; 0x04
     798:	6a 2d       	mov	r22, r10
     79a:	7e 81       	ldd	r23, Y+6	; 0x06
}
     79c:	8f 81       	ldd	r24, Y+7	; 0x07
     79e:	98 85       	ldd	r25, Y+8	; 0x08
     7a0:	28 96       	adiw	r28, 0x08	; 8
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	cf 91       	pop	r28
     7ae:	df 91       	pop	r29
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	bf 90       	pop	r11
     7be:	af 90       	pop	r10
     7c0:	08 95       	ret

000007c2 <__vector_5>:
/*
 * Interrupt
 * once ever TIME_TIMER_RESOLUTION clock cycles
 * increment the main timer
 */
ISR(TIME_INTERRUPT_VECT, ISR_NOBLOCK){
     7c2:	78 94       	sei
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	2f 93       	push	r18
     7d0:	3f 93       	push	r19
     7d2:	4f 93       	push	r20
     7d4:	5f 93       	push	r21
     7d6:	6f 93       	push	r22
     7d8:	7f 93       	push	r23
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	ef 93       	push	r30
     7e4:	ff 93       	push	r31
	uint32_t* time = time_get_time_counter();
     7e6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <time_get_time_counter>
     7ea:	fc 01       	movw	r30, r24
    *time = *time + 1;
     7ec:	80 81       	ld	r24, Z
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	a2 81       	ldd	r26, Z+2	; 0x02
     7f2:	b3 81       	ldd	r27, Z+3	; 0x03
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	a1 1d       	adc	r26, r1
     7f8:	b1 1d       	adc	r27, r1
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	b3 83       	std	Z+3, r27	; 0x03
    if (*time >= (uint32_t) TIME_MAINTIMEOVERFLOW){
     802:	80 54       	subi	r24, 0x40	; 64
     804:	92 44       	sbci	r25, 0x42	; 66
     806:	af 40       	sbci	r26, 0x0F	; 15
     808:	b0 40       	sbci	r27, 0x00	; 0
     80a:	20 f0       	brcs	.+8      	; 0x814 <__vector_5+0x52>
		*time = 0;
     80c:	10 82       	st	Z, r1
     80e:	11 82       	std	Z+1, r1	; 0x01
     810:	12 82       	std	Z+2, r1	; 0x02
     812:	13 82       	std	Z+3, r1	; 0x03
	}
}
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	bf 91       	pop	r27
     81a:	af 91       	pop	r26
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	7f 91       	pop	r23
     822:	6f 91       	pop	r22
     824:	5f 91       	pop	r21
     826:	4f 91       	pop	r20
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <get_rpm_handle>:
}

uint16_t* get_rpm_handle(){
	static uint16_t rpm;
	return &rpm;
}
     836:	86 e8       	ldi	r24, 0x86	; 134
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	08 95       	ret

0000083c <cmd_rpmset>:

void cmd_pwm_setscalar(char* params){
	pwm_set_scalar(params[0]);
}

void cmd_rpmset(char* params){
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	8c 01       	movw	r16, r24
	
	uint16_t* value = get_rpm_handle();
     842:	0e 94 1b 04 	call	0x836	; 0x836 <get_rpm_handle>
     846:	fc 01       	movw	r30, r24
	*value = (params[0] << 8) + params[1];	
     848:	d8 01       	movw	r26, r16
     84a:	11 96       	adiw	r26, 0x01	; 1
     84c:	2c 91       	ld	r18, X
     84e:	11 97       	sbiw	r26, 0x01	; 1
     850:	9c 91       	ld	r25, X
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	82 0f       	add	r24, r18
     856:	91 1d       	adc	r25, r1
     858:	91 83       	std	Z+1, r25	; 0x01
     85a:	80 83       	st	Z, r24
}
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	08 95       	ret

00000862 <cmd_get_rpm>:

void cmd_get_rpm(){



}
     862:	08 95       	ret

00000864 <cmd_send_debug16>:
	packet.data[2] = rpm - (packet.data[1] << 8);
	packet.length = 3;
	Packets_send(packet);
}

void cmd_send_debug16(char name, uint16_t debug){
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	2c 97       	sbiw	r28, 0x0c	; 12
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	26 2f       	mov	r18, r22

	Packet packet;
	packet.data[0] = CMD_DEBUG16;
     882:	90 e3       	ldi	r25, 0x30	; 48
     884:	9a 83       	std	Y+2, r25	; 0x02
	packet.data[1] = name;
     886:	8b 83       	std	Y+3, r24	; 0x03
	packet.data[2] = debug >> 8;
     888:	7c 83       	std	Y+4, r23	; 0x04
	packet.data[3] = debug - (packet.data[1] << 8);
     88a:	6d 83       	std	Y+5, r22	; 0x05
	packet.length = 4;
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	9c 87       	std	Y+12, r25	; 0x0c
	Packets_send(packet);
     890:	e9 80       	ldd	r14, Y+1	; 0x01
     892:	0f 2e       	mov	r0, r31
     894:	f0 e3       	ldi	r31, 0x30	; 48
     896:	ff 2e       	mov	r15, r31
     898:	f0 2d       	mov	r31, r0
     89a:	08 2f       	mov	r16, r24
     89c:	17 2f       	mov	r17, r23
     89e:	3e 81       	ldd	r19, Y+6	; 0x06
     8a0:	4f 81       	ldd	r20, Y+7	; 0x07
     8a2:	58 85       	ldd	r21, Y+8	; 0x08
     8a4:	69 85       	ldd	r22, Y+9	; 0x09
     8a6:	7a 85       	ldd	r23, Y+10	; 0x0a
     8a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     8aa:	0e 94 ed 00 	call	0x1da	; 0x1da <Packets_send>

}
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	08 95       	ret

000008c8 <cmd_send_rpm>:
	static uint16_t rpm;
	return &rpm;
}


void cmd_send_rpm(uint16_t rpm){
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	2c 97       	sbiw	r28, 0x0c	; 12
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
	
	Packet packet;
	packet.data[0] = CMD_RPM;
     8e4:	20 e2       	ldi	r18, 0x20	; 32
     8e6:	2a 83       	std	Y+2, r18	; 0x02
	packet.data[1] = rpm >> 8;
     8e8:	9b 83       	std	Y+3, r25	; 0x03
	packet.data[2] = rpm - (packet.data[1] << 8);
     8ea:	8c 83       	std	Y+4, r24	; 0x04
	packet.length = 3;
     8ec:	23 e0       	ldi	r18, 0x03	; 3
     8ee:	2c 87       	std	Y+12, r18	; 0x0c
	Packets_send(packet);
     8f0:	e9 80       	ldd	r14, Y+1	; 0x01
     8f2:	ff 24       	eor	r15, r15
     8f4:	68 94       	set
     8f6:	f5 f8       	bld	r15, 5
     8f8:	09 2f       	mov	r16, r25
     8fa:	18 2f       	mov	r17, r24
     8fc:	2d 81       	ldd	r18, Y+5	; 0x05
     8fe:	3e 81       	ldd	r19, Y+6	; 0x06
     900:	4f 81       	ldd	r20, Y+7	; 0x07
     902:	58 85       	ldd	r21, Y+8	; 0x08
     904:	69 85       	ldd	r22, Y+9	; 0x09
     906:	7a 85       	ldd	r23, Y+10	; 0x0a
     908:	8b 85       	ldd	r24, Y+11	; 0x0b
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	0e 94 ed 00 	call	0x1da	; 0x1da <Packets_send>
}
     910:	2c 96       	adiw	r28, 0x0c	; 12
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	08 95       	ret

0000092a <cmd_pwm_setscalar>:
	uint16_t value = params[1] << 8; value += params[2];	
	pwm_set(chan, value);

}

void cmd_pwm_setscalar(char* params){
     92a:	fc 01       	movw	r30, r24
	pwm_set_scalar(params[0]);
     92c:	80 81       	ld	r24, Z
     92e:	0e 94 3f 03 	call	0x67e	; 0x67e <pwm_set_scalar>
}
     932:	08 95       	ret

00000934 <cmd_pwm_set>:

	}
	
}

void cmd_pwm_set(char* params){
     934:	fc 01       	movw	r30, r24
	char chan = params[0];
	uint16_t value = params[1] << 8; value += params[2];	
     936:	71 81       	ldd	r23, Z+1	; 0x01
     938:	60 e0       	ldi	r22, 0x00	; 0
	pwm_set(chan, value);
     93a:	82 81       	ldd	r24, Z+2	; 0x02
     93c:	68 0f       	add	r22, r24
     93e:	71 1d       	adc	r23, r1
     940:	80 81       	ld	r24, Z
     942:	0e 94 47 03 	call	0x68e	; 0x68e <pwm_set>

}
     946:	08 95       	ret

00000948 <handle_packet>:
#include "includes.h"
#include "constants.h"
#include "commands.h"


void handle_packet(Packet packet){
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	2c 97       	sbiw	r28, 0x0c	; 12
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	e9 82       	std	Y+1, r14	; 0x01
     966:	ef 2d       	mov	r30, r15
     968:	fa 82       	std	Y+2, r15	; 0x02
     96a:	0b 83       	std	Y+3, r16	; 0x03
     96c:	1c 83       	std	Y+4, r17	; 0x04
     96e:	2d 83       	std	Y+5, r18	; 0x05
     970:	3e 83       	std	Y+6, r19	; 0x06
     972:	4f 83       	std	Y+7, r20	; 0x07
     974:	58 87       	std	Y+8, r21	; 0x08
     976:	69 87       	std	Y+9, r22	; 0x09
     978:	7a 87       	std	Y+10, r23	; 0x0a
     97a:	8b 87       	std	Y+11, r24	; 0x0b
     97c:	9c 87       	std	Y+12, r25	; 0x0c

	char *params = &packet.data[1];
	
	switch (packet.data[0]){
     97e:	e1 31       	cpi	r30, 0x11	; 17
     980:	49 f0       	breq	.+18     	; 0x994 <handle_packet+0x4c>
     982:	e1 32       	cpi	r30, 0x21	; 33
     984:	61 f0       	breq	.+24     	; 0x99e <handle_packet+0x56>
     986:	e0 31       	cpi	r30, 0x10	; 16
     988:	79 f4       	brne	.+30     	; 0x9a8 <handle_packet+0x60>
		case CMD_PWM_SET:			cmd_pwm_set(params); break;
     98a:	ce 01       	movw	r24, r28
     98c:	03 96       	adiw	r24, 0x03	; 3
     98e:	0e 94 9a 04 	call	0x934	; 0x934 <cmd_pwm_set>
     992:	0e c0       	rjmp	.+28     	; 0x9b0 <handle_packet+0x68>
		case CMD_PWM_SETSCALAR:		cmd_pwm_setscalar(params); break;
     994:	ce 01       	movw	r24, r28
     996:	03 96       	adiw	r24, 0x03	; 3
     998:	0e 94 95 04 	call	0x92a	; 0x92a <cmd_pwm_setscalar>
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <handle_packet+0x68>
		case CMD_RPMSET		:		cmd_rpmset(params); break;
     99e:	ce 01       	movw	r24, r28
     9a0:	03 96       	adiw	r24, 0x03	; 3
     9a2:	0e 94 1e 04 	call	0x83c	; 0x83c <cmd_rpmset>
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <handle_packet+0x68>
		default: 					Packets_sendError(ERROR_INVALIDCMD, 0x00);			
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	0e 94 3c 01 	call	0x278	; 0x278 <Packets_sendError>

	}
	
}
     9b0:	2c 96       	adiw	r28, 0x0c	; 12
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	08 95       	ret

000009ca <main>:
InterruptCounterResult interrupt_counter_delta(uint16_t previous);




int main( void ){
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	df 93       	push	r29
     9d4:	cf 93       	push	r28
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	aa 97       	sbiw	r28, 0x2a	; 42
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61

	uint8_t error;
	Packet packet;
	Queue* packets;
	packets = Packets_getQueue();
     9e6:	0e 94 bc 00 	call	0x178	; 0x178 <Packets_getQueue>
     9ea:	98 87       	std	Y+8, r25	; 0x08
     9ec:	8f 83       	std	Y+7, r24	; 0x07

	// initialize Time
	time_init();
     9ee:	0e 94 52 03 	call	0x6a4	; 0x6a4 <time_init>
	TimeResult tr;
	uint32_t previous = 0;
     9f2:	1b 82       	std	Y+3, r1	; 0x03
     9f4:	1c 82       	std	Y+4, r1	; 0x04
     9f6:	1d 82       	std	Y+5, r1	; 0x05
     9f8:	1e 82       	std	Y+6, r1	; 0x06

	// initialize usart
	usart_init();
     9fa:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>

	// initialize motors
	motors_init();
     9fe:	0e 94 a4 05 	call	0xb48	; 0xb48 <motors_init>
	motors_set(MOTORS_LEFT, MOTORS_FWD, 1000);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	48 ee       	ldi	r20, 0xE8	; 232
     a08:	53 e0       	ldi	r21, 0x03	; 3
     a0a:	0e 94 02 06 	call	0xc04	; 0xc04 <motors_set>

	Motor* motor = motors_get_motor(MOTORS_LEFT);
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 25 06 	call	0xc4a	; 0xc4a <motors_get_motor>
     a14:	9a 83       	std	Y+2, r25	; 0x02
     a16:	89 83       	std	Y+1, r24	; 0x01
	motor->rpm_target = 1000;
     a18:	e9 81       	ldd	r30, Y+1	; 0x01
     a1a:	fa 81       	ldd	r31, Y+2	; 0x02
     a1c:	88 ee       	ldi	r24, 0xE8	; 232
     a1e:	93 e0       	ldi	r25, 0x03	; 3
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	80 83       	st	Z, r24

	// enable interrupts
	sei();
     a24:	78 94       	sei

	// loop forever
	while(1){
		error = Packets_getError();
     a26:	0e 94 b6 00 	call	0x16c	; 0x16c <Packets_getError>
     a2a:	89 87       	std	Y+9, r24	; 0x09
		if (error){
     a2c:	89 85       	ldd	r24, Y+9	; 0x09
     a2e:	88 23       	and	r24, r24
     a30:	29 f0       	breq	.+10     	; 0xa3c <main+0x72>
			Packets_sendError(ERROR_PACKETS, error);
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	69 85       	ldd	r22, Y+9	; 0x09
     a36:	0e 94 3c 01 	call	0x278	; 0x278 <Packets_sendError>
     a3a:	f5 cf       	rjmp	.-22     	; 0xa26 <main+0x5c>
			continue;
		}
		if (packets->count > 0){
     a3c:	ef 81       	ldd	r30, Y+7	; 0x07
     a3e:	f8 85       	ldd	r31, Y+8	; 0x08
     a40:	82 81       	ldd	r24, Z+2	; 0x02
     a42:	88 23       	and	r24, r24
     a44:	01 f1       	breq	.+64     	; 0xa86 <main+0xbc>
			error = 0x00;
     a46:	19 86       	std	Y+9, r1	; 0x09
			packet = Packets_getNext();
     a48:	ce 01       	movw	r24, r28
     a4a:	0a 96       	adiw	r24, 0x0a	; 10
     a4c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Packets_getNext>
			error = Queue_getError(packets);
     a50:	8f 81       	ldd	r24, Y+7	; 0x07
     a52:	98 85       	ldd	r25, Y+8	; 0x08
     a54:	0e 94 22 02 	call	0x444	; 0x444 <Queue_getError>
     a58:	89 87       	std	Y+9, r24	; 0x09
			if (error){
     a5a:	89 85       	ldd	r24, Y+9	; 0x09
     a5c:	88 23       	and	r24, r24
     a5e:	29 f0       	breq	.+10     	; 0xa6a <main+0xa0>
				Packets_sendError(ERROR_QUEUE, error);
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	69 85       	ldd	r22, Y+9	; 0x09
     a64:	0e 94 3c 01 	call	0x278	; 0x278 <Packets_sendError>
     a68:	de cf       	rjmp	.-68     	; 0xa26 <main+0x5c>
				continue;
			}

			handle_packet(packet);
     a6a:	ea 84       	ldd	r14, Y+10	; 0x0a
     a6c:	fb 84       	ldd	r15, Y+11	; 0x0b
     a6e:	0c 85       	ldd	r16, Y+12	; 0x0c
     a70:	1d 85       	ldd	r17, Y+13	; 0x0d
     a72:	2e 85       	ldd	r18, Y+14	; 0x0e
     a74:	3f 85       	ldd	r19, Y+15	; 0x0f
     a76:	48 89       	ldd	r20, Y+16	; 0x10
     a78:	59 89       	ldd	r21, Y+17	; 0x11
     a7a:	6a 89       	ldd	r22, Y+18	; 0x12
     a7c:	7b 89       	ldd	r23, Y+19	; 0x13
     a7e:	8c 89       	ldd	r24, Y+20	; 0x14
     a80:	9d 89       	ldd	r25, Y+21	; 0x15
     a82:	0e 94 a4 04 	call	0x948	; 0x948 <handle_packet>
		}
		tr = time_get_time_delta(previous);
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	9c 81       	ldd	r25, Y+4	; 0x04
     a8a:	ad 81       	ldd	r26, Y+5	; 0x05
     a8c:	be 81       	ldd	r27, Y+6	; 0x06
     a8e:	bc 01       	movw	r22, r24
     a90:	cd 01       	movw	r24, r26
     a92:	0e 94 91 03 	call	0x722	; 0x722 <time_get_time_delta>
     a96:	2e 8f       	std	Y+30, r18	; 0x1e
     a98:	3f 8f       	std	Y+31, r19	; 0x1f
     a9a:	48 a3       	std	Y+32, r20	; 0x20
     a9c:	59 a3       	std	Y+33, r21	; 0x21
     a9e:	6a a3       	std	Y+34, r22	; 0x22
     aa0:	7b a3       	std	Y+35, r23	; 0x23
     aa2:	8c a3       	std	Y+36, r24	; 0x24
     aa4:	9d a3       	std	Y+37, r25	; 0x25
     aa6:	ce 01       	movw	r24, r28
     aa8:	46 96       	adiw	r24, 0x16	; 22
     aaa:	9f a3       	std	Y+39, r25	; 0x27
     aac:	8e a3       	std	Y+38, r24	; 0x26
     aae:	fe 01       	movw	r30, r28
     ab0:	7e 96       	adiw	r30, 0x1e	; 30
     ab2:	f9 a7       	std	Y+41, r31	; 0x29
     ab4:	e8 a7       	std	Y+40, r30	; 0x28
     ab6:	f8 e0       	ldi	r31, 0x08	; 8
     ab8:	fa a7       	std	Y+42, r31	; 0x2a
     aba:	e8 a5       	ldd	r30, Y+40	; 0x28
     abc:	f9 a5       	ldd	r31, Y+41	; 0x29
     abe:	00 80       	ld	r0, Z
     ac0:	88 a5       	ldd	r24, Y+40	; 0x28
     ac2:	99 a5       	ldd	r25, Y+41	; 0x29
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	99 a7       	std	Y+41, r25	; 0x29
     ac8:	88 a7       	std	Y+40, r24	; 0x28
     aca:	ee a1       	ldd	r30, Y+38	; 0x26
     acc:	ff a1       	ldd	r31, Y+39	; 0x27
     ace:	00 82       	st	Z, r0
     ad0:	8e a1       	ldd	r24, Y+38	; 0x26
     ad2:	9f a1       	ldd	r25, Y+39	; 0x27
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	9f a3       	std	Y+39, r25	; 0x27
     ad8:	8e a3       	std	Y+38, r24	; 0x26
     ada:	9a a5       	ldd	r25, Y+42	; 0x2a
     adc:	91 50       	subi	r25, 0x01	; 1
     ade:	9a a7       	std	Y+42, r25	; 0x2a
     ae0:	ea a5       	ldd	r30, Y+42	; 0x2a
     ae2:	ee 23       	and	r30, r30
     ae4:	51 f7       	brne	.-44     	; 0xaba <main+0xf0>
		
		// every 20ms, calculate rpm
		if (get_time_in_ms(tr.delta) > 20){
     ae6:	8e 89       	ldd	r24, Y+22	; 0x16
     ae8:	9f 89       	ldd	r25, Y+23	; 0x17
     aea:	a8 8d       	ldd	r26, Y+24	; 0x18
     aec:	b9 8d       	ldd	r27, Y+25	; 0x19
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 75 03 	call	0x6ea	; 0x6ea <get_time_in_ms>
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	bc 01       	movw	r22, r24
     afc:	cd 01       	movw	r24, r26
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 ea       	ldi	r20, 0xA0	; 160
     b04:	51 e4       	ldi	r21, 0x41	; 65
     b06:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__gtsf2>
     b0a:	18 16       	cp	r1, r24
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <main+0x146>
     b0e:	8b cf       	rjmp	.-234    	; 0xa26 <main+0x5c>
			previous = tr.previous;
     b10:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b12:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b14:	ac 8d       	ldd	r26, Y+28	; 0x1c
     b16:	bd 8d       	ldd	r27, Y+29	; 0x1d
     b18:	8b 83       	std	Y+3, r24	; 0x03
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	ad 83       	std	Y+5, r26	; 0x05
     b1e:	be 83       	std	Y+6, r27	; 0x06
			motors_tick();
     b20:	0e 94 40 06 	call	0xc80	; 0xc80 <motors_tick>
			

			cmd_send_debug16( 'r', (uint16_t) motor->rpm_measured);
     b24:	e9 81       	ldd	r30, Y+1	; 0x01
     b26:	fa 81       	ldd	r31, Y+2	; 0x02
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	93 81       	ldd	r25, Z+3	; 0x03
     b2c:	a4 81       	ldd	r26, Z+4	; 0x04
     b2e:	b5 81       	ldd	r27, Z+5	; 0x05
     b30:	bc 01       	movw	r22, r24
     b32:	cd 01       	movw	r24, r26
     b34:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__fixunssfsi>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	9c 01       	movw	r18, r24
     b3e:	82 e7       	ldi	r24, 0x72	; 114
     b40:	b9 01       	movw	r22, r18
     b42:	0e 94 32 04 	call	0x864	; 0x864 <cmd_send_debug16>
     b46:	6f cf       	rjmp	.-290    	; 0xa26 <main+0x5c>

00000b48 <motors_init>:
/*******************************/
/* PUBLIC FUNCTION DEFINITIONS */
/*******************************/

// initialize the motor system
void motors_init(){
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <motors_init+0x6>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	
	// configure external interrupts on INT0 and INT1
	setbit(MCUCR,	BIT(ISC00) 	| 	BIT(ISC10));
     b54:	a5 e5       	ldi	r26, 0x55	; 85
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e5 e5       	ldi	r30, 0x55	; 85
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	85 60       	ori	r24, 0x05	; 5
     b60:	8c 93       	st	X, r24
	setbit(GICR, 	BIT(INT0) 	| 	BIT(INT1));
     b62:	ab e5       	ldi	r26, 0x5B	; 91
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	eb e5       	ldi	r30, 0x5B	; 91
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 6c       	ori	r24, 0xC0	; 192
     b6e:	8c 93       	st	X, r24

	// initialize hardware PWM
	pwm_init();
     b70:	0e 94 2b 03 	call	0x656	; 0x656 <pwm_init>

	// set pwm scalar
	pwm_set_scalar(3);
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	0e 94 3f 03 	call	0x67e	; 0x67e <pwm_set_scalar>
    
    // init all the motor structs
    Motor* motor;
    for (uint8_t chan = 0; chan < MOTORS_CHANS; chan ++){
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	3a c0       	rjmp	.+116    	; 0xbf2 <motors_init+0xaa>
        motor = motors_get_motor(chan);
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	0e 94 25 06 	call	0xc4a	; 0xc4a <motors_get_motor>
     b84:	9b 83       	std	Y+3, r25	; 0x03
     b86:	8a 83       	std	Y+2, r24	; 0x02
        motor->rpm_target = 0;
     b88:	ea 81       	ldd	r30, Y+2	; 0x02
     b8a:	fb 81       	ldd	r31, Y+3	; 0x03
     b8c:	11 82       	std	Z+1, r1	; 0x01
     b8e:	10 82       	st	Z, r1
        motor->rpm_measured = 0;
     b90:	ea 81       	ldd	r30, Y+2	; 0x02
     b92:	fb 81       	ldd	r31, Y+3	; 0x03
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	82 83       	std	Z+2, r24	; 0x02
     b9e:	93 83       	std	Z+3, r25	; 0x03
     ba0:	a4 83       	std	Z+4, r26	; 0x04
     ba2:	b5 83       	std	Z+5, r27	; 0x05
        motor->rpm_previous = 0;
     ba4:	ea 81       	ldd	r30, Y+2	; 0x02
     ba6:	fb 81       	ldd	r31, Y+3	; 0x03
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	86 83       	std	Z+6, r24	; 0x06
     bb2:	97 83       	std	Z+7, r25	; 0x07
     bb4:	a0 87       	std	Z+8, r26	; 0x08
     bb6:	b1 87       	std	Z+9, r27	; 0x09
        motor->rpm_delta = 0;
     bb8:	ea 81       	ldd	r30, Y+2	; 0x02
     bba:	fb 81       	ldd	r31, Y+3	; 0x03
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	82 87       	std	Z+10, r24	; 0x0a
     bc6:	93 87       	std	Z+11, r25	; 0x0b
     bc8:	a4 87       	std	Z+12, r26	; 0x0c
     bca:	b5 87       	std	Z+13, r27	; 0x0d
        motor->pwm = 0;
     bcc:	ea 81       	ldd	r30, Y+2	; 0x02
     bce:	fb 81       	ldd	r31, Y+3	; 0x03
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	86 87       	std	Z+14, r24	; 0x0e
     bda:	97 87       	std	Z+15, r25	; 0x0f
     bdc:	a0 8b       	std	Z+16, r26	; 0x10
     bde:	b1 8b       	std	Z+17, r27	; 0x11
        motor->dir_target = 0;
     be0:	ea 81       	ldd	r30, Y+2	; 0x02
     be2:	fb 81       	ldd	r31, Y+3	; 0x03
     be4:	12 8a       	std	Z+18, r1	; 0x12
        motor->dir_measured = 0;        
     be6:	ea 81       	ldd	r30, Y+2	; 0x02
     be8:	fb 81       	ldd	r31, Y+3	; 0x03
     bea:	13 8a       	std	Z+19, r1	; 0x13
	// set pwm scalar
	pwm_set_scalar(3);
    
    // init all the motor structs
    Motor* motor;
    for (uint8_t chan = 0; chan < MOTORS_CHANS; chan ++){
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	88 23       	and	r24, r24
     bf6:	19 f2       	breq	.-122    	; 0xb7e <motors_init+0x36>
        motor->rpm_delta = 0;
        motor->pwm = 0;
        motor->dir_target = 0;
        motor->dir_measured = 0;        
    }
}
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <motors_set>:

// set a motor speed and direction by channel
void motors_set(uint8_t chan, uint8_t dir, uint16_t rpm){
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <motors_set+0x6>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <motors_set+0x8>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <motors_set+0xa>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	6c 83       	std	Y+4, r22	; 0x04
     c16:	5e 83       	std	Y+6, r21	; 0x06
     c18:	4d 83       	std	Y+5, r20	; 0x05
	Motor* motor = motors_get_motor(chan);
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	0e 94 25 06 	call	0xc4a	; 0xc4a <motors_get_motor>
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
	motor->rpm_target = rpm;
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	91 83       	std	Z+1, r25	; 0x01
     c2e:	80 83       	st	Z, r24
	motor->dir_target = dir;
     c30:	e9 81       	ldd	r30, Y+1	; 0x01
     c32:	fa 81       	ldd	r31, Y+2	; 0x02
     c34:	8c 81       	ldd	r24, Y+4	; 0x04
     c36:	82 8b       	std	Z+18, r24	; 0x12
}
     c38:	26 96       	adiw	r28, 0x06	; 6
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <motors_get_motor>:


// get a motor by channel
Motor* motors_get_motor(uint8_t chan){
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
	static Motor motors[MOTORS_CHANS];
	return &motors[chan];
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	9c 01       	movw	r18, r24
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	c9 01       	movw	r24, r18
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	88 57       	subi	r24, 0x78	; 120
     c76:	9e 4f       	sbci	r25, 0xFE	; 254
}
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <motors_tick>:

// calculate a time frame
void motors_tick(){
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	2f 97       	sbiw	r28, 0x0f	; 15
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
	static InterruptCounterResult icr[MOTORS_CHANS];
    static TimeResult tr[MOTORS_CHANS];
	float time_ms, pwm_acc, rpm;
	uint8_t chan;

	for (chan = 0; chan < MOTORS_CHANS; chan ++){
     c9c:	19 82       	std	Y+1, r1	; 0x01
     c9e:	ac c1       	rjmp	.+856    	; 0xff8 <motors_tick+0x378>
		
		motor = motors_get_motor(chan);
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	0e 94 25 06 	call	0xc4a	; 0xc4a <motors_get_motor>
     ca6:	9f 87       	std	Y+15, r25	; 0x0f
     ca8:	8e 87       	std	Y+14, r24	; 0x0e

		// get time delta
		tr[chan] = time_get_time_delta(tr[chan].previous);
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	68 2f       	mov	r22, r24
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	fc 01       	movw	r30, r24
     cc6:	e4 56       	subi	r30, 0x64	; 100
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	20 81       	ld	r18, Z
     ccc:	31 81       	ldd	r19, Z+1	; 0x01
     cce:	42 81       	ldd	r20, Z+2	; 0x02
     cd0:	53 81       	ldd	r21, Z+3	; 0x03
     cd2:	cb 01       	movw	r24, r22
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	8c 01       	movw	r16, r24
     ce2:	04 56       	subi	r16, 0x64	; 100
     ce4:	1e 4f       	sbci	r17, 0xFE	; 254
     ce6:	ca 01       	movw	r24, r20
     ce8:	b9 01       	movw	r22, r18
     cea:	0e 94 91 03 	call	0x722	; 0x722 <time_get_time_delta>
     cee:	f8 01       	movw	r30, r16
     cf0:	20 83       	st	Z, r18
     cf2:	f8 01       	movw	r30, r16
     cf4:	31 83       	std	Z+1, r19	; 0x01
     cf6:	f8 01       	movw	r30, r16
     cf8:	42 83       	std	Z+2, r20	; 0x02
     cfa:	f8 01       	movw	r30, r16
     cfc:	53 83       	std	Z+3, r21	; 0x03
     cfe:	f8 01       	movw	r30, r16
     d00:	64 83       	std	Z+4, r22	; 0x04
     d02:	f8 01       	movw	r30, r16
     d04:	75 83       	std	Z+5, r23	; 0x05
     d06:	f8 01       	movw	r30, r16
     d08:	86 83       	std	Z+6, r24	; 0x06
     d0a:	f8 01       	movw	r30, r16
     d0c:	97 83       	std	Z+7, r25	; 0x07
		
		// get interrupt counter delta
		icr[chan] = motors_get_interrupt_counter_result(chan, icr[chan].previous);
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	08 2f       	mov	r16, r24
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	fc 01       	movw	r30, r24
     d26:	ec 55       	subi	r30, 0x5C	; 92
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	20 81       	ld	r18, Z
     d2c:	31 81       	ldd	r19, Z+1	; 0x01
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	b9 01       	movw	r22, r18
     d32:	0e 94 92 08 	call	0x1124	; 0x1124 <motors_get_interrupt_counter_result>
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	c8 01       	movw	r24, r16
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	fc 01       	movw	r30, r24
     d46:	ec 55       	subi	r30, 0x5C	; 92
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	20 83       	st	Z, r18
     d4c:	31 83       	std	Z+1, r19	; 0x01
     d4e:	42 83       	std	Z+2, r20	; 0x02
     d50:	53 83       	std	Z+3, r21	; 0x03
		

		// 60000 is for converting to milliseconds to minutes (for RPM)
        time_ms = get_time_in_ms(tr[chan].delta);
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	fc 01       	movw	r30, r24
     d66:	e4 56       	subi	r30, 0x64	; 100
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	a2 81       	ldd	r26, Z+2	; 0x02
     d70:	b3 81       	ldd	r27, Z+3	; 0x03
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	0e 94 75 03 	call	0x6ea	; 0x6ea <get_time_in_ms>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	8a 87       	std	Y+10, r24	; 0x0a
     d80:	9b 87       	std	Y+11, r25	; 0x0b
     d82:	ac 87       	std	Y+12, r26	; 0x0c
     d84:	bd 87       	std	Y+13, r27	; 0x0d
		rpm =  (float) icr[chan].delta / (float) INTERRUPTS_PER_ROTATION / (float) time_ms * (float) 60000;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	fc 01       	movw	r30, r24
     d96:	ec 55       	subi	r30, 0x5C	; 92
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	cc 01       	movw	r24, r24
     da0:	a0 e0       	ldi	r26, 0x00	; 0
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__floatunsisf>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	52 e4       	ldi	r21, 0x42	; 66
     dbc:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__divsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	2a 85       	ldd	r18, Y+10	; 0x0a
     dca:	3b 85       	ldd	r19, Y+11	; 0x0b
     dcc:	4c 85       	ldd	r20, Y+12	; 0x0c
     dce:	5d 85       	ldd	r21, Y+13	; 0x0d
     dd0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__divsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e6       	ldi	r19, 0x60	; 96
     de0:	4a e6       	ldi	r20, 0x6A	; 106
     de2:	57 e4       	ldi	r21, 0x47	; 71
     de4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	ac 83       	std	Y+4, r26	; 0x04
     df2:	bd 83       	std	Y+5, r27	; 0x05
		
		// avg the rpm delta
        motor->rpm_delta = motor->rpm_delta * 0.65 + (rpm - motor->rpm_previous) * 0.35;		
     df4:	ee 85       	ldd	r30, Y+14	; 0x0e
     df6:	ff 85       	ldd	r31, Y+15	; 0x0f
     df8:	82 85       	ldd	r24, Z+10	; 0x0a
     dfa:	93 85       	ldd	r25, Z+11	; 0x0b
     dfc:	a4 85       	ldd	r26, Z+12	; 0x0c
     dfe:	b5 85       	ldd	r27, Z+13	; 0x0d
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	26 e6       	ldi	r18, 0x66	; 102
     e06:	36 e6       	ldi	r19, 0x66	; 102
     e08:	46 e2       	ldi	r20, 0x26	; 38
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	7c 01       	movw	r14, r24
     e16:	8d 01       	movw	r16, r26
     e18:	ee 85       	ldd	r30, Y+14	; 0x0e
     e1a:	ff 85       	ldd	r31, Y+15	; 0x0f
     e1c:	26 81       	ldd	r18, Z+6	; 0x06
     e1e:	37 81       	ldd	r19, Z+7	; 0x07
     e20:	40 85       	ldd	r20, Z+8	; 0x08
     e22:	51 85       	ldd	r21, Z+9	; 0x09
     e24:	6a 81       	ldd	r22, Y+2	; 0x02
     e26:	7b 81       	ldd	r23, Y+3	; 0x03
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	9d 81       	ldd	r25, Y+5	; 0x05
     e2c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__subsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	23 e3       	ldi	r18, 0x33	; 51
     e3a:	33 e3       	ldi	r19, 0x33	; 51
     e3c:	43 eb       	ldi	r20, 0xB3	; 179
     e3e:	5e e3       	ldi	r21, 0x3E	; 62
     e40:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9c 01       	movw	r18, r24
     e4a:	ad 01       	movw	r20, r26
     e4c:	c8 01       	movw	r24, r16
     e4e:	b7 01       	movw	r22, r14
     e50:	0e 94 85 0a 	call	0x150a	; 0x150a <__addsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	ee 85       	ldd	r30, Y+14	; 0x0e
     e5a:	ff 85       	ldd	r31, Y+15	; 0x0f
     e5c:	82 87       	std	Z+10, r24	; 0x0a
     e5e:	93 87       	std	Z+11, r25	; 0x0b
     e60:	a4 87       	std	Z+12, r26	; 0x0c
     e62:	b5 87       	std	Z+13, r27	; 0x0d
		
		// determine the pwm acceleration rate
        pwm_acc = ((float) motor->rpm_target - rpm) * 0.015 - motor->rpm_delta * 0.15;
     e64:	ee 85       	ldd	r30, Y+14	; 0x0e
     e66:	ff 85       	ldd	r31, Y+15	; 0x0f
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	cc 01       	movw	r24, r24
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__floatunsisf>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	2a 81       	ldd	r18, Y+2	; 0x02
     e84:	3b 81       	ldd	r19, Y+3	; 0x03
     e86:	4c 81       	ldd	r20, Y+4	; 0x04
     e88:	5d 81       	ldd	r21, Y+5	; 0x05
     e8a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__subsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	2f e8       	ldi	r18, 0x8F	; 143
     e98:	32 ec       	ldi	r19, 0xC2	; 194
     e9a:	45 e7       	ldi	r20, 0x75	; 117
     e9c:	5c e3       	ldi	r21, 0x3C	; 60
     e9e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	7c 01       	movw	r14, r24
     ea8:	8d 01       	movw	r16, r26
     eaa:	ee 85       	ldd	r30, Y+14	; 0x0e
     eac:	ff 85       	ldd	r31, Y+15	; 0x0f
     eae:	82 85       	ldd	r24, Z+10	; 0x0a
     eb0:	93 85       	ldd	r25, Z+11	; 0x0b
     eb2:	a4 85       	ldd	r26, Z+12	; 0x0c
     eb4:	b5 85       	ldd	r27, Z+13	; 0x0d
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	2a e9       	ldi	r18, 0x9A	; 154
     ebc:	39 e9       	ldi	r19, 0x99	; 153
     ebe:	49 e1       	ldi	r20, 0x19	; 25
     ec0:	5e eb       	ldi	r21, 0xBE	; 190
     ec2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__mulsf3>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9c 01       	movw	r18, r24
     ecc:	ad 01       	movw	r20, r26
     ece:	c8 01       	movw	r24, r16
     ed0:	b7 01       	movw	r22, r14
     ed2:	0e 94 85 0a 	call	0x150a	; 0x150a <__addsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	8e 83       	std	Y+6, r24	; 0x06
     edc:	9f 83       	std	Y+7, r25	; 0x07
     ede:	a8 87       	std	Y+8, r26	; 0x08
     ee0:	b9 87       	std	Y+9, r27	; 0x09
		
		if (pwm_acc < - motor->pwm) motor->pwm = 0;
     ee2:	ee 85       	ldd	r30, Y+14	; 0x0e
     ee4:	ff 85       	ldd	r31, Y+15	; 0x0f
     ee6:	86 85       	ldd	r24, Z+14	; 0x0e
     ee8:	97 85       	ldd	r25, Z+15	; 0x0f
     eea:	a0 89       	ldd	r26, Z+16	; 0x10
     eec:	b1 89       	ldd	r27, Z+17	; 0x11
     eee:	b0 58       	subi	r27, 0x80	; 128
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	48 85       	ldd	r20, Y+8	; 0x08
     efa:	59 85       	ldd	r21, Y+9	; 0x09
     efc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__gtsf2>
     f00:	18 16       	cp	r1, r24
     f02:	5c f4       	brge	.+22     	; 0xf1a <motors_tick+0x29a>
     f04:	ee 85       	ldd	r30, Y+14	; 0x0e
     f06:	ff 85       	ldd	r31, Y+15	; 0x0f
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	86 87       	std	Z+14, r24	; 0x0e
     f12:	97 87       	std	Z+15, r25	; 0x0f
     f14:	a0 8b       	std	Z+16, r26	; 0x10
     f16:	b1 8b       	std	Z+17, r27	; 0x11
     f18:	3b c0       	rjmp	.+118    	; 0xf90 <motors_tick+0x310>
		else if (pwm_acc + motor->pwm > 1023) motor->pwm = 1023;
     f1a:	ee 85       	ldd	r30, Y+14	; 0x0e
     f1c:	ff 85       	ldd	r31, Y+15	; 0x0f
     f1e:	86 85       	ldd	r24, Z+14	; 0x0e
     f20:	97 85       	ldd	r25, Z+15	; 0x0f
     f22:	a0 89       	ldd	r26, Z+16	; 0x10
     f24:	b1 89       	ldd	r27, Z+17	; 0x11
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	2e 81       	ldd	r18, Y+6	; 0x06
     f2c:	3f 81       	ldd	r19, Y+7	; 0x07
     f2e:	48 85       	ldd	r20, Y+8	; 0x08
     f30:	59 85       	ldd	r21, Y+9	; 0x09
     f32:	0e 94 85 0a 	call	0x150a	; 0x150a <__addsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 ec       	ldi	r19, 0xC0	; 192
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	5c f4       	brge	.+22     	; 0xf64 <motors_tick+0x2e4>
     f4e:	ee 85       	ldd	r30, Y+14	; 0x0e
     f50:	ff 85       	ldd	r31, Y+15	; 0x0f
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 ec       	ldi	r25, 0xC0	; 192
     f56:	af e7       	ldi	r26, 0x7F	; 127
     f58:	b4 e4       	ldi	r27, 0x44	; 68
     f5a:	86 87       	std	Z+14, r24	; 0x0e
     f5c:	97 87       	std	Z+15, r25	; 0x0f
     f5e:	a0 8b       	std	Z+16, r26	; 0x10
     f60:	b1 8b       	std	Z+17, r27	; 0x11
     f62:	16 c0       	rjmp	.+44     	; 0xf90 <motors_tick+0x310>
		else{
			 motor->pwm =  motor->pwm + pwm_acc;
     f64:	ee 85       	ldd	r30, Y+14	; 0x0e
     f66:	ff 85       	ldd	r31, Y+15	; 0x0f
     f68:	86 85       	ldd	r24, Z+14	; 0x0e
     f6a:	97 85       	ldd	r25, Z+15	; 0x0f
     f6c:	a0 89       	ldd	r26, Z+16	; 0x10
     f6e:	b1 89       	ldd	r27, Z+17	; 0x11
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	2e 81       	ldd	r18, Y+6	; 0x06
     f76:	3f 81       	ldd	r19, Y+7	; 0x07
     f78:	48 85       	ldd	r20, Y+8	; 0x08
     f7a:	59 85       	ldd	r21, Y+9	; 0x09
     f7c:	0e 94 85 0a 	call	0x150a	; 0x150a <__addsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	ee 85       	ldd	r30, Y+14	; 0x0e
     f86:	ff 85       	ldd	r31, Y+15	; 0x0f
     f88:	86 87       	std	Z+14, r24	; 0x0e
     f8a:	97 87       	std	Z+15, r25	; 0x0f
     f8c:	a0 8b       	std	Z+16, r26	; 0x10
     f8e:	b1 8b       	std	Z+17, r27	; 0x11
		}

		
		if (motor->rpm_target == 0) motor->pwm = 0;
     f90:	ee 85       	ldd	r30, Y+14	; 0x0e
     f92:	ff 85       	ldd	r31, Y+15	; 0x0f
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	51 f4       	brne	.+20     	; 0xfb0 <motors_tick+0x330>
     f9c:	ee 85       	ldd	r30, Y+14	; 0x0e
     f9e:	ff 85       	ldd	r31, Y+15	; 0x0f
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	86 87       	std	Z+14, r24	; 0x0e
     faa:	97 87       	std	Z+15, r25	; 0x0f
     fac:	a0 8b       	std	Z+16, r26	; 0x10
     fae:	b1 8b       	std	Z+17, r27	; 0x11
		pwm_set(chan,floor(motor->pwm));
     fb0:	ee 85       	ldd	r30, Y+14	; 0x0e
     fb2:	ff 85       	ldd	r31, Y+15	; 0x0f
     fb4:	86 85       	ldd	r24, Z+14	; 0x0e
     fb6:	97 85       	ldd	r25, Z+15	; 0x0f
     fb8:	a0 89       	ldd	r26, Z+16	; 0x10
     fba:	b1 89       	ldd	r27, Z+17	; 0x11
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <floor>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9c 01       	movw	r18, r24
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	b9 01       	movw	r22, r18
     fda:	0e 94 47 03 	call	0x68e	; 0x68e <pwm_set>
		motor->rpm_previous = rpm;
     fde:	ee 85       	ldd	r30, Y+14	; 0x0e
     fe0:	ff 85       	ldd	r31, Y+15	; 0x0f
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	ac 81       	ldd	r26, Y+4	; 0x04
     fe8:	bd 81       	ldd	r27, Y+5	; 0x05
     fea:	86 83       	std	Z+6, r24	; 0x06
     fec:	97 83       	std	Z+7, r25	; 0x07
     fee:	a0 87       	std	Z+8, r26	; 0x08
     ff0:	b1 87       	std	Z+9, r27	; 0x09
	static InterruptCounterResult icr[MOTORS_CHANS];
    static TimeResult tr[MOTORS_CHANS];
	float time_ms, pwm_acc, rpm;
	uint8_t chan;

	for (chan = 0; chan < MOTORS_CHANS; chan ++){
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <motors_tick+0x380>
     ffe:	50 ce       	rjmp	.-864    	; 0xca0 <motors_tick+0x20>
		
		if (motor->rpm_target == 0) motor->pwm = 0;
		pwm_set(chan,floor(motor->pwm));
		motor->rpm_previous = rpm;
	}    
}
    1000:	2f 96       	adiw	r28, 0x0f	; 15
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <__vector_1>:
/*******************************/
/* INTERNAL ONLY FUNCTIONS     */
/*******************************/

// LEFT motor interrupt
ISR(INT0_vect, ISR_NOBLOCK){	
    101a:	78 94       	sei
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <__vector_1+0x2a>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
	uint16_t* counter = motors_get_counter(MOTORS_LEFT);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 81 08 	call	0x1102	; 0x1102 <motors_get_counter>
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    *counter = *counter + 1;
    1052:	e9 81       	ldd	r30, Y+1	; 0x01
    1054:	fa 81       	ldd	r31, Y+2	; 0x02
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_2>:

// RIGHT motor interrupt
ISR(INT1_vect, ISR_NOBLOCK){	
    108e:	78 94       	sei
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	4f 93       	push	r20
    10a0:	5f 93       	push	r21
    10a2:	6f 93       	push	r22
    10a4:	7f 93       	push	r23
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
    10ae:	ef 93       	push	r30
    10b0:	ff 93       	push	r31
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <__vector_2+0x2a>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	uint16_t* counter = motors_get_counter(MOTORS_RIGHT);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 81 08 	call	0x1102	; 0x1102 <motors_get_counter>
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
    *counter = *counter + 1;
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	e9 81       	ldd	r30, Y+1	; 0x01
    10d2:	fa 81       	ldd	r31, Y+2	; 0x02
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <motors_get_counter>:

// get an interrupt counter by channel
uint16_t* motors_get_counter(uint8_t chan){
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
	static uint16_t counters[2];
	return &counters[chan];
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	88 55       	subi	r24, 0x58	; 88
    111a:	9e 4f       	sbci	r25, 0xFE	; 254

}
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <motors_get_interrupt_counter_result>:

// calculate a counter delta, internal only 
InterruptCounterResult motors_get_interrupt_counter_result(uint8_t chan, uint16_t previous){
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	29 97       	sbiw	r28, 0x09	; 9
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	8f 83       	std	Y+7, r24	; 0x07
    113a:	79 87       	std	Y+9, r23	; 0x09
    113c:	68 87       	std	Y+8, r22	; 0x08

    InterruptCounterResult result;
    uint16_t* current = motors_get_counter(chan);
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	0e 94 81 08 	call	0x1102	; 0x1102 <motors_get_counter>
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
    if (*current >= previous) result.delta = *current - previous;
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	20 81       	ld	r18, Z
    114e:	31 81       	ldd	r19, Z+1	; 0x01
    1150:	88 85       	ldd	r24, Y+8	; 0x08
    1152:	99 85       	ldd	r25, Y+9	; 0x09
    1154:	28 17       	cp	r18, r24
    1156:	39 07       	cpc	r19, r25
    1158:	68 f0       	brcs	.+26     	; 0x1174 <motors_get_interrupt_counter_result+0x50>
    115a:	e9 81       	ldd	r30, Y+1	; 0x01
    115c:	fa 81       	ldd	r31, Y+2	; 0x02
    115e:	20 81       	ld	r18, Z
    1160:	31 81       	ldd	r19, Z+1	; 0x01
    1162:	88 85       	ldd	r24, Y+8	; 0x08
    1164:	99 85       	ldd	r25, Y+9	; 0x09
    1166:	a9 01       	movw	r20, r18
    1168:	48 1b       	sub	r20, r24
    116a:	59 0b       	sbc	r21, r25
    116c:	ca 01       	movw	r24, r20
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	8b 83       	std	Y+3, r24	; 0x03
    1172:	0d c0       	rjmp	.+26     	; 0x118e <motors_get_interrupt_counter_result+0x6a>
    else result.delta = (uint16_t) INTERRUPT_COUNTER_MAX - previous + *current;
    1174:	88 85       	ldd	r24, Y+8	; 0x08
    1176:	99 85       	ldd	r25, Y+9	; 0x09
    1178:	9c 01       	movw	r18, r24
    117a:	20 95       	com	r18
    117c:	30 95       	com	r19
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 83       	std	Y+3, r24	; 0x03
    result.previous = *current;
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    return result;
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	ad 81       	ldd	r26, Y+5	; 0x05
    11a0:	be 81       	ldd	r27, Y+6	; 0x06
}
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	29 96       	adiw	r28, 0x09	; 9
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <__fixunssfsi>:
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	7b 01       	movw	r14, r22
    11c2:	8c 01       	movw	r16, r24
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	5f e4       	ldi	r21, 0x4F	; 79
    11cc:	0e 94 88 0c 	call	0x1910	; 0x1910 <__gesf2>
    11d0:	88 23       	and	r24, r24
    11d2:	8c f0       	brlt	.+34     	; 0x11f6 <__fixunssfsi+0x3e>
    11d4:	c8 01       	movw	r24, r16
    11d6:	b7 01       	movw	r22, r14
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	5f e4       	ldi	r21, 0x4F	; 79
    11e0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__subsf3>
    11e4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fixsfsi>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	20 50       	subi	r18, 0x00	; 0
    11ee:	30 40       	sbci	r19, 0x00	; 0
    11f0:	40 40       	sbci	r20, 0x00	; 0
    11f2:	50 48       	sbci	r21, 0x80	; 128
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <__fixunssfsi+0x4a>
    11f6:	c8 01       	movw	r24, r16
    11f8:	b7 01       	movw	r22, r14
    11fa:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fixsfsi>
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	b9 01       	movw	r22, r18
    1204:	ca 01       	movw	r24, r20
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	08 95       	ret

00001210 <_fpadd_parts>:
    1210:	a0 e0       	ldi	r26, 0x00	; 0
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ee e0       	ldi	r30, 0x0E	; 14
    1216:	f9 e0       	ldi	r31, 0x09	; 9
    1218:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__prologue_saves__>
    121c:	dc 01       	movw	r26, r24
    121e:	2b 01       	movw	r4, r22
    1220:	fa 01       	movw	r30, r20
    1222:	9c 91       	ld	r25, X
    1224:	92 30       	cpi	r25, 0x02	; 2
    1226:	08 f4       	brcc	.+2      	; 0x122a <_fpadd_parts+0x1a>
    1228:	39 c1       	rjmp	.+626    	; 0x149c <_fpadd_parts+0x28c>
    122a:	eb 01       	movw	r28, r22
    122c:	88 81       	ld	r24, Y
    122e:	82 30       	cpi	r24, 0x02	; 2
    1230:	08 f4       	brcc	.+2      	; 0x1234 <_fpadd_parts+0x24>
    1232:	33 c1       	rjmp	.+614    	; 0x149a <_fpadd_parts+0x28a>
    1234:	94 30       	cpi	r25, 0x04	; 4
    1236:	69 f4       	brne	.+26     	; 0x1252 <_fpadd_parts+0x42>
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	09 f0       	breq	.+2      	; 0x123e <_fpadd_parts+0x2e>
    123c:	2f c1       	rjmp	.+606    	; 0x149c <_fpadd_parts+0x28c>
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	9c 91       	ld	r25, X
    1242:	11 97       	sbiw	r26, 0x01	; 1
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	98 17       	cp	r25, r24
    1248:	09 f4       	brne	.+2      	; 0x124c <_fpadd_parts+0x3c>
    124a:	28 c1       	rjmp	.+592    	; 0x149c <_fpadd_parts+0x28c>
    124c:	a2 e6       	ldi	r26, 0x62	; 98
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	25 c1       	rjmp	.+586    	; 0x149c <_fpadd_parts+0x28c>
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	09 f4       	brne	.+2      	; 0x1258 <_fpadd_parts+0x48>
    1256:	21 c1       	rjmp	.+578    	; 0x149a <_fpadd_parts+0x28a>
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	a9 f4       	brne	.+42     	; 0x1286 <_fpadd_parts+0x76>
    125c:	92 30       	cpi	r25, 0x02	; 2
    125e:	09 f0       	breq	.+2      	; 0x1262 <_fpadd_parts+0x52>
    1260:	1d c1       	rjmp	.+570    	; 0x149c <_fpadd_parts+0x28c>
    1262:	9a 01       	movw	r18, r20
    1264:	ad 01       	movw	r20, r26
    1266:	88 e0       	ldi	r24, 0x08	; 8
    1268:	ea 01       	movw	r28, r20
    126a:	09 90       	ld	r0, Y+
    126c:	ae 01       	movw	r20, r28
    126e:	e9 01       	movw	r28, r18
    1270:	09 92       	st	Y+, r0
    1272:	9e 01       	movw	r18, r28
    1274:	81 50       	subi	r24, 0x01	; 1
    1276:	c1 f7       	brne	.-16     	; 0x1268 <_fpadd_parts+0x58>
    1278:	e2 01       	movw	r28, r4
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	11 96       	adiw	r26, 0x01	; 1
    127e:	9c 91       	ld	r25, X
    1280:	89 23       	and	r24, r25
    1282:	81 83       	std	Z+1, r24	; 0x01
    1284:	08 c1       	rjmp	.+528    	; 0x1496 <_fpadd_parts+0x286>
    1286:	92 30       	cpi	r25, 0x02	; 2
    1288:	09 f4       	brne	.+2      	; 0x128c <_fpadd_parts+0x7c>
    128a:	07 c1       	rjmp	.+526    	; 0x149a <_fpadd_parts+0x28a>
    128c:	12 96       	adiw	r26, 0x02	; 2
    128e:	2d 90       	ld	r2, X+
    1290:	3c 90       	ld	r3, X
    1292:	13 97       	sbiw	r26, 0x03	; 3
    1294:	eb 01       	movw	r28, r22
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	14 96       	adiw	r26, 0x04	; 4
    129c:	ad 90       	ld	r10, X+
    129e:	bd 90       	ld	r11, X+
    12a0:	cd 90       	ld	r12, X+
    12a2:	dc 90       	ld	r13, X
    12a4:	17 97       	sbiw	r26, 0x07	; 7
    12a6:	ec 80       	ldd	r14, Y+4	; 0x04
    12a8:	fd 80       	ldd	r15, Y+5	; 0x05
    12aa:	0e 81       	ldd	r16, Y+6	; 0x06
    12ac:	1f 81       	ldd	r17, Y+7	; 0x07
    12ae:	91 01       	movw	r18, r2
    12b0:	28 1b       	sub	r18, r24
    12b2:	39 0b       	sbc	r19, r25
    12b4:	b9 01       	movw	r22, r18
    12b6:	37 ff       	sbrs	r19, 7
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <_fpadd_parts+0xb2>
    12ba:	66 27       	eor	r22, r22
    12bc:	77 27       	eor	r23, r23
    12be:	62 1b       	sub	r22, r18
    12c0:	73 0b       	sbc	r23, r19
    12c2:	60 32       	cpi	r22, 0x20	; 32
    12c4:	71 05       	cpc	r23, r1
    12c6:	0c f0       	brlt	.+2      	; 0x12ca <_fpadd_parts+0xba>
    12c8:	61 c0       	rjmp	.+194    	; 0x138c <_fpadd_parts+0x17c>
    12ca:	12 16       	cp	r1, r18
    12cc:	13 06       	cpc	r1, r19
    12ce:	6c f5       	brge	.+90     	; 0x132a <_fpadd_parts+0x11a>
    12d0:	37 01       	movw	r6, r14
    12d2:	48 01       	movw	r8, r16
    12d4:	06 2e       	mov	r0, r22
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <_fpadd_parts+0xd0>
    12d8:	96 94       	lsr	r9
    12da:	87 94       	ror	r8
    12dc:	77 94       	ror	r7
    12de:	67 94       	ror	r6
    12e0:	0a 94       	dec	r0
    12e2:	d2 f7       	brpl	.-12     	; 0x12d8 <_fpadd_parts+0xc8>
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <_fpadd_parts+0xe6>
    12ee:	22 0f       	add	r18, r18
    12f0:	33 1f       	adc	r19, r19
    12f2:	44 1f       	adc	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	6a 95       	dec	r22
    12f8:	d2 f7       	brpl	.-12     	; 0x12ee <_fpadd_parts+0xde>
    12fa:	21 50       	subi	r18, 0x01	; 1
    12fc:	30 40       	sbci	r19, 0x00	; 0
    12fe:	40 40       	sbci	r20, 0x00	; 0
    1300:	50 40       	sbci	r21, 0x00	; 0
    1302:	2e 21       	and	r18, r14
    1304:	3f 21       	and	r19, r15
    1306:	40 23       	and	r20, r16
    1308:	51 23       	and	r21, r17
    130a:	21 15       	cp	r18, r1
    130c:	31 05       	cpc	r19, r1
    130e:	41 05       	cpc	r20, r1
    1310:	51 05       	cpc	r21, r1
    1312:	21 f0       	breq	.+8      	; 0x131c <_fpadd_parts+0x10c>
    1314:	21 e0       	ldi	r18, 0x01	; 1
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	79 01       	movw	r14, r18
    131e:	8a 01       	movw	r16, r20
    1320:	e6 28       	or	r14, r6
    1322:	f7 28       	or	r15, r7
    1324:	08 29       	or	r16, r8
    1326:	19 29       	or	r17, r9
    1328:	3c c0       	rjmp	.+120    	; 0x13a2 <_fpadd_parts+0x192>
    132a:	23 2b       	or	r18, r19
    132c:	d1 f1       	breq	.+116    	; 0x13a2 <_fpadd_parts+0x192>
    132e:	26 0e       	add	r2, r22
    1330:	37 1e       	adc	r3, r23
    1332:	35 01       	movw	r6, r10
    1334:	46 01       	movw	r8, r12
    1336:	06 2e       	mov	r0, r22
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <_fpadd_parts+0x132>
    133a:	96 94       	lsr	r9
    133c:	87 94       	ror	r8
    133e:	77 94       	ror	r7
    1340:	67 94       	ror	r6
    1342:	0a 94       	dec	r0
    1344:	d2 f7       	brpl	.-12     	; 0x133a <_fpadd_parts+0x12a>
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <_fpadd_parts+0x148>
    1350:	22 0f       	add	r18, r18
    1352:	33 1f       	adc	r19, r19
    1354:	44 1f       	adc	r20, r20
    1356:	55 1f       	adc	r21, r21
    1358:	6a 95       	dec	r22
    135a:	d2 f7       	brpl	.-12     	; 0x1350 <_fpadd_parts+0x140>
    135c:	21 50       	subi	r18, 0x01	; 1
    135e:	30 40       	sbci	r19, 0x00	; 0
    1360:	40 40       	sbci	r20, 0x00	; 0
    1362:	50 40       	sbci	r21, 0x00	; 0
    1364:	2a 21       	and	r18, r10
    1366:	3b 21       	and	r19, r11
    1368:	4c 21       	and	r20, r12
    136a:	5d 21       	and	r21, r13
    136c:	21 15       	cp	r18, r1
    136e:	31 05       	cpc	r19, r1
    1370:	41 05       	cpc	r20, r1
    1372:	51 05       	cpc	r21, r1
    1374:	21 f0       	breq	.+8      	; 0x137e <_fpadd_parts+0x16e>
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	59 01       	movw	r10, r18
    1380:	6a 01       	movw	r12, r20
    1382:	a6 28       	or	r10, r6
    1384:	b7 28       	or	r11, r7
    1386:	c8 28       	or	r12, r8
    1388:	d9 28       	or	r13, r9
    138a:	0b c0       	rjmp	.+22     	; 0x13a2 <_fpadd_parts+0x192>
    138c:	82 15       	cp	r24, r2
    138e:	93 05       	cpc	r25, r3
    1390:	2c f0       	brlt	.+10     	; 0x139c <_fpadd_parts+0x18c>
    1392:	1c 01       	movw	r2, r24
    1394:	aa 24       	eor	r10, r10
    1396:	bb 24       	eor	r11, r11
    1398:	65 01       	movw	r12, r10
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <_fpadd_parts+0x192>
    139c:	ee 24       	eor	r14, r14
    139e:	ff 24       	eor	r15, r15
    13a0:	87 01       	movw	r16, r14
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	9c 91       	ld	r25, X
    13a6:	d2 01       	movw	r26, r4
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	8c 91       	ld	r24, X
    13ac:	98 17       	cp	r25, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <_fpadd_parts+0x1a2>
    13b0:	45 c0       	rjmp	.+138    	; 0x143c <_fpadd_parts+0x22c>
    13b2:	99 23       	and	r25, r25
    13b4:	39 f0       	breq	.+14     	; 0x13c4 <_fpadd_parts+0x1b4>
    13b6:	a8 01       	movw	r20, r16
    13b8:	97 01       	movw	r18, r14
    13ba:	2a 19       	sub	r18, r10
    13bc:	3b 09       	sbc	r19, r11
    13be:	4c 09       	sbc	r20, r12
    13c0:	5d 09       	sbc	r21, r13
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <_fpadd_parts+0x1c0>
    13c4:	a6 01       	movw	r20, r12
    13c6:	95 01       	movw	r18, r10
    13c8:	2e 19       	sub	r18, r14
    13ca:	3f 09       	sbc	r19, r15
    13cc:	40 0b       	sbc	r20, r16
    13ce:	51 0b       	sbc	r21, r17
    13d0:	57 fd       	sbrc	r21, 7
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <_fpadd_parts+0x1d4>
    13d4:	11 82       	std	Z+1, r1	; 0x01
    13d6:	33 82       	std	Z+3, r3	; 0x03
    13d8:	22 82       	std	Z+2, r2	; 0x02
    13da:	24 83       	std	Z+4, r18	; 0x04
    13dc:	35 83       	std	Z+5, r19	; 0x05
    13de:	46 83       	std	Z+6, r20	; 0x06
    13e0:	57 83       	std	Z+7, r21	; 0x07
    13e2:	1d c0       	rjmp	.+58     	; 0x141e <_fpadd_parts+0x20e>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	81 83       	std	Z+1, r24	; 0x01
    13e8:	33 82       	std	Z+3, r3	; 0x03
    13ea:	22 82       	std	Z+2, r2	; 0x02
    13ec:	88 27       	eor	r24, r24
    13ee:	99 27       	eor	r25, r25
    13f0:	dc 01       	movw	r26, r24
    13f2:	82 1b       	sub	r24, r18
    13f4:	93 0b       	sbc	r25, r19
    13f6:	a4 0b       	sbc	r26, r20
    13f8:	b5 0b       	sbc	r27, r21
    13fa:	84 83       	std	Z+4, r24	; 0x04
    13fc:	95 83       	std	Z+5, r25	; 0x05
    13fe:	a6 83       	std	Z+6, r26	; 0x06
    1400:	b7 83       	std	Z+7, r27	; 0x07
    1402:	0d c0       	rjmp	.+26     	; 0x141e <_fpadd_parts+0x20e>
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	44 1f       	adc	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	24 83       	std	Z+4, r18	; 0x04
    140e:	35 83       	std	Z+5, r19	; 0x05
    1410:	46 83       	std	Z+6, r20	; 0x06
    1412:	57 83       	std	Z+7, r21	; 0x07
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	93 83       	std	Z+3, r25	; 0x03
    141c:	82 83       	std	Z+2, r24	; 0x02
    141e:	24 81       	ldd	r18, Z+4	; 0x04
    1420:	35 81       	ldd	r19, Z+5	; 0x05
    1422:	46 81       	ldd	r20, Z+6	; 0x06
    1424:	57 81       	ldd	r21, Z+7	; 0x07
    1426:	da 01       	movw	r26, r20
    1428:	c9 01       	movw	r24, r18
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	a1 09       	sbc	r26, r1
    142e:	b1 09       	sbc	r27, r1
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	af 4f       	sbci	r26, 0xFF	; 255
    1436:	bf 43       	sbci	r27, 0x3F	; 63
    1438:	28 f3       	brcs	.-54     	; 0x1404 <_fpadd_parts+0x1f4>
    143a:	0b c0       	rjmp	.+22     	; 0x1452 <_fpadd_parts+0x242>
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	33 82       	std	Z+3, r3	; 0x03
    1440:	22 82       	std	Z+2, r2	; 0x02
    1442:	ea 0c       	add	r14, r10
    1444:	fb 1c       	adc	r15, r11
    1446:	0c 1d       	adc	r16, r12
    1448:	1d 1d       	adc	r17, r13
    144a:	e4 82       	std	Z+4, r14	; 0x04
    144c:	f5 82       	std	Z+5, r15	; 0x05
    144e:	06 83       	std	Z+6, r16	; 0x06
    1450:	17 83       	std	Z+7, r17	; 0x07
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	80 83       	st	Z, r24
    1456:	24 81       	ldd	r18, Z+4	; 0x04
    1458:	35 81       	ldd	r19, Z+5	; 0x05
    145a:	46 81       	ldd	r20, Z+6	; 0x06
    145c:	57 81       	ldd	r21, Z+7	; 0x07
    145e:	57 ff       	sbrs	r21, 7
    1460:	1a c0       	rjmp	.+52     	; 0x1496 <_fpadd_parts+0x286>
    1462:	c9 01       	movw	r24, r18
    1464:	aa 27       	eor	r26, r26
    1466:	97 fd       	sbrc	r25, 7
    1468:	a0 95       	com	r26
    146a:	ba 2f       	mov	r27, r26
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	90 70       	andi	r25, 0x00	; 0
    1470:	a0 70       	andi	r26, 0x00	; 0
    1472:	b0 70       	andi	r27, 0x00	; 0
    1474:	56 95       	lsr	r21
    1476:	47 95       	ror	r20
    1478:	37 95       	ror	r19
    147a:	27 95       	ror	r18
    147c:	82 2b       	or	r24, r18
    147e:	93 2b       	or	r25, r19
    1480:	a4 2b       	or	r26, r20
    1482:	b5 2b       	or	r27, r21
    1484:	84 83       	std	Z+4, r24	; 0x04
    1486:	95 83       	std	Z+5, r25	; 0x05
    1488:	a6 83       	std	Z+6, r26	; 0x06
    148a:	b7 83       	std	Z+7, r27	; 0x07
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	93 83       	std	Z+3, r25	; 0x03
    1494:	82 83       	std	Z+2, r24	; 0x02
    1496:	df 01       	movw	r26, r30
    1498:	01 c0       	rjmp	.+2      	; 0x149c <_fpadd_parts+0x28c>
    149a:	d2 01       	movw	r26, r4
    149c:	cd 01       	movw	r24, r26
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	e2 e1       	ldi	r30, 0x12	; 18
    14a4:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__epilogue_restores__>

000014a8 <__subsf3>:
    14a8:	a0 e2       	ldi	r26, 0x20	; 32
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ea e5       	ldi	r30, 0x5A	; 90
    14ae:	fa e0       	ldi	r31, 0x0A	; 10
    14b0:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__prologue_saves__+0x18>
    14b4:	69 83       	std	Y+1, r22	; 0x01
    14b6:	7a 83       	std	Y+2, r23	; 0x02
    14b8:	8b 83       	std	Y+3, r24	; 0x03
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	2d 83       	std	Y+5, r18	; 0x05
    14be:	3e 83       	std	Y+6, r19	; 0x06
    14c0:	4f 83       	std	Y+7, r20	; 0x07
    14c2:	58 87       	std	Y+8, r21	; 0x08
    14c4:	e9 e0       	ldi	r30, 0x09	; 9
    14c6:	ee 2e       	mov	r14, r30
    14c8:	f1 2c       	mov	r15, r1
    14ca:	ec 0e       	add	r14, r28
    14cc:	fd 1e       	adc	r15, r29
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	b7 01       	movw	r22, r14
    14d4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    14d8:	8e 01       	movw	r16, r28
    14da:	0f 5e       	subi	r16, 0xEF	; 239
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	ce 01       	movw	r24, r28
    14e0:	05 96       	adiw	r24, 0x05	; 5
    14e2:	b8 01       	movw	r22, r16
    14e4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    14e8:	8a 89       	ldd	r24, Y+18	; 0x12
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	89 27       	eor	r24, r25
    14ee:	8a 8b       	std	Y+18, r24	; 0x12
    14f0:	c7 01       	movw	r24, r14
    14f2:	b8 01       	movw	r22, r16
    14f4:	ae 01       	movw	r20, r28
    14f6:	47 5e       	subi	r20, 0xE7	; 231
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	0e 94 08 09 	call	0x1210	; 0x1210 <_fpadd_parts>
    14fe:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__pack_f>
    1502:	a0 96       	adiw	r28, 0x20	; 32
    1504:	e6 e0       	ldi	r30, 0x06	; 6
    1506:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__epilogue_restores__+0x18>

0000150a <__addsf3>:
    150a:	a0 e2       	ldi	r26, 0x20	; 32
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e8       	ldi	r30, 0x8B	; 139
    1510:	fa e0       	ldi	r31, 0x0A	; 10
    1512:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__prologue_saves__+0x18>
    1516:	69 83       	std	Y+1, r22	; 0x01
    1518:	7a 83       	std	Y+2, r23	; 0x02
    151a:	8b 83       	std	Y+3, r24	; 0x03
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	2d 83       	std	Y+5, r18	; 0x05
    1520:	3e 83       	std	Y+6, r19	; 0x06
    1522:	4f 83       	std	Y+7, r20	; 0x07
    1524:	58 87       	std	Y+8, r21	; 0x08
    1526:	f9 e0       	ldi	r31, 0x09	; 9
    1528:	ef 2e       	mov	r14, r31
    152a:	f1 2c       	mov	r15, r1
    152c:	ec 0e       	add	r14, r28
    152e:	fd 1e       	adc	r15, r29
    1530:	ce 01       	movw	r24, r28
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	b7 01       	movw	r22, r14
    1536:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    153a:	8e 01       	movw	r16, r28
    153c:	0f 5e       	subi	r16, 0xEF	; 239
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	ce 01       	movw	r24, r28
    1542:	05 96       	adiw	r24, 0x05	; 5
    1544:	b8 01       	movw	r22, r16
    1546:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    154a:	c7 01       	movw	r24, r14
    154c:	b8 01       	movw	r22, r16
    154e:	ae 01       	movw	r20, r28
    1550:	47 5e       	subi	r20, 0xE7	; 231
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	0e 94 08 09 	call	0x1210	; 0x1210 <_fpadd_parts>
    1558:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__pack_f>
    155c:	a0 96       	adiw	r28, 0x20	; 32
    155e:	e6 e0       	ldi	r30, 0x06	; 6
    1560:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__epilogue_restores__+0x18>

00001564 <__mulsf3>:
    1564:	a0 e2       	ldi	r26, 0x20	; 32
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e8 eb       	ldi	r30, 0xB8	; 184
    156a:	fa e0       	ldi	r31, 0x0A	; 10
    156c:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__prologue_saves__>
    1570:	69 83       	std	Y+1, r22	; 0x01
    1572:	7a 83       	std	Y+2, r23	; 0x02
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	2d 83       	std	Y+5, r18	; 0x05
    157a:	3e 83       	std	Y+6, r19	; 0x06
    157c:	4f 83       	std	Y+7, r20	; 0x07
    157e:	58 87       	std	Y+8, r21	; 0x08
    1580:	ce 01       	movw	r24, r28
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	be 01       	movw	r22, r28
    1586:	67 5f       	subi	r22, 0xF7	; 247
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    158e:	ce 01       	movw	r24, r28
    1590:	05 96       	adiw	r24, 0x05	; 5
    1592:	be 01       	movw	r22, r28
    1594:	6f 5e       	subi	r22, 0xEF	; 239
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    159c:	99 85       	ldd	r25, Y+9	; 0x09
    159e:	92 30       	cpi	r25, 0x02	; 2
    15a0:	88 f0       	brcs	.+34     	; 0x15c4 <__mulsf3+0x60>
    15a2:	89 89       	ldd	r24, Y+17	; 0x11
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	c8 f0       	brcs	.+50     	; 0x15da <__mulsf3+0x76>
    15a8:	94 30       	cpi	r25, 0x04	; 4
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <__mulsf3+0x4e>
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	51 f4       	brne	.+20     	; 0x15c4 <__mulsf3+0x60>
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <__mulsf3+0x56>
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	29 f4       	brne	.+10     	; 0x15c0 <__mulsf3+0x5c>
    15b6:	92 30       	cpi	r25, 0x02	; 2
    15b8:	81 f4       	brne	.+32     	; 0x15da <__mulsf3+0x76>
    15ba:	82 e6       	ldi	r24, 0x62	; 98
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	c6 c0       	rjmp	.+396    	; 0x174c <__mulsf3+0x1e8>
    15c0:	92 30       	cpi	r25, 0x02	; 2
    15c2:	49 f4       	brne	.+18     	; 0x15d6 <__mulsf3+0x72>
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c8:	8a 89       	ldd	r24, Y+18	; 0x12
    15ca:	98 13       	cpse	r25, r24
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	2a 87       	std	Y+10, r18	; 0x0a
    15d0:	ce 01       	movw	r24, r28
    15d2:	09 96       	adiw	r24, 0x09	; 9
    15d4:	bb c0       	rjmp	.+374    	; 0x174c <__mulsf3+0x1e8>
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	49 f4       	brne	.+18     	; 0x15ec <__mulsf3+0x88>
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15de:	8a 89       	ldd	r24, Y+18	; 0x12
    15e0:	98 13       	cpse	r25, r24
    15e2:	21 e0       	ldi	r18, 0x01	; 1
    15e4:	2a 8b       	std	Y+18, r18	; 0x12
    15e6:	ce 01       	movw	r24, r28
    15e8:	41 96       	adiw	r24, 0x11	; 17
    15ea:	b0 c0       	rjmp	.+352    	; 0x174c <__mulsf3+0x1e8>
    15ec:	2d 84       	ldd	r2, Y+13	; 0x0d
    15ee:	3e 84       	ldd	r3, Y+14	; 0x0e
    15f0:	4f 84       	ldd	r4, Y+15	; 0x0f
    15f2:	58 88       	ldd	r5, Y+16	; 0x10
    15f4:	6d 88       	ldd	r6, Y+21	; 0x15
    15f6:	7e 88       	ldd	r7, Y+22	; 0x16
    15f8:	8f 88       	ldd	r8, Y+23	; 0x17
    15fa:	98 8c       	ldd	r9, Y+24	; 0x18
    15fc:	ee 24       	eor	r14, r14
    15fe:	ff 24       	eor	r15, r15
    1600:	87 01       	movw	r16, r14
    1602:	aa 24       	eor	r10, r10
    1604:	bb 24       	eor	r11, r11
    1606:	65 01       	movw	r12, r10
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	e0 e0       	ldi	r30, 0x00	; 0
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	c1 01       	movw	r24, r2
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	89 2b       	or	r24, r25
    161c:	e9 f0       	breq	.+58     	; 0x1658 <__mulsf3+0xf4>
    161e:	e6 0c       	add	r14, r6
    1620:	f7 1c       	adc	r15, r7
    1622:	08 1d       	adc	r16, r8
    1624:	19 1d       	adc	r17, r9
    1626:	9a 01       	movw	r18, r20
    1628:	ab 01       	movw	r20, r22
    162a:	2a 0d       	add	r18, r10
    162c:	3b 1d       	adc	r19, r11
    162e:	4c 1d       	adc	r20, r12
    1630:	5d 1d       	adc	r21, r13
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e6 14       	cp	r14, r6
    163c:	f7 04       	cpc	r15, r7
    163e:	08 05       	cpc	r16, r8
    1640:	19 05       	cpc	r17, r9
    1642:	20 f4       	brcc	.+8      	; 0x164c <__mulsf3+0xe8>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ba 01       	movw	r22, r20
    164e:	a9 01       	movw	r20, r18
    1650:	48 0f       	add	r20, r24
    1652:	59 1f       	adc	r21, r25
    1654:	6a 1f       	adc	r22, r26
    1656:	7b 1f       	adc	r23, r27
    1658:	aa 0c       	add	r10, r10
    165a:	bb 1c       	adc	r11, r11
    165c:	cc 1c       	adc	r12, r12
    165e:	dd 1c       	adc	r13, r13
    1660:	97 fe       	sbrs	r9, 7
    1662:	08 c0       	rjmp	.+16     	; 0x1674 <__mulsf3+0x110>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a0 e0       	ldi	r26, 0x00	; 0
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	a8 2a       	or	r10, r24
    166e:	b9 2a       	or	r11, r25
    1670:	ca 2a       	or	r12, r26
    1672:	db 2a       	or	r13, r27
    1674:	31 96       	adiw	r30, 0x01	; 1
    1676:	e0 32       	cpi	r30, 0x20	; 32
    1678:	f1 05       	cpc	r31, r1
    167a:	49 f0       	breq	.+18     	; 0x168e <__mulsf3+0x12a>
    167c:	66 0c       	add	r6, r6
    167e:	77 1c       	adc	r7, r7
    1680:	88 1c       	adc	r8, r8
    1682:	99 1c       	adc	r9, r9
    1684:	56 94       	lsr	r5
    1686:	47 94       	ror	r4
    1688:	37 94       	ror	r3
    168a:	27 94       	ror	r2
    168c:	c3 cf       	rjmp	.-122    	; 0x1614 <__mulsf3+0xb0>
    168e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1690:	ea 89       	ldd	r30, Y+18	; 0x12
    1692:	2b 89       	ldd	r18, Y+19	; 0x13
    1694:	3c 89       	ldd	r19, Y+20	; 0x14
    1696:	8b 85       	ldd	r24, Y+11	; 0x0b
    1698:	9c 85       	ldd	r25, Y+12	; 0x0c
    169a:	28 0f       	add	r18, r24
    169c:	39 1f       	adc	r19, r25
    169e:	2e 5f       	subi	r18, 0xFE	; 254
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	17 c0       	rjmp	.+46     	; 0x16d2 <__mulsf3+0x16e>
    16a4:	ca 01       	movw	r24, r20
    16a6:	81 70       	andi	r24, 0x01	; 1
    16a8:	90 70       	andi	r25, 0x00	; 0
    16aa:	89 2b       	or	r24, r25
    16ac:	61 f0       	breq	.+24     	; 0x16c6 <__mulsf3+0x162>
    16ae:	16 95       	lsr	r17
    16b0:	07 95       	ror	r16
    16b2:	f7 94       	ror	r15
    16b4:	e7 94       	ror	r14
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e0       	ldi	r26, 0x00	; 0
    16bc:	b0 e8       	ldi	r27, 0x80	; 128
    16be:	e8 2a       	or	r14, r24
    16c0:	f9 2a       	or	r15, r25
    16c2:	0a 2b       	or	r16, r26
    16c4:	1b 2b       	or	r17, r27
    16c6:	76 95       	lsr	r23
    16c8:	67 95       	ror	r22
    16ca:	57 95       	ror	r21
    16cc:	47 95       	ror	r20
    16ce:	2f 5f       	subi	r18, 0xFF	; 255
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	77 fd       	sbrc	r23, 7
    16d4:	e7 cf       	rjmp	.-50     	; 0x16a4 <__mulsf3+0x140>
    16d6:	0c c0       	rjmp	.+24     	; 0x16f0 <__mulsf3+0x18c>
    16d8:	44 0f       	add	r20, r20
    16da:	55 1f       	adc	r21, r21
    16dc:	66 1f       	adc	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	17 fd       	sbrc	r17, 7
    16e2:	41 60       	ori	r20, 0x01	; 1
    16e4:	ee 0c       	add	r14, r14
    16e6:	ff 1c       	adc	r15, r15
    16e8:	00 1f       	adc	r16, r16
    16ea:	11 1f       	adc	r17, r17
    16ec:	21 50       	subi	r18, 0x01	; 1
    16ee:	30 40       	sbci	r19, 0x00	; 0
    16f0:	40 30       	cpi	r20, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	59 07       	cpc	r21, r25
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	69 07       	cpc	r22, r25
    16fa:	90 e4       	ldi	r25, 0x40	; 64
    16fc:	79 07       	cpc	r23, r25
    16fe:	60 f3       	brcs	.-40     	; 0x16d8 <__mulsf3+0x174>
    1700:	2b 8f       	std	Y+27, r18	; 0x1b
    1702:	3c 8f       	std	Y+28, r19	; 0x1c
    1704:	db 01       	movw	r26, r22
    1706:	ca 01       	movw	r24, r20
    1708:	8f 77       	andi	r24, 0x7F	; 127
    170a:	90 70       	andi	r25, 0x00	; 0
    170c:	a0 70       	andi	r26, 0x00	; 0
    170e:	b0 70       	andi	r27, 0x00	; 0
    1710:	80 34       	cpi	r24, 0x40	; 64
    1712:	91 05       	cpc	r25, r1
    1714:	a1 05       	cpc	r26, r1
    1716:	b1 05       	cpc	r27, r1
    1718:	61 f4       	brne	.+24     	; 0x1732 <__mulsf3+0x1ce>
    171a:	47 fd       	sbrc	r20, 7
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <__mulsf3+0x1ce>
    171e:	e1 14       	cp	r14, r1
    1720:	f1 04       	cpc	r15, r1
    1722:	01 05       	cpc	r16, r1
    1724:	11 05       	cpc	r17, r1
    1726:	29 f0       	breq	.+10     	; 0x1732 <__mulsf3+0x1ce>
    1728:	40 5c       	subi	r20, 0xC0	; 192
    172a:	5f 4f       	sbci	r21, 0xFF	; 255
    172c:	6f 4f       	sbci	r22, 0xFF	; 255
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	40 78       	andi	r20, 0x80	; 128
    1732:	1a 8e       	std	Y+26, r1	; 0x1a
    1734:	fe 17       	cp	r31, r30
    1736:	11 f0       	breq	.+4      	; 0x173c <__mulsf3+0x1d8>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	8a 8f       	std	Y+26, r24	; 0x1a
    173c:	4d 8f       	std	Y+29, r20	; 0x1d
    173e:	5e 8f       	std	Y+30, r21	; 0x1e
    1740:	6f 8f       	std	Y+31, r22	; 0x1f
    1742:	78 a3       	std	Y+32, r23	; 0x20
    1744:	83 e0       	ldi	r24, 0x03	; 3
    1746:	89 8f       	std	Y+25, r24	; 0x19
    1748:	ce 01       	movw	r24, r28
    174a:	49 96       	adiw	r24, 0x19	; 25
    174c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__pack_f>
    1750:	a0 96       	adiw	r28, 0x20	; 32
    1752:	e2 e1       	ldi	r30, 0x12	; 18
    1754:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__epilogue_restores__>

00001758 <__divsf3>:
    1758:	a8 e1       	ldi	r26, 0x18	; 24
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e2 eb       	ldi	r30, 0xB2	; 178
    175e:	fb e0       	ldi	r31, 0x0B	; 11
    1760:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__prologue_saves__+0x10>
    1764:	69 83       	std	Y+1, r22	; 0x01
    1766:	7a 83       	std	Y+2, r23	; 0x02
    1768:	8b 83       	std	Y+3, r24	; 0x03
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	2d 83       	std	Y+5, r18	; 0x05
    176e:	3e 83       	std	Y+6, r19	; 0x06
    1770:	4f 83       	std	Y+7, r20	; 0x07
    1772:	58 87       	std	Y+8, r21	; 0x08
    1774:	b9 e0       	ldi	r27, 0x09	; 9
    1776:	eb 2e       	mov	r14, r27
    1778:	f1 2c       	mov	r15, r1
    177a:	ec 0e       	add	r14, r28
    177c:	fd 1e       	adc	r15, r29
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	b7 01       	movw	r22, r14
    1784:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    1788:	8e 01       	movw	r16, r28
    178a:	0f 5e       	subi	r16, 0xEF	; 239
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	ce 01       	movw	r24, r28
    1790:	05 96       	adiw	r24, 0x05	; 5
    1792:	b8 01       	movw	r22, r16
    1794:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    1798:	29 85       	ldd	r18, Y+9	; 0x09
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <__divsf3+0x48>
    179e:	7e c0       	rjmp	.+252    	; 0x189c <__divsf3+0x144>
    17a0:	39 89       	ldd	r19, Y+17	; 0x11
    17a2:	32 30       	cpi	r19, 0x02	; 2
    17a4:	10 f4       	brcc	.+4      	; 0x17aa <__divsf3+0x52>
    17a6:	b8 01       	movw	r22, r16
    17a8:	7c c0       	rjmp	.+248    	; 0x18a2 <__divsf3+0x14a>
    17aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ac:	9a 89       	ldd	r25, Y+18	; 0x12
    17ae:	89 27       	eor	r24, r25
    17b0:	8a 87       	std	Y+10, r24	; 0x0a
    17b2:	24 30       	cpi	r18, 0x04	; 4
    17b4:	11 f0       	breq	.+4      	; 0x17ba <__divsf3+0x62>
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 f4       	brne	.+12     	; 0x17c6 <__divsf3+0x6e>
    17ba:	23 17       	cp	r18, r19
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <__divsf3+0x68>
    17be:	6e c0       	rjmp	.+220    	; 0x189c <__divsf3+0x144>
    17c0:	62 e6       	ldi	r22, 0x62	; 98
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	6e c0       	rjmp	.+220    	; 0x18a2 <__divsf3+0x14a>
    17c6:	34 30       	cpi	r19, 0x04	; 4
    17c8:	39 f4       	brne	.+14     	; 0x17d8 <__divsf3+0x80>
    17ca:	1d 86       	std	Y+13, r1	; 0x0d
    17cc:	1e 86       	std	Y+14, r1	; 0x0e
    17ce:	1f 86       	std	Y+15, r1	; 0x0f
    17d0:	18 8a       	std	Y+16, r1	; 0x10
    17d2:	1c 86       	std	Y+12, r1	; 0x0c
    17d4:	1b 86       	std	Y+11, r1	; 0x0b
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <__divsf3+0x88>
    17d8:	32 30       	cpi	r19, 0x02	; 2
    17da:	21 f4       	brne	.+8      	; 0x17e4 <__divsf3+0x8c>
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	89 87       	std	Y+9, r24	; 0x09
    17e0:	b7 01       	movw	r22, r14
    17e2:	5f c0       	rjmp	.+190    	; 0x18a2 <__divsf3+0x14a>
    17e4:	2b 85       	ldd	r18, Y+11	; 0x0b
    17e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    17e8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ea:	9c 89       	ldd	r25, Y+20	; 0x14
    17ec:	28 1b       	sub	r18, r24
    17ee:	39 0b       	sbc	r19, r25
    17f0:	3c 87       	std	Y+12, r19	; 0x0c
    17f2:	2b 87       	std	Y+11, r18	; 0x0b
    17f4:	ed 84       	ldd	r14, Y+13	; 0x0d
    17f6:	fe 84       	ldd	r15, Y+14	; 0x0e
    17f8:	0f 85       	ldd	r16, Y+15	; 0x0f
    17fa:	18 89       	ldd	r17, Y+16	; 0x10
    17fc:	ad 88       	ldd	r10, Y+21	; 0x15
    17fe:	be 88       	ldd	r11, Y+22	; 0x16
    1800:	cf 88       	ldd	r12, Y+23	; 0x17
    1802:	d8 8c       	ldd	r13, Y+24	; 0x18
    1804:	ea 14       	cp	r14, r10
    1806:	fb 04       	cpc	r15, r11
    1808:	0c 05       	cpc	r16, r12
    180a:	1d 05       	cpc	r17, r13
    180c:	40 f4       	brcc	.+16     	; 0x181e <__divsf3+0xc6>
    180e:	ee 0c       	add	r14, r14
    1810:	ff 1c       	adc	r15, r15
    1812:	00 1f       	adc	r16, r16
    1814:	11 1f       	adc	r17, r17
    1816:	21 50       	subi	r18, 0x01	; 1
    1818:	30 40       	sbci	r19, 0x00	; 0
    181a:	3c 87       	std	Y+12, r19	; 0x0c
    181c:	2b 87       	std	Y+11, r18	; 0x0b
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e4       	ldi	r27, 0x40	; 64
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	ea 14       	cp	r14, r10
    1834:	fb 04       	cpc	r15, r11
    1836:	0c 05       	cpc	r16, r12
    1838:	1d 05       	cpc	r17, r13
    183a:	40 f0       	brcs	.+16     	; 0x184c <__divsf3+0xf4>
    183c:	28 2b       	or	r18, r24
    183e:	39 2b       	or	r19, r25
    1840:	4a 2b       	or	r20, r26
    1842:	5b 2b       	or	r21, r27
    1844:	ea 18       	sub	r14, r10
    1846:	fb 08       	sbc	r15, r11
    1848:	0c 09       	sbc	r16, r12
    184a:	1d 09       	sbc	r17, r13
    184c:	b6 95       	lsr	r27
    184e:	a7 95       	ror	r26
    1850:	97 95       	ror	r25
    1852:	87 95       	ror	r24
    1854:	ee 0c       	add	r14, r14
    1856:	ff 1c       	adc	r15, r15
    1858:	00 1f       	adc	r16, r16
    185a:	11 1f       	adc	r17, r17
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	6f 31       	cpi	r22, 0x1F	; 31
    1862:	71 05       	cpc	r23, r1
    1864:	31 f7       	brne	.-52     	; 0x1832 <__divsf3+0xda>
    1866:	da 01       	movw	r26, r20
    1868:	c9 01       	movw	r24, r18
    186a:	8f 77       	andi	r24, 0x7F	; 127
    186c:	90 70       	andi	r25, 0x00	; 0
    186e:	a0 70       	andi	r26, 0x00	; 0
    1870:	b0 70       	andi	r27, 0x00	; 0
    1872:	80 34       	cpi	r24, 0x40	; 64
    1874:	91 05       	cpc	r25, r1
    1876:	a1 05       	cpc	r26, r1
    1878:	b1 05       	cpc	r27, r1
    187a:	61 f4       	brne	.+24     	; 0x1894 <__divsf3+0x13c>
    187c:	27 fd       	sbrc	r18, 7
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <__divsf3+0x13c>
    1880:	e1 14       	cp	r14, r1
    1882:	f1 04       	cpc	r15, r1
    1884:	01 05       	cpc	r16, r1
    1886:	11 05       	cpc	r17, r1
    1888:	29 f0       	breq	.+10     	; 0x1894 <__divsf3+0x13c>
    188a:	20 5c       	subi	r18, 0xC0	; 192
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	4f 4f       	sbci	r20, 0xFF	; 255
    1890:	5f 4f       	sbci	r21, 0xFF	; 255
    1892:	20 78       	andi	r18, 0x80	; 128
    1894:	2d 87       	std	Y+13, r18	; 0x0d
    1896:	3e 87       	std	Y+14, r19	; 0x0e
    1898:	4f 87       	std	Y+15, r20	; 0x0f
    189a:	58 8b       	std	Y+16, r21	; 0x10
    189c:	be 01       	movw	r22, r28
    189e:	67 5f       	subi	r22, 0xF7	; 247
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255
    18a2:	cb 01       	movw	r24, r22
    18a4:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__pack_f>
    18a8:	68 96       	adiw	r28, 0x18	; 24
    18aa:	ea e0       	ldi	r30, 0x0A	; 10
    18ac:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__epilogue_restores__+0x10>

000018b0 <__gtsf2>:
    18b0:	a8 e1       	ldi	r26, 0x18	; 24
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ee e5       	ldi	r30, 0x5E	; 94
    18b6:	fc e0       	ldi	r31, 0x0C	; 12
    18b8:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__prologue_saves__+0x18>
    18bc:	69 83       	std	Y+1, r22	; 0x01
    18be:	7a 83       	std	Y+2, r23	; 0x02
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	2d 83       	std	Y+5, r18	; 0x05
    18c6:	3e 83       	std	Y+6, r19	; 0x06
    18c8:	4f 83       	std	Y+7, r20	; 0x07
    18ca:	58 87       	std	Y+8, r21	; 0x08
    18cc:	89 e0       	ldi	r24, 0x09	; 9
    18ce:	e8 2e       	mov	r14, r24
    18d0:	f1 2c       	mov	r15, r1
    18d2:	ec 0e       	add	r14, r28
    18d4:	fd 1e       	adc	r15, r29
    18d6:	ce 01       	movw	r24, r28
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	b7 01       	movw	r22, r14
    18dc:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    18e0:	8e 01       	movw	r16, r28
    18e2:	0f 5e       	subi	r16, 0xEF	; 239
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	ce 01       	movw	r24, r28
    18e8:	05 96       	adiw	r24, 0x05	; 5
    18ea:	b8 01       	movw	r22, r16
    18ec:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    18f0:	89 85       	ldd	r24, Y+9	; 0x09
    18f2:	82 30       	cpi	r24, 0x02	; 2
    18f4:	40 f0       	brcs	.+16     	; 0x1906 <__gtsf2+0x56>
    18f6:	89 89       	ldd	r24, Y+17	; 0x11
    18f8:	82 30       	cpi	r24, 0x02	; 2
    18fa:	28 f0       	brcs	.+10     	; 0x1906 <__gtsf2+0x56>
    18fc:	c7 01       	movw	r24, r14
    18fe:	b8 01       	movw	r22, r16
    1900:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fpcmp_parts_f>
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <__gtsf2+0x58>
    1906:	8f ef       	ldi	r24, 0xFF	; 255
    1908:	68 96       	adiw	r28, 0x18	; 24
    190a:	e6 e0       	ldi	r30, 0x06	; 6
    190c:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__epilogue_restores__+0x18>

00001910 <__gesf2>:
    1910:	a8 e1       	ldi	r26, 0x18	; 24
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ee e8       	ldi	r30, 0x8E	; 142
    1916:	fc e0       	ldi	r31, 0x0C	; 12
    1918:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__prologue_saves__+0x18>
    191c:	69 83       	std	Y+1, r22	; 0x01
    191e:	7a 83       	std	Y+2, r23	; 0x02
    1920:	8b 83       	std	Y+3, r24	; 0x03
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	2d 83       	std	Y+5, r18	; 0x05
    1926:	3e 83       	std	Y+6, r19	; 0x06
    1928:	4f 83       	std	Y+7, r20	; 0x07
    192a:	58 87       	std	Y+8, r21	; 0x08
    192c:	89 e0       	ldi	r24, 0x09	; 9
    192e:	e8 2e       	mov	r14, r24
    1930:	f1 2c       	mov	r15, r1
    1932:	ec 0e       	add	r14, r28
    1934:	fd 1e       	adc	r15, r29
    1936:	ce 01       	movw	r24, r28
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	b7 01       	movw	r22, r14
    193c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    1940:	8e 01       	movw	r16, r28
    1942:	0f 5e       	subi	r16, 0xEF	; 239
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	ce 01       	movw	r24, r28
    1948:	05 96       	adiw	r24, 0x05	; 5
    194a:	b8 01       	movw	r22, r16
    194c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    1950:	89 85       	ldd	r24, Y+9	; 0x09
    1952:	82 30       	cpi	r24, 0x02	; 2
    1954:	40 f0       	brcs	.+16     	; 0x1966 <__gesf2+0x56>
    1956:	89 89       	ldd	r24, Y+17	; 0x11
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	28 f0       	brcs	.+10     	; 0x1966 <__gesf2+0x56>
    195c:	c7 01       	movw	r24, r14
    195e:	b8 01       	movw	r22, r16
    1960:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fpcmp_parts_f>
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <__gesf2+0x58>
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	68 96       	adiw	r28, 0x18	; 24
    196a:	e6 e0       	ldi	r30, 0x06	; 6
    196c:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__epilogue_restores__+0x18>

00001970 <__fixsfsi>:
    1970:	ac e0       	ldi	r26, 0x0C	; 12
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ee eb       	ldi	r30, 0xBE	; 190
    1976:	fc e0       	ldi	r31, 0x0C	; 12
    1978:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__prologue_saves__+0x20>
    197c:	69 83       	std	Y+1, r22	; 0x01
    197e:	7a 83       	std	Y+2, r23	; 0x02
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	be 01       	movw	r22, r28
    198a:	6b 5f       	subi	r22, 0xFB	; 251
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__unpack_f>
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	61 f1       	breq	.+88     	; 0x19f0 <__fixsfsi+0x80>
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	50 f1       	brcs	.+84     	; 0x19f0 <__fixsfsi+0x80>
    199c:	84 30       	cpi	r24, 0x04	; 4
    199e:	21 f4       	brne	.+8      	; 0x19a8 <__fixsfsi+0x38>
    19a0:	8e 81       	ldd	r24, Y+6	; 0x06
    19a2:	88 23       	and	r24, r24
    19a4:	51 f1       	breq	.+84     	; 0x19fa <__fixsfsi+0x8a>
    19a6:	2e c0       	rjmp	.+92     	; 0x1a04 <__fixsfsi+0x94>
    19a8:	2f 81       	ldd	r18, Y+7	; 0x07
    19aa:	38 85       	ldd	r19, Y+8	; 0x08
    19ac:	37 fd       	sbrc	r19, 7
    19ae:	20 c0       	rjmp	.+64     	; 0x19f0 <__fixsfsi+0x80>
    19b0:	6e 81       	ldd	r22, Y+6	; 0x06
    19b2:	2f 31       	cpi	r18, 0x1F	; 31
    19b4:	31 05       	cpc	r19, r1
    19b6:	1c f0       	brlt	.+6      	; 0x19be <__fixsfsi+0x4e>
    19b8:	66 23       	and	r22, r22
    19ba:	f9 f0       	breq	.+62     	; 0x19fa <__fixsfsi+0x8a>
    19bc:	23 c0       	rjmp	.+70     	; 0x1a04 <__fixsfsi+0x94>
    19be:	8e e1       	ldi	r24, 0x1E	; 30
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	82 1b       	sub	r24, r18
    19c4:	93 0b       	sbc	r25, r19
    19c6:	29 85       	ldd	r18, Y+9	; 0x09
    19c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    19ca:	4b 85       	ldd	r20, Y+11	; 0x0b
    19cc:	5c 85       	ldd	r21, Y+12	; 0x0c
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <__fixsfsi+0x68>
    19d0:	56 95       	lsr	r21
    19d2:	47 95       	ror	r20
    19d4:	37 95       	ror	r19
    19d6:	27 95       	ror	r18
    19d8:	8a 95       	dec	r24
    19da:	d2 f7       	brpl	.-12     	; 0x19d0 <__fixsfsi+0x60>
    19dc:	66 23       	and	r22, r22
    19de:	b1 f0       	breq	.+44     	; 0x1a0c <__fixsfsi+0x9c>
    19e0:	50 95       	com	r21
    19e2:	40 95       	com	r20
    19e4:	30 95       	com	r19
    19e6:	21 95       	neg	r18
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	4f 4f       	sbci	r20, 0xFF	; 255
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	0e c0       	rjmp	.+28     	; 0x1a0c <__fixsfsi+0x9c>
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <__fixsfsi+0x9c>
    19fa:	2f ef       	ldi	r18, 0xFF	; 255
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f ef       	ldi	r20, 0xFF	; 255
    1a00:	5f e7       	ldi	r21, 0x7F	; 127
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <__fixsfsi+0x9c>
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	50 e8       	ldi	r21, 0x80	; 128
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	ca 01       	movw	r24, r20
    1a10:	2c 96       	adiw	r28, 0x0c	; 12
    1a12:	e2 e0       	ldi	r30, 0x02	; 2
    1a14:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__epilogue_restores__+0x20>

00001a18 <__floatunsisf>:
    1a18:	a8 e0       	ldi	r26, 0x08	; 8
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e2 e1       	ldi	r30, 0x12	; 18
    1a1e:	fd e0       	ldi	r31, 0x0D	; 13
    1a20:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__prologue_saves__+0x10>
    1a24:	7b 01       	movw	r14, r22
    1a26:	8c 01       	movw	r16, r24
    1a28:	61 15       	cp	r22, r1
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	81 05       	cpc	r24, r1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <__floatunsisf+0x20>
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	60 c0       	rjmp	.+192    	; 0x1af8 <__floatunsisf+0xe0>
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	8e e1       	ldi	r24, 0x1E	; 30
    1a3e:	c8 2e       	mov	r12, r24
    1a40:	d1 2c       	mov	r13, r1
    1a42:	dc 82       	std	Y+4, r13	; 0x04
    1a44:	cb 82       	std	Y+3, r12	; 0x03
    1a46:	ed 82       	std	Y+5, r14	; 0x05
    1a48:	fe 82       	std	Y+6, r15	; 0x06
    1a4a:	0f 83       	std	Y+7, r16	; 0x07
    1a4c:	18 87       	std	Y+8, r17	; 0x08
    1a4e:	c8 01       	movw	r24, r16
    1a50:	b7 01       	movw	r22, r14
    1a52:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__clzsi2>
    1a56:	fc 01       	movw	r30, r24
    1a58:	31 97       	sbiw	r30, 0x01	; 1
    1a5a:	f7 ff       	sbrs	r31, 7
    1a5c:	3b c0       	rjmp	.+118    	; 0x1ad4 <__floatunsisf+0xbc>
    1a5e:	22 27       	eor	r18, r18
    1a60:	33 27       	eor	r19, r19
    1a62:	2e 1b       	sub	r18, r30
    1a64:	3f 0b       	sbc	r19, r31
    1a66:	57 01       	movw	r10, r14
    1a68:	68 01       	movw	r12, r16
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	04 c0       	rjmp	.+8      	; 0x1a76 <__floatunsisf+0x5e>
    1a6e:	d6 94       	lsr	r13
    1a70:	c7 94       	ror	r12
    1a72:	b7 94       	ror	r11
    1a74:	a7 94       	ror	r10
    1a76:	0a 94       	dec	r0
    1a78:	d2 f7       	brpl	.-12     	; 0x1a6e <__floatunsisf+0x56>
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a0 e0       	ldi	r26, 0x00	; 0
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <__floatunsisf+0x7c>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	aa 1f       	adc	r26, r26
    1a92:	bb 1f       	adc	r27, r27
    1a94:	2a 95       	dec	r18
    1a96:	d2 f7       	brpl	.-12     	; 0x1a8c <__floatunsisf+0x74>
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	a1 09       	sbc	r26, r1
    1a9c:	b1 09       	sbc	r27, r1
    1a9e:	8e 21       	and	r24, r14
    1aa0:	9f 21       	and	r25, r15
    1aa2:	a0 23       	and	r26, r16
    1aa4:	b1 23       	and	r27, r17
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	a1 05       	cpc	r26, r1
    1aaa:	b1 05       	cpc	r27, r1
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <__floatunsisf+0x9e>
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	4a 29       	or	r20, r10
    1ab8:	5b 29       	or	r21, r11
    1aba:	6c 29       	or	r22, r12
    1abc:	7d 29       	or	r23, r13
    1abe:	4d 83       	std	Y+5, r20	; 0x05
    1ac0:	5e 83       	std	Y+6, r21	; 0x06
    1ac2:	6f 83       	std	Y+7, r22	; 0x07
    1ac4:	78 87       	std	Y+8, r23	; 0x08
    1ac6:	8e e1       	ldi	r24, 0x1E	; 30
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	8e 1b       	sub	r24, r30
    1acc:	9f 0b       	sbc	r25, r31
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
    1ad2:	12 c0       	rjmp	.+36     	; 0x1af8 <__floatunsisf+0xe0>
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	81 f0       	breq	.+32     	; 0x1af8 <__floatunsisf+0xe0>
    1ad8:	0e 2e       	mov	r0, r30
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <__floatunsisf+0xcc>
    1adc:	ee 0c       	add	r14, r14
    1ade:	ff 1c       	adc	r15, r15
    1ae0:	00 1f       	adc	r16, r16
    1ae2:	11 1f       	adc	r17, r17
    1ae4:	0a 94       	dec	r0
    1ae6:	d2 f7       	brpl	.-12     	; 0x1adc <__floatunsisf+0xc4>
    1ae8:	ed 82       	std	Y+5, r14	; 0x05
    1aea:	fe 82       	std	Y+6, r15	; 0x06
    1aec:	0f 83       	std	Y+7, r16	; 0x07
    1aee:	18 87       	std	Y+8, r17	; 0x08
    1af0:	ce 1a       	sub	r12, r30
    1af2:	df 0a       	sbc	r13, r31
    1af4:	dc 82       	std	Y+4, r13	; 0x04
    1af6:	cb 82       	std	Y+3, r12	; 0x03
    1af8:	1a 82       	std	Y+2, r1	; 0x02
    1afa:	ce 01       	movw	r24, r28
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__pack_f>
    1b02:	28 96       	adiw	r28, 0x08	; 8
    1b04:	ea e0       	ldi	r30, 0x0A	; 10
    1b06:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__epilogue_restores__+0x10>

00001b0a <__clzsi2>:
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	7b 01       	movw	r14, r22
    1b14:	8c 01       	movw	r16, r24
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	e8 16       	cp	r14, r24
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	f8 06       	cpc	r15, r24
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	08 07       	cpc	r16, r24
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	18 07       	cpc	r17, r24
    1b26:	88 f4       	brcc	.+34     	; 0x1b4a <__clzsi2+0x40>
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	e8 16       	cp	r14, r24
    1b2c:	f1 04       	cpc	r15, r1
    1b2e:	01 05       	cpc	r16, r1
    1b30:	11 05       	cpc	r17, r1
    1b32:	31 f0       	breq	.+12     	; 0x1b40 <__clzsi2+0x36>
    1b34:	28 f0       	brcs	.+10     	; 0x1b40 <__clzsi2+0x36>
    1b36:	88 e0       	ldi	r24, 0x08	; 8
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	17 c0       	rjmp	.+46     	; 0x1b6e <__clzsi2+0x64>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	12 c0       	rjmp	.+36     	; 0x1b6e <__clzsi2+0x64>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	e8 16       	cp	r14, r24
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	f8 06       	cpc	r15, r24
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	08 07       	cpc	r16, r24
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	18 07       	cpc	r17, r24
    1b5a:	28 f0       	brcs	.+10     	; 0x1b66 <__clzsi2+0x5c>
    1b5c:	88 e1       	ldi	r24, 0x18	; 24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <__clzsi2+0x64>
    1b66:	80 e1       	ldi	r24, 0x10	; 16
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	20 e2       	ldi	r18, 0x20	; 32
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	28 1b       	sub	r18, r24
    1b78:	39 0b       	sbc	r19, r25
    1b7a:	4a 0b       	sbc	r20, r26
    1b7c:	5b 0b       	sbc	r21, r27
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <__clzsi2+0x7e>
    1b80:	16 95       	lsr	r17
    1b82:	07 95       	ror	r16
    1b84:	f7 94       	ror	r15
    1b86:	e7 94       	ror	r14
    1b88:	8a 95       	dec	r24
    1b8a:	d2 f7       	brpl	.-12     	; 0x1b80 <__clzsi2+0x76>
    1b8c:	f7 01       	movw	r30, r14
    1b8e:	e6 59       	subi	r30, 0x96	; 150
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	28 1b       	sub	r18, r24
    1b96:	31 09       	sbc	r19, r1
    1b98:	41 09       	sbc	r20, r1
    1b9a:	51 09       	sbc	r21, r1
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	08 95       	ret

00001ba8 <__pack_f>:
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	e4 80       	ldd	r14, Z+4	; 0x04
    1bb6:	f5 80       	ldd	r15, Z+5	; 0x05
    1bb8:	06 81       	ldd	r16, Z+6	; 0x06
    1bba:	17 81       	ldd	r17, Z+7	; 0x07
    1bbc:	d1 80       	ldd	r13, Z+1	; 0x01
    1bbe:	80 81       	ld	r24, Z
    1bc0:	82 30       	cpi	r24, 0x02	; 2
    1bc2:	48 f4       	brcc	.+18     	; 0x1bd6 <__pack_f+0x2e>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e1       	ldi	r26, 0x10	; 16
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e8 2a       	or	r14, r24
    1bce:	f9 2a       	or	r15, r25
    1bd0:	0a 2b       	or	r16, r26
    1bd2:	1b 2b       	or	r17, r27
    1bd4:	a5 c0       	rjmp	.+330    	; 0x1d20 <__pack_f+0x178>
    1bd6:	84 30       	cpi	r24, 0x04	; 4
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <__pack_f+0x34>
    1bda:	9f c0       	rjmp	.+318    	; 0x1d1a <__pack_f+0x172>
    1bdc:	82 30       	cpi	r24, 0x02	; 2
    1bde:	21 f4       	brne	.+8      	; 0x1be8 <__pack_f+0x40>
    1be0:	ee 24       	eor	r14, r14
    1be2:	ff 24       	eor	r15, r15
    1be4:	87 01       	movw	r16, r14
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <__pack_f+0x4a>
    1be8:	e1 14       	cp	r14, r1
    1bea:	f1 04       	cpc	r15, r1
    1bec:	01 05       	cpc	r16, r1
    1bee:	11 05       	cpc	r17, r1
    1bf0:	19 f4       	brne	.+6      	; 0x1bf8 <__pack_f+0x50>
    1bf2:	e0 e0       	ldi	r30, 0x00	; 0
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	96 c0       	rjmp	.+300    	; 0x1d24 <__pack_f+0x17c>
    1bf8:	62 81       	ldd	r22, Z+2	; 0x02
    1bfa:	73 81       	ldd	r23, Z+3	; 0x03
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	62 38       	cpi	r22, 0x82	; 130
    1c00:	79 07       	cpc	r23, r25
    1c02:	0c f0       	brlt	.+2      	; 0x1c06 <__pack_f+0x5e>
    1c04:	5b c0       	rjmp	.+182    	; 0x1cbc <__pack_f+0x114>
    1c06:	22 e8       	ldi	r18, 0x82	; 130
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	26 1b       	sub	r18, r22
    1c0c:	37 0b       	sbc	r19, r23
    1c0e:	2a 31       	cpi	r18, 0x1A	; 26
    1c10:	31 05       	cpc	r19, r1
    1c12:	2c f0       	brlt	.+10     	; 0x1c1e <__pack_f+0x76>
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	2a c0       	rjmp	.+84     	; 0x1c72 <__pack_f+0xca>
    1c1e:	b8 01       	movw	r22, r16
    1c20:	a7 01       	movw	r20, r14
    1c22:	02 2e       	mov	r0, r18
    1c24:	04 c0       	rjmp	.+8      	; 0x1c2e <__pack_f+0x86>
    1c26:	76 95       	lsr	r23
    1c28:	67 95       	ror	r22
    1c2a:	57 95       	ror	r21
    1c2c:	47 95       	ror	r20
    1c2e:	0a 94       	dec	r0
    1c30:	d2 f7       	brpl	.-12     	; 0x1c26 <__pack_f+0x7e>
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <__pack_f+0x9c>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	aa 1f       	adc	r26, r26
    1c42:	bb 1f       	adc	r27, r27
    1c44:	2a 95       	dec	r18
    1c46:	d2 f7       	brpl	.-12     	; 0x1c3c <__pack_f+0x94>
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	a1 09       	sbc	r26, r1
    1c4c:	b1 09       	sbc	r27, r1
    1c4e:	8e 21       	and	r24, r14
    1c50:	9f 21       	and	r25, r15
    1c52:	a0 23       	and	r26, r16
    1c54:	b1 23       	and	r27, r17
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	a1 05       	cpc	r26, r1
    1c5a:	b1 05       	cpc	r27, r1
    1c5c:	21 f0       	breq	.+8      	; 0x1c66 <__pack_f+0xbe>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e0       	ldi	r26, 0x00	; 0
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	9a 01       	movw	r18, r20
    1c68:	ab 01       	movw	r20, r22
    1c6a:	28 2b       	or	r18, r24
    1c6c:	39 2b       	or	r19, r25
    1c6e:	4a 2b       	or	r20, r26
    1c70:	5b 2b       	or	r21, r27
    1c72:	da 01       	movw	r26, r20
    1c74:	c9 01       	movw	r24, r18
    1c76:	8f 77       	andi	r24, 0x7F	; 127
    1c78:	90 70       	andi	r25, 0x00	; 0
    1c7a:	a0 70       	andi	r26, 0x00	; 0
    1c7c:	b0 70       	andi	r27, 0x00	; 0
    1c7e:	80 34       	cpi	r24, 0x40	; 64
    1c80:	91 05       	cpc	r25, r1
    1c82:	a1 05       	cpc	r26, r1
    1c84:	b1 05       	cpc	r27, r1
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <__pack_f+0xee>
    1c88:	27 ff       	sbrs	r18, 7
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <__pack_f+0xf6>
    1c8c:	20 5c       	subi	r18, 0xC0	; 192
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	4f 4f       	sbci	r20, 0xFF	; 255
    1c92:	5f 4f       	sbci	r21, 0xFF	; 255
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <__pack_f+0xf6>
    1c96:	21 5c       	subi	r18, 0xC1	; 193
    1c98:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9e:	e0 e0       	ldi	r30, 0x00	; 0
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	20 30       	cpi	r18, 0x00	; 0
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	3a 07       	cpc	r19, r26
    1ca8:	a0 e0       	ldi	r26, 0x00	; 0
    1caa:	4a 07       	cpc	r20, r26
    1cac:	a0 e4       	ldi	r26, 0x40	; 64
    1cae:	5a 07       	cpc	r21, r26
    1cb0:	10 f0       	brcs	.+4      	; 0x1cb6 <__pack_f+0x10e>
    1cb2:	e1 e0       	ldi	r30, 0x01	; 1
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	79 01       	movw	r14, r18
    1cb8:	8a 01       	movw	r16, r20
    1cba:	27 c0       	rjmp	.+78     	; 0x1d0a <__pack_f+0x162>
    1cbc:	60 38       	cpi	r22, 0x80	; 128
    1cbe:	71 05       	cpc	r23, r1
    1cc0:	64 f5       	brge	.+88     	; 0x1d1a <__pack_f+0x172>
    1cc2:	fb 01       	movw	r30, r22
    1cc4:	e1 58       	subi	r30, 0x81	; 129
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	d8 01       	movw	r26, r16
    1cca:	c7 01       	movw	r24, r14
    1ccc:	8f 77       	andi	r24, 0x7F	; 127
    1cce:	90 70       	andi	r25, 0x00	; 0
    1cd0:	a0 70       	andi	r26, 0x00	; 0
    1cd2:	b0 70       	andi	r27, 0x00	; 0
    1cd4:	80 34       	cpi	r24, 0x40	; 64
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	a1 05       	cpc	r26, r1
    1cda:	b1 05       	cpc	r27, r1
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <__pack_f+0x144>
    1cde:	e7 fe       	sbrs	r14, 7
    1ce0:	0d c0       	rjmp	.+26     	; 0x1cfc <__pack_f+0x154>
    1ce2:	80 e4       	ldi	r24, 0x40	; 64
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e0       	ldi	r26, 0x00	; 0
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <__pack_f+0x14c>
    1cec:	8f e3       	ldi	r24, 0x3F	; 63
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e0       	ldi	r26, 0x00	; 0
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e8 0e       	add	r14, r24
    1cf6:	f9 1e       	adc	r15, r25
    1cf8:	0a 1f       	adc	r16, r26
    1cfa:	1b 1f       	adc	r17, r27
    1cfc:	17 ff       	sbrs	r17, 7
    1cfe:	05 c0       	rjmp	.+10     	; 0x1d0a <__pack_f+0x162>
    1d00:	16 95       	lsr	r17
    1d02:	07 95       	ror	r16
    1d04:	f7 94       	ror	r15
    1d06:	e7 94       	ror	r14
    1d08:	31 96       	adiw	r30, 0x01	; 1
    1d0a:	87 e0       	ldi	r24, 0x07	; 7
    1d0c:	16 95       	lsr	r17
    1d0e:	07 95       	ror	r16
    1d10:	f7 94       	ror	r15
    1d12:	e7 94       	ror	r14
    1d14:	8a 95       	dec	r24
    1d16:	d1 f7       	brne	.-12     	; 0x1d0c <__pack_f+0x164>
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <__pack_f+0x17c>
    1d1a:	ee 24       	eor	r14, r14
    1d1c:	ff 24       	eor	r15, r15
    1d1e:	87 01       	movw	r16, r14
    1d20:	ef ef       	ldi	r30, 0xFF	; 255
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	6e 2f       	mov	r22, r30
    1d26:	67 95       	ror	r22
    1d28:	66 27       	eor	r22, r22
    1d2a:	67 95       	ror	r22
    1d2c:	90 2f       	mov	r25, r16
    1d2e:	9f 77       	andi	r25, 0x7F	; 127
    1d30:	d7 94       	ror	r13
    1d32:	dd 24       	eor	r13, r13
    1d34:	d7 94       	ror	r13
    1d36:	8e 2f       	mov	r24, r30
    1d38:	86 95       	lsr	r24
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	46 2b       	or	r20, r22
    1d3e:	58 2f       	mov	r21, r24
    1d40:	5d 29       	or	r21, r13
    1d42:	b7 01       	movw	r22, r14
    1d44:	ca 01       	movw	r24, r20
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	08 95       	ret

00001d52 <__unpack_f>:
    1d52:	fc 01       	movw	r30, r24
    1d54:	db 01       	movw	r26, r22
    1d56:	40 81       	ld	r20, Z
    1d58:	51 81       	ldd	r21, Z+1	; 0x01
    1d5a:	22 81       	ldd	r18, Z+2	; 0x02
    1d5c:	62 2f       	mov	r22, r18
    1d5e:	6f 77       	andi	r22, 0x7F	; 127
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	22 1f       	adc	r18, r18
    1d64:	22 27       	eor	r18, r18
    1d66:	22 1f       	adc	r18, r18
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	89 2f       	mov	r24, r25
    1d6c:	88 0f       	add	r24, r24
    1d6e:	82 2b       	or	r24, r18
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	99 1f       	adc	r25, r25
    1d76:	99 27       	eor	r25, r25
    1d78:	99 1f       	adc	r25, r25
    1d7a:	11 96       	adiw	r26, 0x01	; 1
    1d7c:	9c 93       	st	X, r25
    1d7e:	11 97       	sbiw	r26, 0x01	; 1
    1d80:	21 15       	cp	r18, r1
    1d82:	31 05       	cpc	r19, r1
    1d84:	a9 f5       	brne	.+106    	; 0x1df0 <__unpack_f+0x9e>
    1d86:	41 15       	cp	r20, r1
    1d88:	51 05       	cpc	r21, r1
    1d8a:	61 05       	cpc	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <__unpack_f+0x42>
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	37 c0       	rjmp	.+110    	; 0x1e02 <__unpack_f+0xb0>
    1d94:	82 e8       	ldi	r24, 0x82	; 130
    1d96:	9f ef       	ldi	r25, 0xFF	; 255
    1d98:	13 96       	adiw	r26, 0x03	; 3
    1d9a:	9c 93       	st	X, r25
    1d9c:	8e 93       	st	-X, r24
    1d9e:	12 97       	sbiw	r26, 0x02	; 2
    1da0:	9a 01       	movw	r18, r20
    1da2:	ab 01       	movw	r20, r22
    1da4:	67 e0       	ldi	r22, 0x07	; 7
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	6a 95       	dec	r22
    1db0:	d1 f7       	brne	.-12     	; 0x1da6 <__unpack_f+0x54>
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	8c 93       	st	X, r24
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <__unpack_f+0x80>
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	44 1f       	adc	r20, r20
    1dbe:	55 1f       	adc	r21, r21
    1dc0:	12 96       	adiw	r26, 0x02	; 2
    1dc2:	8d 91       	ld	r24, X+
    1dc4:	9c 91       	ld	r25, X
    1dc6:	13 97       	sbiw	r26, 0x03	; 3
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	13 96       	adiw	r26, 0x03	; 3
    1dcc:	9c 93       	st	X, r25
    1dce:	8e 93       	st	-X, r24
    1dd0:	12 97       	sbiw	r26, 0x02	; 2
    1dd2:	20 30       	cpi	r18, 0x00	; 0
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	38 07       	cpc	r19, r24
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	48 07       	cpc	r20, r24
    1ddc:	80 e4       	ldi	r24, 0x40	; 64
    1dde:	58 07       	cpc	r21, r24
    1de0:	58 f3       	brcs	.-42     	; 0x1db8 <__unpack_f+0x66>
    1de2:	14 96       	adiw	r26, 0x04	; 4
    1de4:	2d 93       	st	X+, r18
    1de6:	3d 93       	st	X+, r19
    1de8:	4d 93       	st	X+, r20
    1dea:	5c 93       	st	X, r21
    1dec:	17 97       	sbiw	r26, 0x07	; 7
    1dee:	08 95       	ret
    1df0:	2f 3f       	cpi	r18, 0xFF	; 255
    1df2:	31 05       	cpc	r19, r1
    1df4:	79 f4       	brne	.+30     	; 0x1e14 <__unpack_f+0xc2>
    1df6:	41 15       	cp	r20, r1
    1df8:	51 05       	cpc	r21, r1
    1dfa:	61 05       	cpc	r22, r1
    1dfc:	71 05       	cpc	r23, r1
    1dfe:	19 f4       	brne	.+6      	; 0x1e06 <__unpack_f+0xb4>
    1e00:	84 e0       	ldi	r24, 0x04	; 4
    1e02:	8c 93       	st	X, r24
    1e04:	08 95       	ret
    1e06:	64 ff       	sbrs	r22, 4
    1e08:	03 c0       	rjmp	.+6      	; 0x1e10 <__unpack_f+0xbe>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	8c 93       	st	X, r24
    1e0e:	12 c0       	rjmp	.+36     	; 0x1e34 <__unpack_f+0xe2>
    1e10:	1c 92       	st	X, r1
    1e12:	10 c0       	rjmp	.+32     	; 0x1e34 <__unpack_f+0xe2>
    1e14:	2f 57       	subi	r18, 0x7F	; 127
    1e16:	30 40       	sbci	r19, 0x00	; 0
    1e18:	13 96       	adiw	r26, 0x03	; 3
    1e1a:	3c 93       	st	X, r19
    1e1c:	2e 93       	st	-X, r18
    1e1e:	12 97       	sbiw	r26, 0x02	; 2
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	8c 93       	st	X, r24
    1e24:	87 e0       	ldi	r24, 0x07	; 7
    1e26:	44 0f       	add	r20, r20
    1e28:	55 1f       	adc	r21, r21
    1e2a:	66 1f       	adc	r22, r22
    1e2c:	77 1f       	adc	r23, r23
    1e2e:	8a 95       	dec	r24
    1e30:	d1 f7       	brne	.-12     	; 0x1e26 <__unpack_f+0xd4>
    1e32:	70 64       	ori	r23, 0x40	; 64
    1e34:	14 96       	adiw	r26, 0x04	; 4
    1e36:	4d 93       	st	X+, r20
    1e38:	5d 93       	st	X+, r21
    1e3a:	6d 93       	st	X+, r22
    1e3c:	7c 93       	st	X, r23
    1e3e:	17 97       	sbiw	r26, 0x07	; 7
    1e40:	08 95       	ret

00001e42 <__fpcmp_parts_f>:
    1e42:	1f 93       	push	r17
    1e44:	dc 01       	movw	r26, r24
    1e46:	fb 01       	movw	r30, r22
    1e48:	9c 91       	ld	r25, X
    1e4a:	92 30       	cpi	r25, 0x02	; 2
    1e4c:	08 f4       	brcc	.+2      	; 0x1e50 <__fpcmp_parts_f+0xe>
    1e4e:	47 c0       	rjmp	.+142    	; 0x1ede <__fpcmp_parts_f+0x9c>
    1e50:	80 81       	ld	r24, Z
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	08 f4       	brcc	.+2      	; 0x1e58 <__fpcmp_parts_f+0x16>
    1e56:	43 c0       	rjmp	.+134    	; 0x1ede <__fpcmp_parts_f+0x9c>
    1e58:	94 30       	cpi	r25, 0x04	; 4
    1e5a:	51 f4       	brne	.+20     	; 0x1e70 <__fpcmp_parts_f+0x2e>
    1e5c:	11 96       	adiw	r26, 0x01	; 1
    1e5e:	1c 91       	ld	r17, X
    1e60:	84 30       	cpi	r24, 0x04	; 4
    1e62:	99 f5       	brne	.+102    	; 0x1eca <__fpcmp_parts_f+0x88>
    1e64:	81 81       	ldd	r24, Z+1	; 0x01
    1e66:	68 2f       	mov	r22, r24
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	61 1b       	sub	r22, r17
    1e6c:	71 09       	sbc	r23, r1
    1e6e:	3f c0       	rjmp	.+126    	; 0x1eee <__fpcmp_parts_f+0xac>
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	21 f0       	breq	.+8      	; 0x1e7c <__fpcmp_parts_f+0x3a>
    1e74:	92 30       	cpi	r25, 0x02	; 2
    1e76:	31 f4       	brne	.+12     	; 0x1e84 <__fpcmp_parts_f+0x42>
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	b9 f1       	breq	.+110    	; 0x1eea <__fpcmp_parts_f+0xa8>
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	88 23       	and	r24, r24
    1e80:	89 f1       	breq	.+98     	; 0x1ee4 <__fpcmp_parts_f+0xa2>
    1e82:	2d c0       	rjmp	.+90     	; 0x1ede <__fpcmp_parts_f+0x9c>
    1e84:	11 96       	adiw	r26, 0x01	; 1
    1e86:	1c 91       	ld	r17, X
    1e88:	11 97       	sbiw	r26, 0x01	; 1
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	f1 f0       	breq	.+60     	; 0x1eca <__fpcmp_parts_f+0x88>
    1e8e:	81 81       	ldd	r24, Z+1	; 0x01
    1e90:	18 17       	cp	r17, r24
    1e92:	d9 f4       	brne	.+54     	; 0x1eca <__fpcmp_parts_f+0x88>
    1e94:	12 96       	adiw	r26, 0x02	; 2
    1e96:	2d 91       	ld	r18, X+
    1e98:	3c 91       	ld	r19, X
    1e9a:	13 97       	sbiw	r26, 0x03	; 3
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	82 17       	cp	r24, r18
    1ea2:	93 07       	cpc	r25, r19
    1ea4:	94 f0       	brlt	.+36     	; 0x1eca <__fpcmp_parts_f+0x88>
    1ea6:	28 17       	cp	r18, r24
    1ea8:	39 07       	cpc	r19, r25
    1eaa:	bc f0       	brlt	.+46     	; 0x1eda <__fpcmp_parts_f+0x98>
    1eac:	14 96       	adiw	r26, 0x04	; 4
    1eae:	8d 91       	ld	r24, X+
    1eb0:	9d 91       	ld	r25, X+
    1eb2:	0d 90       	ld	r0, X+
    1eb4:	bc 91       	ld	r27, X
    1eb6:	a0 2d       	mov	r26, r0
    1eb8:	24 81       	ldd	r18, Z+4	; 0x04
    1eba:	35 81       	ldd	r19, Z+5	; 0x05
    1ebc:	46 81       	ldd	r20, Z+6	; 0x06
    1ebe:	57 81       	ldd	r21, Z+7	; 0x07
    1ec0:	28 17       	cp	r18, r24
    1ec2:	39 07       	cpc	r19, r25
    1ec4:	4a 07       	cpc	r20, r26
    1ec6:	5b 07       	cpc	r21, r27
    1ec8:	18 f4       	brcc	.+6      	; 0x1ed0 <__fpcmp_parts_f+0x8e>
    1eca:	11 23       	and	r17, r17
    1ecc:	41 f0       	breq	.+16     	; 0x1ede <__fpcmp_parts_f+0x9c>
    1ece:	0a c0       	rjmp	.+20     	; 0x1ee4 <__fpcmp_parts_f+0xa2>
    1ed0:	82 17       	cp	r24, r18
    1ed2:	93 07       	cpc	r25, r19
    1ed4:	a4 07       	cpc	r26, r20
    1ed6:	b5 07       	cpc	r27, r21
    1ed8:	40 f4       	brcc	.+16     	; 0x1eea <__fpcmp_parts_f+0xa8>
    1eda:	11 23       	and	r17, r17
    1edc:	19 f0       	breq	.+6      	; 0x1ee4 <__fpcmp_parts_f+0xa2>
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <__fpcmp_parts_f+0xac>
    1ee4:	6f ef       	ldi	r22, 0xFF	; 255
    1ee6:	7f ef       	ldi	r23, 0xFF	; 255
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <__fpcmp_parts_f+0xac>
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	cb 01       	movw	r24, r22
    1ef0:	1f 91       	pop	r17
    1ef2:	08 95       	ret

00001ef4 <__prologue_saves__>:
    1ef4:	2f 92       	push	r2
    1ef6:	3f 92       	push	r3
    1ef8:	4f 92       	push	r4
    1efa:	5f 92       	push	r5
    1efc:	6f 92       	push	r6
    1efe:	7f 92       	push	r7
    1f00:	8f 92       	push	r8
    1f02:	9f 92       	push	r9
    1f04:	af 92       	push	r10
    1f06:	bf 92       	push	r11
    1f08:	cf 92       	push	r12
    1f0a:	df 92       	push	r13
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	ca 1b       	sub	r28, r26
    1f1e:	db 0b       	sbc	r29, r27
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	09 94       	ijmp

00001f2c <__epilogue_restores__>:
    1f2c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f2e:	39 88       	ldd	r3, Y+17	; 0x11
    1f30:	48 88       	ldd	r4, Y+16	; 0x10
    1f32:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f34:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f36:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f38:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f3e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f40:	c8 84       	ldd	r12, Y+8	; 0x08
    1f42:	df 80       	ldd	r13, Y+7	; 0x07
    1f44:	ee 80       	ldd	r14, Y+6	; 0x06
    1f46:	fd 80       	ldd	r15, Y+5	; 0x05
    1f48:	0c 81       	ldd	r16, Y+4	; 0x04
    1f4a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f4c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f4e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f50:	ce 0f       	add	r28, r30
    1f52:	d1 1d       	adc	r29, r1
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	ed 01       	movw	r28, r26
    1f60:	08 95       	ret

00001f62 <calloc>:
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	68 9f       	mul	r22, r24
    1f6c:	80 01       	movw	r16, r0
    1f6e:	69 9f       	mul	r22, r25
    1f70:	10 0d       	add	r17, r0
    1f72:	78 9f       	mul	r23, r24
    1f74:	10 0d       	add	r17, r0
    1f76:	11 24       	eor	r1, r1
    1f78:	c8 01       	movw	r24, r16
    1f7a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <malloc>
    1f7e:	ec 01       	movw	r28, r24
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	29 f0       	breq	.+10     	; 0x1f8e <calloc+0x2c>
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	a8 01       	movw	r20, r16
    1f8a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <memset>
    1f8e:	ce 01       	movw	r24, r28
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	08 95       	ret

00001f9a <malloc>:
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	10 f4       	brcc	.+4      	; 0x1faa <malloc+0x10>
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	a0 91 cf 01 	lds	r26, 0x01CF
    1fae:	b0 91 d0 01 	lds	r27, 0x01D0
    1fb2:	ed 01       	movw	r28, r26
    1fb4:	e0 e0       	ldi	r30, 0x00	; 0
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	21 c0       	rjmp	.+66     	; 0x2000 <malloc+0x66>
    1fbe:	88 81       	ld	r24, Y
    1fc0:	99 81       	ldd	r25, Y+1	; 0x01
    1fc2:	86 17       	cp	r24, r22
    1fc4:	97 07       	cpc	r25, r23
    1fc6:	69 f4       	brne	.+26     	; 0x1fe2 <malloc+0x48>
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	30 97       	sbiw	r30, 0x00	; 0
    1fce:	19 f0       	breq	.+6      	; 0x1fd6 <malloc+0x3c>
    1fd0:	93 83       	std	Z+3, r25	; 0x03
    1fd2:	82 83       	std	Z+2, r24	; 0x02
    1fd4:	04 c0       	rjmp	.+8      	; 0x1fde <malloc+0x44>
    1fd6:	90 93 d0 01 	sts	0x01D0, r25
    1fda:	80 93 cf 01 	sts	0x01CF, r24
    1fde:	fe 01       	movw	r30, r28
    1fe0:	34 c0       	rjmp	.+104    	; 0x204a <malloc+0xb0>
    1fe2:	68 17       	cp	r22, r24
    1fe4:	79 07       	cpc	r23, r25
    1fe6:	38 f4       	brcc	.+14     	; 0x1ff6 <malloc+0x5c>
    1fe8:	41 15       	cp	r20, r1
    1fea:	51 05       	cpc	r21, r1
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <malloc+0x5a>
    1fee:	84 17       	cp	r24, r20
    1ff0:	95 07       	cpc	r25, r21
    1ff2:	08 f4       	brcc	.+2      	; 0x1ff6 <malloc+0x5c>
    1ff4:	ac 01       	movw	r20, r24
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	9c 01       	movw	r18, r24
    1ffe:	e9 01       	movw	r28, r18
    2000:	20 97       	sbiw	r28, 0x00	; 0
    2002:	e9 f6       	brne	.-70     	; 0x1fbe <malloc+0x24>
    2004:	41 15       	cp	r20, r1
    2006:	51 05       	cpc	r21, r1
    2008:	a9 f1       	breq	.+106    	; 0x2074 <malloc+0xda>
    200a:	ca 01       	movw	r24, r20
    200c:	86 1b       	sub	r24, r22
    200e:	97 0b       	sbc	r25, r23
    2010:	04 97       	sbiw	r24, 0x04	; 4
    2012:	08 f4       	brcc	.+2      	; 0x2016 <malloc+0x7c>
    2014:	ba 01       	movw	r22, r20
    2016:	e0 e0       	ldi	r30, 0x00	; 0
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	2a c0       	rjmp	.+84     	; 0x2070 <malloc+0xd6>
    201c:	8d 91       	ld	r24, X+
    201e:	9c 91       	ld	r25, X
    2020:	11 97       	sbiw	r26, 0x01	; 1
    2022:	84 17       	cp	r24, r20
    2024:	95 07       	cpc	r25, r21
    2026:	f9 f4       	brne	.+62     	; 0x2066 <malloc+0xcc>
    2028:	64 17       	cp	r22, r20
    202a:	75 07       	cpc	r23, r21
    202c:	81 f4       	brne	.+32     	; 0x204e <malloc+0xb4>
    202e:	12 96       	adiw	r26, 0x02	; 2
    2030:	8d 91       	ld	r24, X+
    2032:	9c 91       	ld	r25, X
    2034:	13 97       	sbiw	r26, 0x03	; 3
    2036:	30 97       	sbiw	r30, 0x00	; 0
    2038:	19 f0       	breq	.+6      	; 0x2040 <malloc+0xa6>
    203a:	93 83       	std	Z+3, r25	; 0x03
    203c:	82 83       	std	Z+2, r24	; 0x02
    203e:	04 c0       	rjmp	.+8      	; 0x2048 <malloc+0xae>
    2040:	90 93 d0 01 	sts	0x01D0, r25
    2044:	80 93 cf 01 	sts	0x01CF, r24
    2048:	fd 01       	movw	r30, r26
    204a:	32 96       	adiw	r30, 0x02	; 2
    204c:	4f c0       	rjmp	.+158    	; 0x20ec <malloc+0x152>
    204e:	ca 01       	movw	r24, r20
    2050:	86 1b       	sub	r24, r22
    2052:	97 0b       	sbc	r25, r23
    2054:	fd 01       	movw	r30, r26
    2056:	e8 0f       	add	r30, r24
    2058:	f9 1f       	adc	r31, r25
    205a:	61 93       	st	Z+, r22
    205c:	71 93       	st	Z+, r23
    205e:	02 97       	sbiw	r24, 0x02	; 2
    2060:	8d 93       	st	X+, r24
    2062:	9c 93       	st	X, r25
    2064:	43 c0       	rjmp	.+134    	; 0x20ec <malloc+0x152>
    2066:	fd 01       	movw	r30, r26
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	9c 01       	movw	r18, r24
    206e:	d9 01       	movw	r26, r18
    2070:	10 97       	sbiw	r26, 0x00	; 0
    2072:	a1 f6       	brne	.-88     	; 0x201c <malloc+0x82>
    2074:	80 91 cd 01 	lds	r24, 0x01CD
    2078:	90 91 ce 01 	lds	r25, 0x01CE
    207c:	89 2b       	or	r24, r25
    207e:	41 f4       	brne	.+16     	; 0x2090 <malloc+0xf6>
    2080:	80 91 6c 01 	lds	r24, 0x016C
    2084:	90 91 6d 01 	lds	r25, 0x016D
    2088:	90 93 ce 01 	sts	0x01CE, r25
    208c:	80 93 cd 01 	sts	0x01CD, r24
    2090:	40 91 6e 01 	lds	r20, 0x016E
    2094:	50 91 6f 01 	lds	r21, 0x016F
    2098:	41 15       	cp	r20, r1
    209a:	51 05       	cpc	r21, r1
    209c:	41 f4       	brne	.+16     	; 0x20ae <malloc+0x114>
    209e:	4d b7       	in	r20, 0x3d	; 61
    20a0:	5e b7       	in	r21, 0x3e	; 62
    20a2:	80 91 6a 01 	lds	r24, 0x016A
    20a6:	90 91 6b 01 	lds	r25, 0x016B
    20aa:	48 1b       	sub	r20, r24
    20ac:	59 0b       	sbc	r21, r25
    20ae:	20 91 cd 01 	lds	r18, 0x01CD
    20b2:	30 91 ce 01 	lds	r19, 0x01CE
    20b6:	24 17       	cp	r18, r20
    20b8:	35 07       	cpc	r19, r21
    20ba:	b0 f4       	brcc	.+44     	; 0x20e8 <malloc+0x14e>
    20bc:	ca 01       	movw	r24, r20
    20be:	82 1b       	sub	r24, r18
    20c0:	93 0b       	sbc	r25, r19
    20c2:	86 17       	cp	r24, r22
    20c4:	97 07       	cpc	r25, r23
    20c6:	80 f0       	brcs	.+32     	; 0x20e8 <malloc+0x14e>
    20c8:	ab 01       	movw	r20, r22
    20ca:	4e 5f       	subi	r20, 0xFE	; 254
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	84 17       	cp	r24, r20
    20d0:	95 07       	cpc	r25, r21
    20d2:	50 f0       	brcs	.+20     	; 0x20e8 <malloc+0x14e>
    20d4:	42 0f       	add	r20, r18
    20d6:	53 1f       	adc	r21, r19
    20d8:	50 93 ce 01 	sts	0x01CE, r21
    20dc:	40 93 cd 01 	sts	0x01CD, r20
    20e0:	f9 01       	movw	r30, r18
    20e2:	61 93       	st	Z+, r22
    20e4:	71 93       	st	Z+, r23
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <malloc+0x152>
    20e8:	e0 e0       	ldi	r30, 0x00	; 0
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	cf 01       	movw	r24, r30
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <free>:
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	09 f4       	brne	.+2      	; 0x20fe <free+0xa>
    20fc:	50 c0       	rjmp	.+160    	; 0x219e <free+0xaa>
    20fe:	ec 01       	movw	r28, r24
    2100:	22 97       	sbiw	r28, 0x02	; 2
    2102:	1b 82       	std	Y+3, r1	; 0x03
    2104:	1a 82       	std	Y+2, r1	; 0x02
    2106:	a0 91 cf 01 	lds	r26, 0x01CF
    210a:	b0 91 d0 01 	lds	r27, 0x01D0
    210e:	10 97       	sbiw	r26, 0x00	; 0
    2110:	09 f1       	breq	.+66     	; 0x2154 <free+0x60>
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	ac 17       	cp	r26, r28
    2118:	bd 07       	cpc	r27, r29
    211a:	08 f1       	brcs	.+66     	; 0x215e <free+0x6a>
    211c:	bb 83       	std	Y+3, r27	; 0x03
    211e:	aa 83       	std	Y+2, r26	; 0x02
    2120:	fe 01       	movw	r30, r28
    2122:	21 91       	ld	r18, Z+
    2124:	31 91       	ld	r19, Z+
    2126:	e2 0f       	add	r30, r18
    2128:	f3 1f       	adc	r31, r19
    212a:	ae 17       	cp	r26, r30
    212c:	bf 07       	cpc	r27, r31
    212e:	79 f4       	brne	.+30     	; 0x214e <free+0x5a>
    2130:	8d 91       	ld	r24, X+
    2132:	9c 91       	ld	r25, X
    2134:	11 97       	sbiw	r26, 0x01	; 1
    2136:	28 0f       	add	r18, r24
    2138:	39 1f       	adc	r19, r25
    213a:	2e 5f       	subi	r18, 0xFE	; 254
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	39 83       	std	Y+1, r19	; 0x01
    2140:	28 83       	st	Y, r18
    2142:	12 96       	adiw	r26, 0x02	; 2
    2144:	8d 91       	ld	r24, X+
    2146:	9c 91       	ld	r25, X
    2148:	13 97       	sbiw	r26, 0x03	; 3
    214a:	9b 83       	std	Y+3, r25	; 0x03
    214c:	8a 83       	std	Y+2, r24	; 0x02
    214e:	41 15       	cp	r20, r1
    2150:	51 05       	cpc	r21, r1
    2152:	71 f4       	brne	.+28     	; 0x2170 <free+0x7c>
    2154:	d0 93 d0 01 	sts	0x01D0, r29
    2158:	c0 93 cf 01 	sts	0x01CF, r28
    215c:	20 c0       	rjmp	.+64     	; 0x219e <free+0xaa>
    215e:	12 96       	adiw	r26, 0x02	; 2
    2160:	8d 91       	ld	r24, X+
    2162:	9c 91       	ld	r25, X
    2164:	13 97       	sbiw	r26, 0x03	; 3
    2166:	ad 01       	movw	r20, r26
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	11 f0       	breq	.+4      	; 0x2170 <free+0x7c>
    216c:	dc 01       	movw	r26, r24
    216e:	d3 cf       	rjmp	.-90     	; 0x2116 <free+0x22>
    2170:	fa 01       	movw	r30, r20
    2172:	d3 83       	std	Z+3, r29	; 0x03
    2174:	c2 83       	std	Z+2, r28	; 0x02
    2176:	21 91       	ld	r18, Z+
    2178:	31 91       	ld	r19, Z+
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
    217e:	ce 17       	cp	r28, r30
    2180:	df 07       	cpc	r29, r31
    2182:	69 f4       	brne	.+26     	; 0x219e <free+0xaa>
    2184:	88 81       	ld	r24, Y
    2186:	99 81       	ldd	r25, Y+1	; 0x01
    2188:	28 0f       	add	r18, r24
    218a:	39 1f       	adc	r19, r25
    218c:	2e 5f       	subi	r18, 0xFE	; 254
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	fa 01       	movw	r30, r20
    2192:	31 83       	std	Z+1, r19	; 0x01
    2194:	20 83       	st	Z, r18
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	9b 81       	ldd	r25, Y+3	; 0x03
    219a:	93 83       	std	Z+3, r25	; 0x03
    219c:	82 83       	std	Z+2, r24	; 0x02
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	08 95       	ret

000021a4 <memcpy>:
    21a4:	fb 01       	movw	r30, r22
    21a6:	dc 01       	movw	r26, r24
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <memcpy+0xa>
    21aa:	01 90       	ld	r0, Z+
    21ac:	0d 92       	st	X+, r0
    21ae:	41 50       	subi	r20, 0x01	; 1
    21b0:	50 40       	sbci	r21, 0x00	; 0
    21b2:	d8 f7       	brcc	.-10     	; 0x21aa <memcpy+0x6>
    21b4:	08 95       	ret

000021b6 <memset>:
    21b6:	dc 01       	movw	r26, r24
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <memset+0x6>
    21ba:	6d 93       	st	X+, r22
    21bc:	41 50       	subi	r20, 0x01	; 1
    21be:	50 40       	sbci	r21, 0x00	; 0
    21c0:	e0 f7       	brcc	.-8      	; 0x21ba <memset+0x4>
    21c2:	08 95       	ret

000021c4 <floor>:
    21c4:	3b d0       	rcall	.+118    	; 0x223c <__fp_trunc>
    21c6:	80 f0       	brcs	.+32     	; 0x21e8 <floor+0x24>
    21c8:	9f 37       	cpi	r25, 0x7F	; 127
    21ca:	40 f4       	brcc	.+16     	; 0x21dc <floor+0x18>
    21cc:	91 11       	cpse	r25, r1
    21ce:	0e f0       	brts	.+2      	; 0x21d2 <floor+0xe>
    21d0:	4d c0       	rjmp	.+154    	; 0x226c <__fp_szero>
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	80 e8       	ldi	r24, 0x80	; 128
    21d8:	9f eb       	ldi	r25, 0xBF	; 191
    21da:	08 95       	ret
    21dc:	26 f4       	brtc	.+8      	; 0x21e6 <floor+0x22>
    21de:	1b 16       	cp	r1, r27
    21e0:	61 1d       	adc	r22, r1
    21e2:	71 1d       	adc	r23, r1
    21e4:	81 1d       	adc	r24, r1
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <__fp_mintl>
    21e8:	1b c0       	rjmp	.+54     	; 0x2220 <__fp_mpack>

000021ea <__fp_mintl>:
    21ea:	88 23       	and	r24, r24
    21ec:	71 f4       	brne	.+28     	; 0x220a <__fp_mintl+0x20>
    21ee:	77 23       	and	r23, r23
    21f0:	21 f0       	breq	.+8      	; 0x21fa <__fp_mintl+0x10>
    21f2:	98 50       	subi	r25, 0x08	; 8
    21f4:	87 2b       	or	r24, r23
    21f6:	76 2f       	mov	r23, r22
    21f8:	07 c0       	rjmp	.+14     	; 0x2208 <__fp_mintl+0x1e>
    21fa:	66 23       	and	r22, r22
    21fc:	11 f4       	brne	.+4      	; 0x2202 <__fp_mintl+0x18>
    21fe:	99 27       	eor	r25, r25
    2200:	0d c0       	rjmp	.+26     	; 0x221c <__fp_mintl+0x32>
    2202:	90 51       	subi	r25, 0x10	; 16
    2204:	86 2b       	or	r24, r22
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	2a f0       	brmi	.+10     	; 0x2216 <__fp_mintl+0x2c>
    220c:	9a 95       	dec	r25
    220e:	66 0f       	add	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	da f7       	brpl	.-10     	; 0x220c <__fp_mintl+0x22>
    2216:	88 0f       	add	r24, r24
    2218:	96 95       	lsr	r25
    221a:	87 95       	ror	r24
    221c:	97 f9       	bld	r25, 7
    221e:	08 95       	ret

00002220 <__fp_mpack>:
    2220:	9f 3f       	cpi	r25, 0xFF	; 255
    2222:	31 f0       	breq	.+12     	; 0x2230 <__fp_mpack_finite+0xc>

00002224 <__fp_mpack_finite>:
    2224:	91 50       	subi	r25, 0x01	; 1
    2226:	20 f4       	brcc	.+8      	; 0x2230 <__fp_mpack_finite+0xc>
    2228:	87 95       	ror	r24
    222a:	77 95       	ror	r23
    222c:	67 95       	ror	r22
    222e:	b7 95       	ror	r27
    2230:	88 0f       	add	r24, r24
    2232:	91 1d       	adc	r25, r1
    2234:	96 95       	lsr	r25
    2236:	87 95       	ror	r24
    2238:	97 f9       	bld	r25, 7
    223a:	08 95       	ret

0000223c <__fp_trunc>:
    223c:	25 d0       	rcall	.+74     	; 0x2288 <__fp_splitA>
    223e:	a0 f0       	brcs	.+40     	; 0x2268 <__fp_trunc+0x2c>
    2240:	be e7       	ldi	r27, 0x7E	; 126
    2242:	b9 17       	cp	r27, r25
    2244:	88 f4       	brcc	.+34     	; 0x2268 <__fp_trunc+0x2c>
    2246:	bb 27       	eor	r27, r27
    2248:	9f 38       	cpi	r25, 0x8F	; 143
    224a:	60 f4       	brcc	.+24     	; 0x2264 <__fp_trunc+0x28>
    224c:	16 16       	cp	r1, r22
    224e:	b1 1d       	adc	r27, r1
    2250:	67 2f       	mov	r22, r23
    2252:	78 2f       	mov	r23, r24
    2254:	88 27       	eor	r24, r24
    2256:	98 5f       	subi	r25, 0xF8	; 248
    2258:	f7 cf       	rjmp	.-18     	; 0x2248 <__fp_trunc+0xc>
    225a:	86 95       	lsr	r24
    225c:	77 95       	ror	r23
    225e:	67 95       	ror	r22
    2260:	b1 1d       	adc	r27, r1
    2262:	93 95       	inc	r25
    2264:	96 39       	cpi	r25, 0x96	; 150
    2266:	c8 f3       	brcs	.-14     	; 0x225a <__fp_trunc+0x1e>
    2268:	08 95       	ret

0000226a <__fp_zero>:
    226a:	e8 94       	clt

0000226c <__fp_szero>:
    226c:	bb 27       	eor	r27, r27
    226e:	66 27       	eor	r22, r22
    2270:	77 27       	eor	r23, r23
    2272:	cb 01       	movw	r24, r22
    2274:	97 f9       	bld	r25, 7
    2276:	08 95       	ret

00002278 <__fp_split3>:
    2278:	57 fd       	sbrc	r21, 7
    227a:	90 58       	subi	r25, 0x80	; 128
    227c:	44 0f       	add	r20, r20
    227e:	55 1f       	adc	r21, r21
    2280:	59 f0       	breq	.+22     	; 0x2298 <__fp_splitA+0x10>
    2282:	5f 3f       	cpi	r21, 0xFF	; 255
    2284:	71 f0       	breq	.+28     	; 0x22a2 <__fp_splitA+0x1a>
    2286:	47 95       	ror	r20

00002288 <__fp_splitA>:
    2288:	88 0f       	add	r24, r24
    228a:	97 fb       	bst	r25, 7
    228c:	99 1f       	adc	r25, r25
    228e:	61 f0       	breq	.+24     	; 0x22a8 <__fp_splitA+0x20>
    2290:	9f 3f       	cpi	r25, 0xFF	; 255
    2292:	79 f0       	breq	.+30     	; 0x22b2 <__fp_splitA+0x2a>
    2294:	87 95       	ror	r24
    2296:	08 95       	ret
    2298:	12 16       	cp	r1, r18
    229a:	13 06       	cpc	r1, r19
    229c:	14 06       	cpc	r1, r20
    229e:	55 1f       	adc	r21, r21
    22a0:	f2 cf       	rjmp	.-28     	; 0x2286 <__fp_split3+0xe>
    22a2:	46 95       	lsr	r20
    22a4:	f1 df       	rcall	.-30     	; 0x2288 <__fp_splitA>
    22a6:	08 c0       	rjmp	.+16     	; 0x22b8 <__fp_splitA+0x30>
    22a8:	16 16       	cp	r1, r22
    22aa:	17 06       	cpc	r1, r23
    22ac:	18 06       	cpc	r1, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	f1 cf       	rjmp	.-30     	; 0x2294 <__fp_splitA+0xc>
    22b2:	86 95       	lsr	r24
    22b4:	71 05       	cpc	r23, r1
    22b6:	61 05       	cpc	r22, r1
    22b8:	08 94       	sec
    22ba:	08 95       	ret

000022bc <_exit>:
    22bc:	f8 94       	cli

000022be <__stop_program>:
    22be:	ff cf       	rjmp	.-2      	; 0x22be <__stop_program>
