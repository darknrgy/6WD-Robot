
DualChannelCounter1PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002874  00002908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000083  00800182  00800182  00002a2a  2**0
                  ALLOC
  3 .debug_aranges 000002e0  00000000  00000000  00002a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000069d  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d8f  00000000  00000000  000033a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f40  00000000  00000000  00007136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000024ae  00000000  00000000  00009076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a0  00000000  00000000  0000b524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000901  00000000  00000000  0000bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010ac  00000000  00000000  0000c3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000d471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_1>
       8:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_2>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__vector_5>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_13>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_16>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000054 <__c.1708>:
      54:	21 62 75 66 66 65 72 5f 66 75 6c 6c 0a 00           !buffer_full..

00000062 <__c.1696>:
      62:	21 66 72 61 6d 69 6e 67 5f 65 72 72 6f 72 0a 00     !framing_error..

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e4 e7       	ldi	r30, 0x74	; 116
      86:	f8 e2       	ldi	r31, 0x28	; 40
      88:	02 c0       	rjmp	.+4      	; 0x8e <.do_copy_data_start>

0000008a <.do_copy_data_loop>:
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0

0000008e <.do_copy_data_start>:
      8e:	a2 38       	cpi	r26, 0x82	; 130
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <.do_copy_data_loop>

00000094 <__do_clear_bss>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a2 e8       	ldi	r26, 0x82	; 130
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a5 30       	cpi	r26, 0x05	; 5
      a0:	b1 07       	cpc	r27, r17
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 24 01 	call	0x248	; 0x248 <main>
      a8:	0c 94 38 14 	jmp	0x2870	; 0x2870 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <get_rpm_handle>:
}

uint16_t* get_rpm_handle(){
	static uint16_t rpm;
	return &rpm;
}
      b0:	82 e8       	ldi	r24, 0x82	; 130
      b2:	91 e0       	ldi	r25, 0x01	; 1
      b4:	08 95       	ret

000000b6 <cmd_get_rpm>:

void cmd_get_rpm(){



}
      b6:	08 95       	ret

000000b8 <cmd_send_debug16>:
	packet.data[2] = rpm - (packet.data[1] << 8);
	packet.length = 3;
	Packets_send(packet);
}

void cmd_send_debug16(char name, uint16_t debug){
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	df 93       	push	r29
      c2:	cf 93       	push	r28
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	2c 97       	sbiw	r28, 0x0c	; 12
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	f8 94       	cli
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	0f be       	out	0x3f, r0	; 63
      d2:	cd bf       	out	0x3d, r28	; 61
      d4:	26 2f       	mov	r18, r22

	Packet packet;
	packet.data[0] = CMD_DEBUG16;
      d6:	90 e3       	ldi	r25, 0x30	; 48
      d8:	9a 83       	std	Y+2, r25	; 0x02
	packet.data[1] = name;
      da:	8b 83       	std	Y+3, r24	; 0x03
	packet.data[2] = debug >> 8;
      dc:	7c 83       	std	Y+4, r23	; 0x04
	packet.data[3] = debug - (packet.data[1] << 8);
      de:	6d 83       	std	Y+5, r22	; 0x05
	packet.length = 4;
      e0:	94 e0       	ldi	r25, 0x04	; 4
      e2:	9c 87       	std	Y+12, r25	; 0x0c
	Packets_send(packet);
      e4:	e9 80       	ldd	r14, Y+1	; 0x01
      e6:	30 e3       	ldi	r19, 0x30	; 48
      e8:	f3 2e       	mov	r15, r19
      ea:	08 2f       	mov	r16, r24
      ec:	17 2f       	mov	r17, r23
      ee:	3e 81       	ldd	r19, Y+6	; 0x06
      f0:	4f 81       	ldd	r20, Y+7	; 0x07
      f2:	58 85       	ldd	r21, Y+8	; 0x08
      f4:	69 85       	ldd	r22, Y+9	; 0x09
      f6:	7a 85       	ldd	r23, Y+10	; 0x0a
      f8:	8b 85       	ldd	r24, Y+11	; 0x0b
      fa:	0e 94 a2 04 	call	0x944	; 0x944 <Packets_send>

}
      fe:	2c 96       	adiw	r28, 0x0c	; 12
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	1f 91       	pop	r17
     110:	0f 91       	pop	r16
     112:	ff 90       	pop	r15
     114:	ef 90       	pop	r14
     116:	08 95       	ret

00000118 <cmd_send_rpm>:
	static uint16_t rpm;
	return &rpm;
}


void cmd_send_rpm(uint16_t rpm){
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	2c 97       	sbiw	r28, 0x0c	; 12
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
	
	Packet packet;
	packet.data[0] = CMD_RPM;
     134:	20 e2       	ldi	r18, 0x20	; 32
     136:	2a 83       	std	Y+2, r18	; 0x02
	packet.data[1] = rpm >> 8;
     138:	9b 83       	std	Y+3, r25	; 0x03
	packet.data[2] = rpm - (packet.data[1] << 8);
     13a:	8c 83       	std	Y+4, r24	; 0x04
	packet.length = 3;
     13c:	23 e0       	ldi	r18, 0x03	; 3
     13e:	2c 87       	std	Y+12, r18	; 0x0c
	Packets_send(packet);
     140:	e9 80       	ldd	r14, Y+1	; 0x01
     142:	40 e2       	ldi	r20, 0x20	; 32
     144:	f4 2e       	mov	r15, r20
     146:	09 2f       	mov	r16, r25
     148:	18 2f       	mov	r17, r24
     14a:	2d 81       	ldd	r18, Y+5	; 0x05
     14c:	3e 81       	ldd	r19, Y+6	; 0x06
     14e:	4f 81       	ldd	r20, Y+7	; 0x07
     150:	58 85       	ldd	r21, Y+8	; 0x08
     152:	69 85       	ldd	r22, Y+9	; 0x09
     154:	7a 85       	ldd	r23, Y+10	; 0x0a
     156:	8b 85       	ldd	r24, Y+11	; 0x0b
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	0e 94 a2 04 	call	0x944	; 0x944 <Packets_send>
}
     15e:	2c 96       	adiw	r28, 0x0c	; 12
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	cf 91       	pop	r28
     16c:	df 91       	pop	r29
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	08 95       	ret

00000178 <cmd_rpmset>:

void cmd_pwm_setscalar(char* params){
	pwm_set_scalar(params[0]);
}

void cmd_rpmset(char* params){
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	fc 01       	movw	r30, r24

	
	uint16_t left = params[0] << 8; left += params[1];
     17e:	50 81       	ld	r21, Z
     180:	40 e0       	ldi	r20, 0x00	; 0
	uint16_t right = params[2] << 8; right += params[3];
     182:	12 81       	ldd	r17, Z+2	; 0x02
     184:	00 e0       	ldi	r16, 0x00	; 0
     186:	83 81       	ldd	r24, Z+3	; 0x03
     188:	08 0f       	add	r16, r24
     18a:	11 1d       	adc	r17, r1

	motors_set(MOTORS_LEFT , MOTORS_FWD, left);
     18c:	81 81       	ldd	r24, Z+1	; 0x01
     18e:	48 0f       	add	r20, r24
     190:	51 1d       	adc	r21, r1
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <motors_set>
	motors_set(MOTORS_RIGHT, MOTORS_FWD, right);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	a8 01       	movw	r20, r16
     1a0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <motors_set>
}
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <cmd_pwm_setscalar>:
	uint16_t value = params[1] << 8; value += params[2];	
	pwm_set(chan, value);

}

void cmd_pwm_setscalar(char* params){
     1aa:	fc 01       	movw	r30, r24
	pwm_set_scalar(params[0]);
     1ac:	80 81       	ld	r24, Z
     1ae:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pwm_set_scalar>
}
     1b2:	08 95       	ret

000001b4 <cmd_pwm_set>:

	}
	
}

void cmd_pwm_set(char* params){
     1b4:	fc 01       	movw	r30, r24
	char chan = params[0];
	uint16_t value = params[1] << 8; value += params[2];	
     1b6:	71 81       	ldd	r23, Z+1	; 0x01
     1b8:	60 e0       	ldi	r22, 0x00	; 0
	pwm_set(chan, value);
     1ba:	82 81       	ldd	r24, Z+2	; 0x02
     1bc:	68 0f       	add	r22, r24
     1be:	71 1d       	adc	r23, r1
     1c0:	80 81       	ld	r24, Z
     1c2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <pwm_set>

}
     1c6:	08 95       	ret

000001c8 <handle_packet>:
#include "includes.h"
#include "constants.h"
#include "commands.h"


void handle_packet(Packet packet){
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	df 93       	push	r29
     1d2:	cf 93       	push	r28
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	2c 97       	sbiw	r28, 0x0c	; 12
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	e9 82       	std	Y+1, r14	; 0x01
     1e6:	ef 2d       	mov	r30, r15
     1e8:	fa 82       	std	Y+2, r15	; 0x02
     1ea:	0b 83       	std	Y+3, r16	; 0x03
     1ec:	1c 83       	std	Y+4, r17	; 0x04
     1ee:	2d 83       	std	Y+5, r18	; 0x05
     1f0:	3e 83       	std	Y+6, r19	; 0x06
     1f2:	4f 83       	std	Y+7, r20	; 0x07
     1f4:	58 87       	std	Y+8, r21	; 0x08
     1f6:	69 87       	std	Y+9, r22	; 0x09
     1f8:	7a 87       	std	Y+10, r23	; 0x0a
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
     1fc:	9c 87       	std	Y+12, r25	; 0x0c

	char *params = &packet.data[1];
	
	switch (packet.data[0]){
     1fe:	e1 31       	cpi	r30, 0x11	; 17
     200:	49 f0       	breq	.+18     	; 0x214 <handle_packet+0x4c>
     202:	e1 32       	cpi	r30, 0x21	; 33
     204:	59 f0       	breq	.+22     	; 0x21c <handle_packet+0x54>
     206:	e0 31       	cpi	r30, 0x10	; 16
     208:	71 f4       	brne	.+28     	; 0x226 <handle_packet+0x5e>
		case CMD_PWM_SET:			cmd_pwm_set(params); break;
     20a:	ce 01       	movw	r24, r28
     20c:	03 96       	adiw	r24, 0x03	; 3
     20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <cmd_pwm_set>
     212:	0d c0       	rjmp	.+26     	; 0x22e <handle_packet+0x66>
	pwm_set(chan, value);

}

void cmd_pwm_setscalar(char* params){
	pwm_set_scalar(params[0]);
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pwm_set_scalar>
     21a:	09 c0       	rjmp	.+18     	; 0x22e <handle_packet+0x66>
	char *params = &packet.data[1];
	
	switch (packet.data[0]){
		case CMD_PWM_SET:			cmd_pwm_set(params); break;
		case CMD_PWM_SETSCALAR:		cmd_pwm_setscalar(params); break;
		case CMD_RPMSET		:		cmd_rpmset(params); break;
     21c:	ce 01       	movw	r24, r28
     21e:	03 96       	adiw	r24, 0x03	; 3
     220:	0e 94 bc 00 	call	0x178	; 0x178 <cmd_rpmset>
     224:	04 c0       	rjmp	.+8      	; 0x22e <handle_packet+0x66>
		default: 					Packets_sendError(ERROR_INVALIDCMD, 0x00);			
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <Packets_sendError>

	}
	
}
     22e:	2c 96       	adiw	r28, 0x0c	; 12
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	f8 94       	cli
     234:	de bf       	out	0x3e, r29	; 62
     236:	0f be       	out	0x3f, r0	; 63
     238:	cd bf       	out	0x3d, r28	; 61
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	08 95       	ret

00000248 <main>:
InterruptCounterResult interrupt_counter_delta(uint16_t previous);




int main( void ){
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	6e 97       	sbiw	r28, 0x1e	; 30
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61

	uint8_t error;
	Packet packet;
	Queue* packets;
	packets = Packets_getQueue();
     27c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <Packets_getQueue>
     280:	2c 01       	movw	r4, r24

	// initialize Time
	time_init();
     282:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <time_init>
	TimeResult tr;
	uint32_t previous = 0;

	// initialize usart
	usart_init();
     286:	0e 94 54 07 	call	0xea8	; 0xea8 <usart_init>

	// initialize motors
	motors_init();
     28a:	0e 94 a6 03 	call	0x74c	; 0x74c <motors_init>
	motors_set(MOTORS_LEFT , MOTORS_FWD, 2444);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	4c e8       	ldi	r20, 0x8C	; 140
     294:	59 e0       	ldi	r21, 0x09	; 9
     296:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <motors_set>
	motors_set(MOTORS_RIGHT, MOTORS_FWD, 2444);
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	4c e8       	ldi	r20, 0x8C	; 140
     2a0:	59 e0       	ldi	r21, 0x09	; 9
     2a2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <motors_set>

	Motor* motor1 = motors_get_motor(MOTORS_LEFT);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <motors_get_motor>
     2ac:	9e 8f       	std	Y+30, r25	; 0x1e
     2ae:	8d 8f       	std	Y+29, r24	; 0x1d
	Motor* motor2 = motors_get_motor(MOTORS_RIGHT);
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <motors_get_motor>
     2b6:	1c 01       	movw	r2, r24

	// enable interrupts
	sei();
     2b8:	78 94       	sei
     2ba:	66 24       	eor	r6, r6
     2bc:	77 24       	eor	r7, r7
     2be:	43 01       	movw	r8, r6
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	af 2e       	mov	r10, r31
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	cf 2e       	mov	r12, r31
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	df 2e       	mov	r13, r31
     2d2:	f0 2d       	mov	r31, r0
	float diff = 0, pack_voltage = 0, motor_driver_temp = 0;


	// loop forever
	while(1){
		error = Packets_getError();
     2d4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Packets_getError>
     2d8:	68 2f       	mov	r22, r24
		if (error){
     2da:	88 23       	and	r24, r24
     2dc:	11 f0       	breq	.+4      	; 0x2e2 <main+0x9a>
			Packets_sendError(ERROR_PACKETS, error);
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0f c0       	rjmp	.+30     	; 0x300 <main+0xb8>
			continue;
		}
		if (packets->count > 0){
     2e2:	f2 01       	movw	r30, r4
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	88 23       	and	r24, r24
     2e8:	e1 f0       	breq	.+56     	; 0x322 <main+0xda>
			error = 0x00;
			packet = Packets_getNext();
     2ea:	ce 01       	movw	r24, r28
     2ec:	09 96       	adiw	r24, 0x09	; 9
     2ee:	0e 94 1d 05 	call	0xa3a	; 0xa3a <Packets_getNext>
			error = Queue_getError(packets);
     2f2:	c2 01       	movw	r24, r4
     2f4:	0e 94 ef 05 	call	0xbde	; 0xbde <Queue_getError>
     2f8:	68 2f       	mov	r22, r24
			if (error){
     2fa:	88 23       	and	r24, r24
     2fc:	21 f0       	breq	.+8      	; 0x306 <main+0xbe>
				Packets_sendError(ERROR_QUEUE, error);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 ee 04 	call	0x9dc	; 0x9dc <Packets_sendError>
     304:	e7 cf       	rjmp	.-50     	; 0x2d4 <main+0x8c>
				continue;
			}

			handle_packet(packet);
     306:	e9 84       	ldd	r14, Y+9	; 0x09
     308:	fa 84       	ldd	r15, Y+10	; 0x0a
     30a:	0b 85       	ldd	r16, Y+11	; 0x0b
     30c:	1c 85       	ldd	r17, Y+12	; 0x0c
     30e:	2d 85       	ldd	r18, Y+13	; 0x0d
     310:	3e 85       	ldd	r19, Y+14	; 0x0e
     312:	4f 85       	ldd	r20, Y+15	; 0x0f
     314:	58 89       	ldd	r21, Y+16	; 0x10
     316:	69 89       	ldd	r22, Y+17	; 0x11
     318:	7a 89       	ldd	r23, Y+18	; 0x12
     31a:	8b 89       	ldd	r24, Y+19	; 0x13
     31c:	9c 89       	ldd	r25, Y+20	; 0x14
     31e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <handle_packet>
		}
		tr = time_get_time_delta(previous);
     322:	c4 01       	movw	r24, r8
     324:	b3 01       	movw	r22, r6
     326:	0e 94 cb 06 	call	0xd96	; 0xd96 <time_get_time_delta>
     32a:	2d 8b       	std	Y+21, r18	; 0x15
     32c:	3e 8b       	std	Y+22, r19	; 0x16
     32e:	4f 8b       	std	Y+23, r20	; 0x17
     330:	58 8f       	std	Y+24, r21	; 0x18
     332:	69 8f       	std	Y+25, r22	; 0x19
     334:	7a 8f       	std	Y+26, r23	; 0x1a
     336:	8b 8f       	std	Y+27, r24	; 0x1b
     338:	9c 8f       	std	Y+28, r25	; 0x1c
     33a:	de 01       	movw	r26, r28
     33c:	11 96       	adiw	r26, 0x01	; 1
     33e:	fe 01       	movw	r30, r28
     340:	75 96       	adiw	r30, 0x15	; 21
     342:	88 e0       	ldi	r24, 0x08	; 8
     344:	01 90       	ld	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	81 50       	subi	r24, 0x01	; 1
     34a:	e1 f7       	brne	.-8      	; 0x344 <main+0xfc>
		
		// every 20ms, calculate rpm
		if (get_time_in_ms(tr.delta) > 20){
     34c:	69 81       	ldd	r22, Y+1	; 0x01
     34e:	7a 81       	ldd	r23, Y+2	; 0x02
     350:	8b 81       	ldd	r24, Y+3	; 0x03
     352:	9c 81       	ldd	r25, Y+4	; 0x04
     354:	0e 94 26 07 	call	0xe4c	; 0xe4c <get_time_in_ms>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 ea       	ldi	r20, 0xA0	; 160
     35e:	51 e4       	ldi	r21, 0x41	; 65
     360:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__gtsf2>
     364:	18 16       	cp	r1, r24
     366:	0c f0       	brlt	.+2      	; 0x36a <main+0x122>
     368:	b5 cf       	rjmp	.-150    	; 0x2d4 <main+0x8c>
			previous = tr.previous;
     36a:	6d 80       	ldd	r6, Y+5	; 0x05
     36c:	7e 80       	ldd	r7, Y+6	; 0x06
     36e:	8f 80       	ldd	r8, Y+7	; 0x07
     370:	98 84       	ldd	r9, Y+8	; 0x08
			motors_tick();
     372:	0e 94 4d 02 	call	0x49a	; 0x49a <motors_tick>
			
			diff = diff * 0.00 + ((uint16_t) motor1->pwm - motor2->pwm) * 1.00;
     376:	c6 01       	movw	r24, r12
     378:	b5 01       	movw	r22, r10
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     386:	7b 01       	movw	r14, r22
     388:	8c 01       	movw	r16, r24
     38a:	ed 8d       	ldd	r30, Y+29	; 0x1d
     38c:	fe 8d       	ldd	r31, Y+30	; 0x1e
     38e:	66 85       	ldd	r22, Z+14	; 0x0e
     390:	77 85       	ldd	r23, Z+15	; 0x0f
     392:	80 89       	ldd	r24, Z+16	; 0x10
     394:	91 89       	ldd	r25, Z+17	; 0x11
     396:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fixunssfsi>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__floatunsisf>
     3a2:	f1 01       	movw	r30, r2
     3a4:	26 85       	ldd	r18, Z+14	; 0x0e
     3a6:	37 85       	ldd	r19, Z+15	; 0x0f
     3a8:	40 89       	ldd	r20, Z+16	; 0x10
     3aa:	51 89       	ldd	r21, Z+17	; 0x11
     3ac:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__subsf3>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c8 01       	movw	r24, r16
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 8e 0a 	call	0x151c	; 0x151c <__addsf3>
     3bc:	5b 01       	movw	r10, r22
     3be:	6c 01       	movw	r12, r24

			cmd_send_debug16( 'd', (uint16_t) (abs(diff)) );
     3c0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixsfsi>
     3c4:	77 ff       	sbrs	r23, 7
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <main+0x186>
     3c8:	70 95       	com	r23
     3ca:	61 95       	neg	r22
     3cc:	7f 4f       	sbci	r23, 0xFF	; 255
     3ce:	84 e6       	ldi	r24, 0x64	; 100
     3d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <cmd_send_debug16>
     3d4:	7f cf       	rjmp	.-258    	; 0x2d4 <main+0x8c>

000003d6 <motors_set>:


// get a motor by channel
Motor* motors_get_motor(uint8_t chan){
	static Motor motors[MOTORS_CHANS];
	return &motors[chan];
     3d6:	94 e1       	ldi	r25, 0x14	; 20
     3d8:	89 9f       	mul	r24, r25
     3da:	f0 01       	movw	r30, r0
     3dc:	11 24       	eor	r1, r1
     3de:	e0 56       	subi	r30, 0x60	; 96
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
}

// set a motor speed and direction by channel
void motors_set(uint8_t chan, uint8_t dir, uint16_t rpm){
	Motor* motor = motors_get_motor(chan);
	motor->rpm_target = rpm;
     3e2:	51 83       	std	Z+1, r21	; 0x01
     3e4:	40 83       	st	Z, r20
	motor->dir_target = dir;
     3e6:	62 8b       	std	Z+18, r22	; 0x12
}
     3e8:	08 95       	ret

000003ea <motors_get_motor>:


// get a motor by channel
Motor* motors_get_motor(uint8_t chan){
     3ea:	94 e1       	ldi	r25, 0x14	; 20
     3ec:	89 9f       	mul	r24, r25
     3ee:	90 01       	movw	r18, r0
     3f0:	11 24       	eor	r1, r1
     3f2:	20 56       	subi	r18, 0x60	; 96
     3f4:	3e 4f       	sbci	r19, 0xFE	; 254
	static Motor motors[MOTORS_CHANS];
	return &motors[chan];
}
     3f6:	c9 01       	movw	r24, r18
     3f8:	08 95       	ret

000003fa <__vector_1>:
/*******************************/
/* INTERNAL ONLY FUNCTIONS     */
/*******************************/

// LEFT motor interrupt
ISR(INT0_vect, ISR_NOBLOCK){	
     3fa:	78 94       	sei
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
	uint16_t* counter = motors_get_counter(MOTORS_LEFT);
    *counter = *counter + 1;
     40a:	80 91 84 01 	lds	r24, 0x0184
     40e:	90 91 85 01 	lds	r25, 0x0185
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	90 93 85 01 	sts	0x0185, r25
     418:	80 93 84 01 	sts	0x0184, r24
}
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <__vector_2>:

// RIGHT motor interrupt
ISR(INT1_vect, ISR_NOBLOCK){	
     42a:	78 94       	sei
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
	uint16_t* counter = motors_get_counter(MOTORS_RIGHT);
    *counter = *counter + 1;
     43a:	80 91 86 01 	lds	r24, 0x0186
     43e:	90 91 87 01 	lds	r25, 0x0187
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	90 93 87 01 	sts	0x0187, r25
     448:	80 93 86 01 	sts	0x0186, r24
}
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <motors_get_counter>:

// get an interrupt counter by channel
uint16_t* motors_get_counter(uint8_t chan){
     45a:	28 2f       	mov	r18, r24
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	2c 57       	subi	r18, 0x7C	; 124
     464:	3e 4f       	sbci	r19, 0xFE	; 254
	static uint16_t counters[2];
	return &counters[chan];

}
     466:	c9 01       	movw	r24, r18
     468:	08 95       	ret

0000046a <motors_get_interrupt_counter_result>:
// calculate a counter delta, internal only 
InterruptCounterResult motors_get_interrupt_counter_result(uint8_t chan, uint16_t previous){

    InterruptCounterResult result;
    uint16_t* current = motors_get_counter(chan);
    if (*current >= previous) result.delta = *current - previous;
     46a:	e8 2f       	mov	r30, r24
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	ee 0f       	add	r30, r30
     470:	ff 1f       	adc	r31, r31
     472:	ec 57       	subi	r30, 0x7C	; 124
     474:	fe 4f       	sbci	r31, 0xFE	; 254
     476:	01 90       	ld	r0, Z+
     478:	f0 81       	ld	r31, Z
     47a:	e0 2d       	mov	r30, r0
     47c:	e6 17       	cp	r30, r22
     47e:	f7 07       	cpc	r31, r23
     480:	20 f0       	brcs	.+8      	; 0x48a <motors_get_interrupt_counter_result+0x20>
     482:	9f 01       	movw	r18, r30
     484:	26 1b       	sub	r18, r22
     486:	37 0b       	sbc	r19, r23
     488:	05 c0       	rjmp	.+10     	; 0x494 <motors_get_interrupt_counter_result+0x2a>
    else result.delta = (uint16_t) INTERRUPT_COUNTER_MAX - previous + *current;
     48a:	9b 01       	movw	r18, r22
     48c:	20 95       	com	r18
     48e:	30 95       	com	r19
     490:	2e 0f       	add	r18, r30
     492:	3f 1f       	adc	r19, r31
    result.previous = *current;
    return result;
}
     494:	b9 01       	movw	r22, r18
     496:	cf 01       	movw	r24, r30
     498:	08 95       	ret

0000049a <motors_tick>:
	static Motor motors[MOTORS_CHANS];
	return &motors[chan];
}

// calculate a time frame
void motors_tick(){
     49a:	2f 92       	push	r2
     49c:	3f 92       	push	r3
     49e:	4f 92       	push	r4
     4a0:	5f 92       	push	r5
     4a2:	6f 92       	push	r6
     4a4:	7f 92       	push	r7
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <motors_tick+0x26>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <motors_tick+0x28>
     4c2:	0f 92       	push	r0
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	88 e8       	ldi	r24, 0x88	; 136
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	9a 83       	std	Y+2, r25	; 0x02
     4ce:	89 83       	std	Y+1, r24	; 0x01
     4d0:	38 e9       	ldi	r19, 0x98	; 152
     4d2:	23 2e       	mov	r2, r19
     4d4:	31 e0       	ldi	r19, 0x01	; 1
     4d6:	33 2e       	mov	r3, r19
     4d8:	a0 ea       	ldi	r26, 0xA0	; 160
     4da:	b1 e0       	ldi	r27, 0x01	; 1
     4dc:	bd 83       	std	Y+5, r27	; 0x05
     4de:	ac 83       	std	Y+4, r26	; 0x04
     4e0:	44 24       	eor	r4, r4
     4e2:	55 24       	eor	r5, r5
     4e4:	4b 82       	std	Y+3, r4	; 0x03
	for (chan = 0; chan < MOTORS_CHANS; chan ++){
		
		motor = motors_get_motor(chan);

		// get time delta
		tr[chan] = time_get_time_delta(tr[chan].previous);
     4e6:	82 01       	movw	r16, r4
     4e8:	23 e0       	ldi	r18, 0x03	; 3
     4ea:	00 0f       	add	r16, r16
     4ec:	11 1f       	adc	r17, r17
     4ee:	2a 95       	dec	r18
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <motors_tick+0x50>
     4f2:	08 57       	subi	r16, 0x78	; 120
     4f4:	1e 4f       	sbci	r17, 0xFE	; 254
     4f6:	e9 81       	ldd	r30, Y+1	; 0x01
     4f8:	fa 81       	ldd	r31, Y+2	; 0x02
     4fa:	64 81       	ldd	r22, Z+4	; 0x04
     4fc:	75 81       	ldd	r23, Z+5	; 0x05
     4fe:	86 81       	ldd	r24, Z+6	; 0x06
     500:	97 81       	ldd	r25, Z+7	; 0x07
     502:	0e 94 cb 06 	call	0xd96	; 0xd96 <time_get_time_delta>
     506:	d8 01       	movw	r26, r16
     508:	2c 93       	st	X, r18
     50a:	11 96       	adiw	r26, 0x01	; 1
     50c:	3c 93       	st	X, r19
     50e:	11 97       	sbiw	r26, 0x01	; 1
     510:	12 96       	adiw	r26, 0x02	; 2
     512:	4c 93       	st	X, r20
     514:	12 97       	sbiw	r26, 0x02	; 2
     516:	13 96       	adiw	r26, 0x03	; 3
     518:	5c 93       	st	X, r21
     51a:	13 97       	sbiw	r26, 0x03	; 3
     51c:	14 96       	adiw	r26, 0x04	; 4
     51e:	6c 93       	st	X, r22
     520:	14 97       	sbiw	r26, 0x04	; 4
     522:	15 96       	adiw	r26, 0x05	; 5
     524:	7c 93       	st	X, r23
     526:	15 97       	sbiw	r26, 0x05	; 5
     528:	16 96       	adiw	r26, 0x06	; 6
     52a:	8c 93       	st	X, r24
     52c:	16 97       	sbiw	r26, 0x06	; 6
     52e:	17 96       	adiw	r26, 0x07	; 7
     530:	9c 93       	st	X, r25
		
		// get interrupt counter delta
		icr[chan] = motors_get_interrupt_counter_result(chan, icr[chan].previous);
     532:	f1 01       	movw	r30, r2
     534:	62 81       	ldd	r22, Z+2	; 0x02
     536:	73 81       	ldd	r23, Z+3	; 0x03
     538:	84 2d       	mov	r24, r4
     53a:	0e 94 35 02 	call	0x46a	; 0x46a <motors_get_interrupt_counter_result>
     53e:	d1 01       	movw	r26, r2
     540:	6d 93       	st	X+, r22
     542:	7d 93       	st	X+, r23
     544:	8d 93       	st	X+, r24
     546:	9c 93       	st	X, r25
     548:	13 97       	sbiw	r26, 0x03	; 3
		

		// 60000 is for converting to milliseconds to minutes (for RPM)
        time_ms = get_time_in_ms(tr[chan].delta);
     54a:	e9 81       	ldd	r30, Y+1	; 0x01
     54c:	fa 81       	ldd	r31, Y+2	; 0x02
     54e:	60 81       	ld	r22, Z
     550:	71 81       	ldd	r23, Z+1	; 0x01
     552:	82 81       	ldd	r24, Z+2	; 0x02
     554:	93 81       	ldd	r25, Z+3	; 0x03
     556:	0e 94 26 07 	call	0xe4c	; 0xe4c <get_time_in_ms>
     55a:	7b 01       	movw	r14, r22
     55c:	8c 01       	movw	r16, r24
		rpm =  (float) icr[chan].delta / (float) INTERRUPTS_PER_ROTATION / (float) time_ms * (float) 60000;
     55e:	d1 01       	movw	r26, r2
     560:	6d 91       	ld	r22, X+
     562:	7c 91       	ld	r23, X
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__floatunsisf>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	5d e3       	ldi	r21, 0x3D	; 61
     574:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     578:	a8 01       	movw	r20, r16
     57a:	97 01       	movw	r18, r14
     57c:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e6       	ldi	r19, 0x60	; 96
     584:	4a e6       	ldi	r20, 0x6A	; 106
     586:	57 e4       	ldi	r21, 0x47	; 71
     588:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     58c:	3b 01       	movw	r6, r22
     58e:	4c 01       	movw	r8, r24
		
		// avg the rpm delta
        motor->rpm_delta = motor->rpm_delta * 0.65 + (rpm - motor->rpm_previous) * 0.35;		
     590:	ec 81       	ldd	r30, Y+4	; 0x04
     592:	fd 81       	ldd	r31, Y+5	; 0x05
     594:	62 85       	ldd	r22, Z+10	; 0x0a
     596:	73 85       	ldd	r23, Z+11	; 0x0b
     598:	84 85       	ldd	r24, Z+12	; 0x0c
     59a:	95 85       	ldd	r25, Z+13	; 0x0d
     59c:	26 e6       	ldi	r18, 0x66	; 102
     59e:	36 e6       	ldi	r19, 0x66	; 102
     5a0:	46 e2       	ldi	r20, 0x26	; 38
     5a2:	5f e3       	ldi	r21, 0x3F	; 63
     5a4:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     5a8:	7b 01       	movw	r14, r22
     5aa:	8c 01       	movw	r16, r24
     5ac:	c4 01       	movw	r24, r8
     5ae:	b3 01       	movw	r22, r6
     5b0:	ac 81       	ldd	r26, Y+4	; 0x04
     5b2:	bd 81       	ldd	r27, Y+5	; 0x05
     5b4:	16 96       	adiw	r26, 0x06	; 6
     5b6:	2d 91       	ld	r18, X+
     5b8:	3d 91       	ld	r19, X+
     5ba:	4d 91       	ld	r20, X+
     5bc:	5c 91       	ld	r21, X
     5be:	19 97       	sbiw	r26, 0x09	; 9
     5c0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__subsf3>
     5c4:	23 e3       	ldi	r18, 0x33	; 51
     5c6:	33 e3       	ldi	r19, 0x33	; 51
     5c8:	43 eb       	ldi	r20, 0xB3	; 179
     5ca:	5e e3       	ldi	r21, 0x3E	; 62
     5cc:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	c8 01       	movw	r24, r16
     5d6:	b7 01       	movw	r22, r14
     5d8:	0e 94 8e 0a 	call	0x151c	; 0x151c <__addsf3>
     5dc:	5b 01       	movw	r10, r22
     5de:	6c 01       	movw	r12, r24
     5e0:	ec 81       	ldd	r30, Y+4	; 0x04
     5e2:	fd 81       	ldd	r31, Y+5	; 0x05
     5e4:	62 87       	std	Z+10, r22	; 0x0a
     5e6:	73 87       	std	Z+11, r23	; 0x0b
     5e8:	84 87       	std	Z+12, r24	; 0x0c
     5ea:	95 87       	std	Z+13, r25	; 0x0d
		
		// determine the pwm acceleration rate
        pwm_acc = ((float) motor->rpm_target - rpm) * 0.015 - motor->rpm_delta * 0.15;
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__floatunsisf>
     5f8:	a4 01       	movw	r20, r8
     5fa:	93 01       	movw	r18, r6
     5fc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__subsf3>
     600:	2f e8       	ldi	r18, 0x8F	; 143
     602:	32 ec       	ldi	r19, 0xC2	; 194
     604:	45 e7       	ldi	r20, 0x75	; 117
     606:	5c e3       	ldi	r21, 0x3C	; 60
     608:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     60c:	7b 01       	movw	r14, r22
     60e:	8c 01       	movw	r16, r24
     610:	c6 01       	movw	r24, r12
     612:	b5 01       	movw	r22, r10
     614:	2a e9       	ldi	r18, 0x9A	; 154
     616:	39 e9       	ldi	r19, 0x99	; 153
     618:	49 e1       	ldi	r20, 0x19	; 25
     61a:	5e eb       	ldi	r21, 0xBE	; 190
     61c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c8 01       	movw	r24, r16
     626:	b7 01       	movw	r22, r14
     628:	0e 94 8e 0a 	call	0x151c	; 0x151c <__addsf3>
     62c:	5b 01       	movw	r10, r22
     62e:	6c 01       	movw	r12, r24
		
		if (pwm_acc < - motor->pwm) motor->pwm = 0;
     630:	ac 81       	ldd	r26, Y+4	; 0x04
     632:	bd 81       	ldd	r27, Y+5	; 0x05
     634:	1e 96       	adiw	r26, 0x0e	; 14
     636:	ed 90       	ld	r14, X+
     638:	fd 90       	ld	r15, X+
     63a:	0d 91       	ld	r16, X+
     63c:	1c 91       	ld	r17, X
     63e:	51 97       	sbiw	r26, 0x11	; 17
     640:	a8 01       	movw	r20, r16
     642:	97 01       	movw	r18, r14
     644:	50 58       	subi	r21, 0x80	; 128
     646:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__ltsf2>
     64a:	88 23       	and	r24, r24
     64c:	2c f4       	brge	.+10     	; 0x658 <motors_tick+0x1be>
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	a0 e0       	ldi	r26, 0x00	; 0
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	14 c0       	rjmp	.+40     	; 0x680 <motors_tick+0x1e6>
		else if (pwm_acc + motor->pwm > 1023) motor->pwm = 1023;
     658:	c6 01       	movw	r24, r12
     65a:	b5 01       	movw	r22, r10
     65c:	a8 01       	movw	r20, r16
     65e:	97 01       	movw	r18, r14
     660:	0e 94 8e 0a 	call	0x151c	; 0x151c <__addsf3>
     664:	7b 01       	movw	r14, r22
     666:	8c 01       	movw	r16, r24
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 ec       	ldi	r19, 0xC0	; 192
     66c:	4f e7       	ldi	r20, 0x7F	; 127
     66e:	54 e4       	ldi	r21, 0x44	; 68
     670:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__gtsf2>
     674:	18 16       	cp	r1, r24
     676:	5c f4       	brge	.+22     	; 0x68e <motors_tick+0x1f4>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 ec       	ldi	r25, 0xC0	; 192
     67c:	af e7       	ldi	r26, 0x7F	; 127
     67e:	b4 e4       	ldi	r27, 0x44	; 68
     680:	ec 81       	ldd	r30, Y+4	; 0x04
     682:	fd 81       	ldd	r31, Y+5	; 0x05
     684:	86 87       	std	Z+14, r24	; 0x0e
     686:	97 87       	std	Z+15, r25	; 0x0f
     688:	a0 8b       	std	Z+16, r26	; 0x10
     68a:	b1 8b       	std	Z+17, r27	; 0x11
     68c:	08 c0       	rjmp	.+16     	; 0x69e <motors_tick+0x204>
		else{
			 motor->pwm =  motor->pwm + pwm_acc;
     68e:	ac 81       	ldd	r26, Y+4	; 0x04
     690:	bd 81       	ldd	r27, Y+5	; 0x05
     692:	1e 96       	adiw	r26, 0x0e	; 14
     694:	ed 92       	st	X+, r14
     696:	fd 92       	st	X+, r15
     698:	0d 93       	st	X+, r16
     69a:	1c 93       	st	X, r17
     69c:	51 97       	sbiw	r26, 0x11	; 17
		}

		
		if (motor->rpm_target == 0) motor->pwm = 0;
     69e:	ec 81       	ldd	r30, Y+4	; 0x04
     6a0:	fd 81       	ldd	r31, Y+5	; 0x05
     6a2:	80 81       	ld	r24, Z
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	89 2b       	or	r24, r25
     6a8:	41 f4       	brne	.+16     	; 0x6ba <motors_tick+0x220>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	a0 e0       	ldi	r26, 0x00	; 0
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	86 87       	std	Z+14, r24	; 0x0e
     6b4:	97 87       	std	Z+15, r25	; 0x0f
     6b6:	a0 8b       	std	Z+16, r26	; 0x10
     6b8:	b1 8b       	std	Z+17, r27	; 0x11
		pwm_set(chan,floor(motor->pwm));
     6ba:	ac 81       	ldd	r26, Y+4	; 0x04
     6bc:	bd 81       	ldd	r27, Y+5	; 0x05
     6be:	1e 96       	adiw	r26, 0x0e	; 14
     6c0:	6d 91       	ld	r22, X+
     6c2:	7d 91       	ld	r23, X+
     6c4:	8d 91       	ld	r24, X+
     6c6:	9c 91       	ld	r25, X
     6c8:	51 97       	sbiw	r26, 0x11	; 17
     6ca:	0e 94 3f 11 	call	0x227e	; 0x227e <floor>
     6ce:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fixunssfsi>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	b9 01       	movw	r22, r18
     6da:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <pwm_set>
		motor->rpm_previous = rpm;
     6de:	ec 81       	ldd	r30, Y+4	; 0x04
     6e0:	fd 81       	ldd	r31, Y+5	; 0x05
     6e2:	66 82       	std	Z+6, r6	; 0x06
     6e4:	77 82       	std	Z+7, r7	; 0x07
     6e6:	80 86       	std	Z+8, r8	; 0x08
     6e8:	91 86       	std	Z+9, r9	; 0x09
		motor->rpm_measured = rpm;
     6ea:	df 01       	movw	r26, r30
     6ec:	62 82       	std	Z+2, r6	; 0x02
     6ee:	73 82       	std	Z+3, r7	; 0x03
     6f0:	84 82       	std	Z+4, r8	; 0x04
     6f2:	95 82       	std	Z+5, r9	; 0x05
     6f4:	08 94       	sec
     6f6:	41 1c       	adc	r4, r1
     6f8:	51 1c       	adc	r5, r1
     6fa:	e9 81       	ldd	r30, Y+1	; 0x01
     6fc:	fa 81       	ldd	r31, Y+2	; 0x02
     6fe:	38 96       	adiw	r30, 0x08	; 8
     700:	fa 83       	std	Y+2, r31	; 0x02
     702:	e9 83       	std	Y+1, r30	; 0x01
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	28 0e       	add	r2, r24
     70a:	39 1e       	adc	r3, r25
     70c:	54 96       	adiw	r26, 0x14	; 20
     70e:	bd 83       	std	Y+5, r27	; 0x05
     710:	ac 83       	std	Y+4, r26	; 0x04
	static InterruptCounterResult icr[MOTORS_CHANS];
    static TimeResult tr[MOTORS_CHANS];
	float time_ms, pwm_acc, rpm;
	uint8_t chan;

	for (chan = 0; chan < MOTORS_CHANS; chan ++){
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	49 16       	cp	r4, r25
     716:	51 04       	cpc	r5, r1
     718:	09 f0       	breq	.+2      	; 0x71c <motors_tick+0x282>
     71a:	e4 ce       	rjmp	.-568    	; 0x4e4 <motors_tick+0x4a>
		if (motor->rpm_target == 0) motor->pwm = 0;
		pwm_set(chan,floor(motor->pwm));
		motor->rpm_previous = rpm;
		motor->rpm_measured = rpm;
	}    
}
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	cf 91       	pop	r28
     728:	df 91       	pop	r29
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	7f 90       	pop	r7
     740:	6f 90       	pop	r6
     742:	5f 90       	pop	r5
     744:	4f 90       	pop	r4
     746:	3f 90       	pop	r3
     748:	2f 90       	pop	r2
     74a:	08 95       	ret

0000074c <motors_init>:

// initialize the motor system
void motors_init(){
	
	// configure external interrupts on INT0 and INT1
	setbit(MCUCR,	BIT(ISC00) 	| 	BIT(ISC10));
     74c:	85 b7       	in	r24, 0x35	; 53
     74e:	85 60       	ori	r24, 0x05	; 5
     750:	85 bf       	out	0x35, r24	; 53
	setbit(GICR, 	BIT(INT0) 	| 	BIT(INT1));
     752:	8b b7       	in	r24, 0x3b	; 59
     754:	80 6c       	ori	r24, 0xC0	; 192
     756:	8b bf       	out	0x3b, r24	; 59

	// initialize hardware PWM
	pwm_init();
     758:	0e 94 cd 05 	call	0xb9a	; 0xb9a <pwm_init>

	// set pwm scalar
	pwm_set_scalar(3);
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pwm_set_scalar>
    
    // init all the motor structs
    Motor* motor;
    for (uint8_t chan = 0; chan < MOTORS_CHANS; chan ++){
        motor = motors_get_motor(chan);
        motor->rpm_target = 0;
     762:	10 92 a1 01 	sts	0x01A1, r1
     766:	10 92 a0 01 	sts	0x01A0, r1
        motor->rpm_measured = 0;
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	a0 e0       	ldi	r26, 0x00	; 0
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	80 93 a2 01 	sts	0x01A2, r24
     776:	90 93 a3 01 	sts	0x01A3, r25
     77a:	a0 93 a4 01 	sts	0x01A4, r26
     77e:	b0 93 a5 01 	sts	0x01A5, r27
        motor->rpm_previous = 0;
     782:	80 93 a6 01 	sts	0x01A6, r24
     786:	90 93 a7 01 	sts	0x01A7, r25
     78a:	a0 93 a8 01 	sts	0x01A8, r26
     78e:	b0 93 a9 01 	sts	0x01A9, r27
        motor->rpm_delta = 0;
     792:	80 93 aa 01 	sts	0x01AA, r24
     796:	90 93 ab 01 	sts	0x01AB, r25
     79a:	a0 93 ac 01 	sts	0x01AC, r26
     79e:	b0 93 ad 01 	sts	0x01AD, r27
        motor->pwm = 0;
     7a2:	80 93 ae 01 	sts	0x01AE, r24
     7a6:	90 93 af 01 	sts	0x01AF, r25
     7aa:	a0 93 b0 01 	sts	0x01B0, r26
     7ae:	b0 93 b1 01 	sts	0x01B1, r27
        motor->dir_target = 0;
     7b2:	10 92 b2 01 	sts	0x01B2, r1
        motor->dir_measured = 0;        
     7b6:	10 92 b3 01 	sts	0x01B3, r1
    
    // init all the motor structs
    Motor* motor;
    for (uint8_t chan = 0; chan < MOTORS_CHANS; chan ++){
        motor = motors_get_motor(chan);
        motor->rpm_target = 0;
     7ba:	10 92 b5 01 	sts	0x01B5, r1
     7be:	10 92 b4 01 	sts	0x01B4, r1
        motor->rpm_measured = 0;
     7c2:	80 93 b6 01 	sts	0x01B6, r24
     7c6:	90 93 b7 01 	sts	0x01B7, r25
     7ca:	a0 93 b8 01 	sts	0x01B8, r26
     7ce:	b0 93 b9 01 	sts	0x01B9, r27
        motor->rpm_previous = 0;
     7d2:	80 93 ba 01 	sts	0x01BA, r24
     7d6:	90 93 bb 01 	sts	0x01BB, r25
     7da:	a0 93 bc 01 	sts	0x01BC, r26
     7de:	b0 93 bd 01 	sts	0x01BD, r27
        motor->rpm_delta = 0;
     7e2:	80 93 be 01 	sts	0x01BE, r24
     7e6:	90 93 bf 01 	sts	0x01BF, r25
     7ea:	a0 93 c0 01 	sts	0x01C0, r26
     7ee:	b0 93 c1 01 	sts	0x01C1, r27
        motor->pwm = 0;
     7f2:	80 93 c2 01 	sts	0x01C2, r24
     7f6:	90 93 c3 01 	sts	0x01C3, r25
     7fa:	a0 93 c4 01 	sts	0x01C4, r26
     7fe:	b0 93 c5 01 	sts	0x01C5, r27
        motor->dir_target = 0;
     802:	10 92 c6 01 	sts	0x01C6, r1
        motor->dir_measured = 0;        
     806:	10 92 c7 01 	sts	0x01C7, r1
    }
}
     80a:	08 95       	ret

0000080c <crc16>:
	}
	return crc;
	
}

uint16_t crc16(char* s, uint8_t length){	
     80c:	dc 01       	movw	r26, r24
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	4f ef       	ldi	r20, 0xFF	; 255
     814:	5f ef       	ldi	r21, 0xFF	; 255

	uint16_t i;
	uint16_t crc;
	crc = 0xFFFF;
	for (i = 0; i < length; i++){
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	1d c0       	rjmp	.+58     	; 0x854 <crc16+0x48>
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     81a:	fd 01       	movw	r30, r26
     81c:	e2 0f       	add	r30, r18
     81e:	f3 1f       	adc	r31, r19
     820:	80 81       	ld	r24, Z
     822:	48 27       	eor	r20, r24
     824:	84 2f       	mov	r24, r20
     826:	82 95       	swap	r24
     828:	84 27       	eor	r24, r20
     82a:	08 2e       	mov	r0, r24
     82c:	86 95       	lsr	r24
     82e:	86 95       	lsr	r24
     830:	80 25       	eor	r24, r0
     832:	08 2e       	mov	r0, r24
     834:	86 95       	lsr	r24
     836:	80 25       	eor	r24, r0
     838:	87 70       	andi	r24, 0x07	; 7
     83a:	04 2e       	mov	r0, r20
     83c:	45 2f       	mov	r20, r21
     83e:	86 95       	lsr	r24
     840:	07 94       	ror	r0
     842:	87 95       	ror	r24
     844:	50 2d       	mov	r21, r0
     846:	48 27       	eor	r20, r24
     848:	06 94       	lsr	r0
     84a:	87 95       	ror	r24
     84c:	50 25       	eor	r21, r0
     84e:	48 27       	eor	r20, r24
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	26 17       	cp	r18, r22
     856:	37 07       	cpc	r19, r23
     858:	00 f3       	brcs	.-64     	; 0x81a <crc16+0xe>
		crc = _crc16_update	(crc, s[i]);
	}
	return crc;
	
}
     85a:	ca 01       	movw	r24, r20
     85c:	08 95       	ret

0000085e <crc16ccitt>:
#include "../crc16.h"


uint16_t crc16ccitt(char* s){	
     85e:	bc 01       	movw	r22, r24

	static uint16_t i;
	static uint16_t crc = 0xFFFF;
	for (i = 0; i < strlen(s); i++){
     860:	10 92 c9 01 	sts	0x01C9, r1
     864:	10 92 c8 01 	sts	0x01C8, r1
     868:	23 c0       	rjmp	.+70     	; 0x8b0 <__stack+0x51>
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     86a:	fb 01       	movw	r30, r22
     86c:	e4 0f       	add	r30, r20
     86e:	f5 1f       	adc	r31, r21
     870:	20 81       	ld	r18, Z
     872:	80 91 60 00 	lds	r24, 0x0060
     876:	90 91 61 00 	lds	r25, 0x0061
     87a:	82 27       	eor	r24, r18
     87c:	08 2e       	mov	r0, r24
     87e:	82 95       	swap	r24
     880:	80 7f       	andi	r24, 0xF0	; 240
     882:	80 25       	eor	r24, r0
     884:	09 2e       	mov	r0, r25
     886:	98 2f       	mov	r25, r24
     888:	82 95       	swap	r24
     88a:	8f 70       	andi	r24, 0x0F	; 15
     88c:	08 26       	eor	r0, r24
     88e:	86 95       	lsr	r24
     890:	98 27       	eor	r25, r24
     892:	89 27       	eor	r24, r25
     894:	88 0f       	add	r24, r24
     896:	88 0f       	add	r24, r24
     898:	88 0f       	add	r24, r24
     89a:	80 25       	eor	r24, r0
		crc = _crc_ccitt_update	(crc, s[i]);
     89c:	90 93 61 00 	sts	0x0061, r25
     8a0:	80 93 60 00 	sts	0x0060, r24

uint16_t crc16ccitt(char* s){	

	static uint16_t i;
	static uint16_t crc = 0xFFFF;
	for (i = 0; i < strlen(s); i++){
     8a4:	4f 5f       	subi	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	50 93 c9 01 	sts	0x01C9, r21
     8ac:	40 93 c8 01 	sts	0x01C8, r20
     8b0:	40 91 c8 01 	lds	r20, 0x01C8
     8b4:	50 91 c9 01 	lds	r21, 0x01C9
     8b8:	fb 01       	movw	r30, r22
     8ba:	01 90       	ld	r0, Z+
     8bc:	00 20       	and	r0, r0
     8be:	e9 f7       	brne	.-6      	; 0x8ba <__stack+0x5b>
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	e6 1b       	sub	r30, r22
     8c4:	f7 0b       	sbc	r31, r23
     8c6:	4e 17       	cp	r20, r30
     8c8:	5f 07       	cpc	r21, r31
     8ca:	08 f4       	brcc	.+2      	; 0x8ce <__stack+0x6f>
     8cc:	ce cf       	rjmp	.-100    	; 0x86a <__stack+0xb>
		crc = _crc_ccitt_update	(crc, s[i]);
	}
	return crc;
	
}
     8ce:	80 91 60 00 	lds	r24, 0x0060
     8d2:	90 91 61 00 	lds	r25, 0x0061
     8d6:	08 95       	ret

000008d8 <Packets_getError>:
	return &error;
}

uint8_t Packets_getError(){
	uint8_t* error = Packets_error();
	uint8_t value = *error;
     8d8:	80 91 ca 01 	lds	r24, 0x01CA
	*error = 0x00;
     8dc:	10 92 ca 01 	sts	0x01CA, r1
	return value;
}
     8e0:	08 95       	ret

000008e2 <Packets_getQueue>:

}



Queue* Packets_getQueue(){
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	df 93       	push	r29
     8e8:	cf 93       	push	r28
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	29 97       	sbiw	r28, 0x09	; 9
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
	static Queue queue;
	static char is_created = 0x00;
	if (is_created == 0x00){
     8fa:	80 91 cb 01 	lds	r24, 0x01CB
     8fe:	88 23       	and	r24, r24
     900:	a1 f4       	brne	.+40     	; 0x92a <Packets_getQueue+0x48>
		// create the queue
		queue = Queue_create(10, sizeof (Packet) );
     902:	8e 01       	movw	r16, r28
     904:	0f 5f       	subi	r16, 0xFF	; 255
     906:	1f 4f       	sbci	r17, 0xFF	; 255
     908:	c8 01       	movw	r24, r16
     90a:	6a e0       	ldi	r22, 0x0A	; 10
     90c:	4c e0       	ldi	r20, 0x0C	; 12
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	0e 94 57 06 	call	0xcae	; 0xcae <Queue_create>
     914:	ac ec       	ldi	r26, 0xCC	; 204
     916:	b1 e0       	ldi	r27, 0x01	; 1
     918:	f8 01       	movw	r30, r16
     91a:	89 e0       	ldi	r24, 0x09	; 9
     91c:	01 90       	ld	r0, Z+
     91e:	0d 92       	st	X+, r0
     920:	81 50       	subi	r24, 0x01	; 1
     922:	e1 f7       	brne	.-8      	; 0x91c <Packets_getQueue+0x3a>
		is_created = 0x01;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 cb 01 	sts	0x01CB, r24
	}
	return &queue;
}
     92a:	8c ec       	ldi	r24, 0xCC	; 204
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	29 96       	adiw	r28, 0x09	; 9
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	cf 91       	pop	r28
     93c:	df 91       	pop	r29
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	08 95       	ret

00000944 <Packets_send>:
	packet.data[2] = error;
	packet.length = 3;
	Packets_send(packet);
}

void Packets_send(Packet packet){
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	df 93       	push	r29
     94e:	cf 93       	push	r28
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	6c 97       	sbiw	r28, 0x1c	; 28
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	e9 8a       	std	Y+17, r14	; 0x11
     962:	fa 8a       	std	Y+18, r15	; 0x12
     964:	0b 8b       	std	Y+19, r16	; 0x13
     966:	1c 8b       	std	Y+20, r17	; 0x14
     968:	2d 8b       	std	Y+21, r18	; 0x15
     96a:	3e 8b       	std	Y+22, r19	; 0x16
     96c:	4f 8b       	std	Y+23, r20	; 0x17
     96e:	58 8f       	std	Y+24, r21	; 0x18
     970:	69 8f       	std	Y+25, r22	; 0x19
     972:	7a 8f       	std	Y+26, r23	; 0x1a
     974:	8b 8f       	std	Y+27, r24	; 0x1b
     976:	9c 8f       	std	Y+28, r25	; 0x1c

	char buffer[PACKETS_MAXLENGTH+8];
	//char terminator[PACKETS_TERMINATOR_LEN] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	buffer[0] = PACKETS_SEND_ADD;
     978:	8a ef       	ldi	r24, 0xFA	; 250
     97a:	89 83       	std	Y+1, r24	; 0x01
	memcpy(&buffer[1], &packet.data[0], packet.length);
     97c:	8e 01       	movw	r16, r28
     97e:	0e 5f       	subi	r16, 0xFE	; 254
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	49 2f       	mov	r20, r25
     984:	9e 01       	movw	r18, r28
     986:	2e 5e       	subi	r18, 0xEE	; 238
     988:	3f 4f       	sbci	r19, 0xFF	; 255
     98a:	c8 01       	movw	r24, r16
     98c:	b9 01       	movw	r22, r18
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
	uint16_t crc = crc16(buffer, packet.length+1);
     994:	6c 8d       	ldd	r22, Y+28	; 0x1c
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7e 01       	movw	r14, r28
     99a:	08 94       	sec
     99c:	e1 1c       	adc	r14, r1
     99e:	f1 1c       	adc	r15, r1
     9a0:	c7 01       	movw	r24, r14
     9a2:	0e 94 06 04 	call	0x80c	; 0x80c <crc16>
	buffer[packet.length+1] = crc >> 8;
     9a6:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9a8:	e6 2f       	mov	r30, r22
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	0e 0f       	add	r16, r30
     9ae:	1f 1f       	adc	r17, r31
     9b0:	d8 01       	movw	r26, r16
     9b2:	9c 93       	st	X, r25
	buffer[packet.length+2] = crc & 0x00FF;
     9b4:	ec 0f       	add	r30, r28
     9b6:	fd 1f       	adc	r31, r29
     9b8:	83 83       	std	Z+3, r24	; 0x03
	//memcpy(&buffer[packet.length+3], &terminator, PACKETS_TERMINATOR_LEN);
	usart_send_by_length(buffer, packet.length+3);
     9ba:	6d 5f       	subi	r22, 0xFD	; 253
     9bc:	c7 01       	movw	r24, r14
     9be:	0e 94 70 07 	call	0xee0	; 0xee0 <usart_send_by_length>
}
     9c2:	6c 96       	adiw	r28, 0x1c	; 28
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	08 95       	ret

000009dc <Packets_sendError>:
	Packet packet;
	Queue_dequeue(queue, &packet);
	return packet;
}

void Packets_sendError(uint8_t feature, uint8_t error){
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	2c 97       	sbiw	r28, 0x0c	; 12
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61

	// send an error back over the stream
	Packet packet;
	packet.data[0] = PACKETS_ERRORCMD;
     9f8:	9f ef       	ldi	r25, 0xFF	; 255
     9fa:	9a 83       	std	Y+2, r25	; 0x02
	packet.data[1] = feature;
     9fc:	8b 83       	std	Y+3, r24	; 0x03
	packet.data[2] = error;
     9fe:	6c 83       	std	Y+4, r22	; 0x04
	packet.length = 3;
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	9c 87       	std	Y+12, r25	; 0x0c
	Packets_send(packet);
     a04:	e9 80       	ldd	r14, Y+1	; 0x01
     a06:	ff 24       	eor	r15, r15
     a08:	fa 94       	dec	r15
     a0a:	08 2f       	mov	r16, r24
     a0c:	16 2f       	mov	r17, r22
     a0e:	2d 81       	ldd	r18, Y+5	; 0x05
     a10:	3e 81       	ldd	r19, Y+6	; 0x06
     a12:	4f 81       	ldd	r20, Y+7	; 0x07
     a14:	58 85       	ldd	r21, Y+8	; 0x08
     a16:	69 85       	ldd	r22, Y+9	; 0x09
     a18:	7a 85       	ldd	r23, Y+10	; 0x0a
     a1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a1c:	0e 94 a2 04 	call	0x944	; 0x944 <Packets_send>
}
     a20:	2c 96       	adiw	r28, 0x0c	; 12
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	cf 91       	pop	r28
     a2e:	df 91       	pop	r29
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	08 95       	ret

00000a3a <Packets_getNext>:
	queue = Packets_getQueue();
	Queue_enqueue(queue, &packet);

}

Packet Packets_getNext(){
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	2c 97       	sbiw	r28, 0x0c	; 12
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	f8 2e       	mov	r15, r24
     a58:	e9 2e       	mov	r14, r25
	
	static Queue* queue; queue = Packets_getQueue();
     a5a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <Packets_getQueue>
     a5e:	90 93 d6 01 	sts	0x01D6, r25
     a62:	80 93 d5 01 	sts	0x01D5, r24
	Packet packet;
	Queue_dequeue(queue, &packet);
     a66:	8e 01       	movw	r16, r28
     a68:	0f 5f       	subi	r16, 0xFF	; 255
     a6a:	1f 4f       	sbci	r17, 0xFF	; 255
     a6c:	b8 01       	movw	r22, r16
     a6e:	0e 94 f5 05 	call	0xbea	; 0xbea <Queue_dequeue>
	return packet;
     a72:	2f 2d       	mov	r18, r15
     a74:	3e 2d       	mov	r19, r14
     a76:	c9 01       	movw	r24, r18
     a78:	dc 01       	movw	r26, r24
     a7a:	f8 01       	movw	r30, r16
     a7c:	8c e0       	ldi	r24, 0x0C	; 12
     a7e:	01 90       	ld	r0, Z+
     a80:	0d 92       	st	X+, r0
     a82:	81 50       	subi	r24, 0x01	; 1
     a84:	e1 f7       	brne	.-8      	; 0xa7e <Packets_getNext+0x44>
}
     a86:	8f 2d       	mov	r24, r15
     a88:	9e 2d       	mov	r25, r14
     a8a:	2c 96       	adiw	r28, 0x0c	; 12
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	cf 91       	pop	r28
     a98:	df 91       	pop	r29
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	08 95       	ret

00000aa4 <Packets_rxCallback>:

// set an error
static void Packets_setError(uint8_t value);

// parse a recieved byte stream for packets
void Packets_rxCallback(char* rx, uint8_t length){
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	2c 97       	sbiw	r28, 0x0c	; 12
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	8c 01       	movw	r16, r24
	
	length -= PACKETS_TERMINATOR_LEN;
     aca:	9b ef       	ldi	r25, 0xFB	; 251
     acc:	c9 2e       	mov	r12, r25
     ace:	c6 0e       	add	r12, r22
	uint8_t crc_high = length-2;
     ad0:	36 2f       	mov	r19, r22
     ad2:	37 50       	subi	r19, 0x07	; 7
	uint8_t crc_low = length-1;
     ad4:	8a ef       	ldi	r24, 0xFA	; 250
     ad6:	d8 2e       	mov	r13, r24
     ad8:	d6 0e       	add	r13, r22
	
	Packet packet;
	packet.crc = 0;
     ada:	1b 86       	std	Y+11, r1	; 0x0b
     adc:	1a 86       	std	Y+10, r1	; 0x0a
	packet.length = length-3;
     ade:	68 50       	subi	r22, 0x08	; 8
     ae0:	6c 87       	std	Y+12, r22	; 0x0c
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
		else if (i == crc_high){
			packet.crc = rx[i]; 
			packet.crc = packet.crc << 8 ; 
		}
		else if (i == crc_low) packet.crc += rx[i];
		else packet.data[i-1] = rx[i]; 
     ae6:	5e 01       	movw	r10, r28
     ae8:	08 94       	sec
     aea:	a1 1c       	adc	r10, r1
     aec:	b1 1c       	adc	r11, r1
		if (i == 0) packet.address = rx[i]; 
		else if (i == crc_high){
			packet.crc = rx[i]; 
			packet.crc = packet.crc << 8 ; 
		}
		else if (i == crc_low) packet.crc += rx[i];
     aee:	78 01       	movw	r14, r16
     af0:	ed 0c       	add	r14, r13
     af2:	f1 1c       	adc	r15, r1
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
		if (i == 0) packet.address = rx[i]; 
		else if (i == crc_high){
			packet.crc = rx[i]; 
     af4:	b8 01       	movw	r22, r16
     af6:	63 0f       	add	r22, r19
     af8:	71 1d       	adc	r23, r1
     afa:	22 c0       	rjmp	.+68     	; 0xb40 <Packets_rxCallback+0x9c>
	Packet packet;
	packet.crc = 0;
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
		if (i == 0) packet.address = rx[i]; 
     afc:	44 23       	and	r20, r20
     afe:	21 f4       	brne	.+8      	; 0xb08 <Packets_rxCallback+0x64>
     b00:	f8 01       	movw	r30, r16
     b02:	80 81       	ld	r24, Z
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	1a c0       	rjmp	.+52     	; 0xb3c <Packets_rxCallback+0x98>
		else if (i == crc_high){
     b08:	83 17       	cp	r24, r19
     b0a:	29 f4       	brne	.+10     	; 0xb16 <Packets_rxCallback+0x72>
			packet.crc = rx[i]; 
     b0c:	fb 01       	movw	r30, r22
     b0e:	80 81       	ld	r24, Z
			packet.crc = packet.crc << 8 ; 
     b10:	1a 86       	std	Y+10, r1	; 0x0a
     b12:	8b 87       	std	Y+11, r24	; 0x0b
     b14:	13 c0       	rjmp	.+38     	; 0xb3c <Packets_rxCallback+0x98>
		}
		else if (i == crc_low) packet.crc += rx[i];
     b16:	8d 15       	cp	r24, r13
     b18:	49 f4       	brne	.+18     	; 0xb2c <Packets_rxCallback+0x88>
     b1a:	f7 01       	movw	r30, r14
     b1c:	20 81       	ld	r18, Z
     b1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b20:	9b 85       	ldd	r25, Y+11	; 0x0b
     b22:	82 0f       	add	r24, r18
     b24:	91 1d       	adc	r25, r1
     b26:	9b 87       	std	Y+11, r25	; 0x0b
     b28:	8a 87       	std	Y+10, r24	; 0x0a
     b2a:	08 c0       	rjmp	.+16     	; 0xb3c <Packets_rxCallback+0x98>
		else packet.data[i-1] = rx[i]; 
     b2c:	f5 01       	movw	r30, r10
     b2e:	e4 0f       	add	r30, r20
     b30:	f5 1f       	adc	r31, r21
     b32:	d8 01       	movw	r26, r16
     b34:	a4 0f       	add	r26, r20
     b36:	b5 1f       	adc	r27, r21
     b38:	8c 91       	ld	r24, X
     b3a:	80 83       	st	Z, r24
     b3c:	4f 5f       	subi	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	84 2f       	mov	r24, r20
	
	Packet packet;
	packet.crc = 0;
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
     b42:	4c 15       	cp	r20, r12
     b44:	d8 f2       	brcs	.-74     	; 0xafc <Packets_rxCallback+0x58>
		else packet.data[i-1] = rx[i]; 
	}

		
	// check crc
	uint16_t crc = crc16(rx, length-2);
     b46:	c8 01       	movw	r24, r16
     b48:	63 2f       	mov	r22, r19
     b4a:	0e 94 06 04 	call	0x80c	; 0x80c <crc16>
	if (crc != packet.crc){
     b4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     b50:	3b 85       	ldd	r19, Y+11	; 0x0b
     b52:	82 17       	cp	r24, r18
     b54:	93 07       	cpc	r25, r19
     b56:	21 f0       	breq	.+8      	; 0xb60 <Packets_rxCallback+0xbc>
	return value;
}

static void Packets_setError(uint8_t value){
	uint8_t* error = Packets_error();
	*error = value;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 ca 01 	sts	0x01CA, r24
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <Packets_rxCallback+0xca>
	}
	
	

	Queue* queue; 
	queue = Packets_getQueue();
     b60:	0e 94 71 04 	call	0x8e2	; 0x8e2 <Packets_getQueue>
	Queue_enqueue(queue, &packet);
     b64:	be 01       	movw	r22, r28
     b66:	6f 5f       	subi	r22, 0xFF	; 255
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	0e 94 26 06 	call	0xc4c	; 0xc4c <Queue_enqueue>

}
     b6e:	2c 96       	adiw	r28, 0x0c	; 12
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	bf 90       	pop	r11
     b8c:	af 90       	pop	r10
     b8e:	08 95       	ret

00000b90 <usart_rx_callback>:
	usart_send_by_length(buffer, packet.length+3);
}

void usart_rx_callback(char *buffer, uint8_t length){

	cli();
     b90:	f8 94       	cli
	Packets_rxCallback(buffer, length);
     b92:	0e 94 52 05 	call	0xaa4	; 0xaa4 <Packets_rxCallback>
	sei();
     b96:	78 94       	sei

}
     b98:	08 95       	ret

00000b9a <pwm_init>:

// init PWM
void pwm_init(){
	
	// set  PORTB to output mode
	setbit(DDRD, BIT(DDD4) | BIT(DDD5));
     b9a:	81 b3       	in	r24, 0x11	; 17
     b9c:	80 63       	ori	r24, 0x30	; 48
     b9e:	81 bb       	out	0x11, r24	; 17
    
    // set initial values
    OCR1A = 0x00; // channel 1
     ba0:	1b bc       	out	0x2b, r1	; 43
     ba2:	1a bc       	out	0x2a, r1	; 42
    OCR1B = 0x00; // channel 2
     ba4:	19 bc       	out	0x29, r1	; 41
     ba6:	18 bc       	out	0x28, r1	; 40
    // enable output compare match channel A intterupt
    //setbit(TIMSK, BIT(OCIE1A));
    
    // initialize timer
    // 8 bit PWM non-inverted
	setbit(TCCR1A, BIT(COM1A1) | BIT(COM1B1) | BIT(WGM10) | BIT(WGM11));
     ba8:	8f b5       	in	r24, 0x2f	; 47
     baa:	83 6a       	ori	r24, 0xA3	; 163
     bac:	8f bd       	out	0x2f, r24	; 47
	
	// TCCR1A = 0xA1;
	
    // set scalar and kick off timer
    setbit(TCCR1B, BIT(CS10));
     bae:	8e b5       	in	r24, 0x2e	; 46
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	8e bd       	out	0x2e, r24	; 46
	//setbit(TCCR1B, 0x02);  
}
     bb4:	08 95       	ret

00000bb6 <pwm_set_scalar>:

// modify the pwn prescalar on the fly
void pwm_set_scalar(char scalar){	
	char temp = (TCCR1B & 0xF8);
     bb6:	9e b5       	in	r25, 0x2e	; 46
	TCCR1B =  temp| (scalar &= 0x07);
     bb8:	87 70       	andi	r24, 0x07	; 7
     bba:	98 7f       	andi	r25, 0xF8	; 248
     bbc:	89 2b       	or	r24, r25
     bbe:	8e bd       	out	0x2e, r24	; 46
} 
     bc0:	08 95       	ret

00000bc2 <pwm_set>:

// set a pwm channel to value
void pwm_set(char channel, uint16_t value){
    switch (channel){
     bc2:	88 23       	and	r24, r24
     bc4:	19 f0       	breq	.+6      	; 0xbcc <pwm_set+0xa>
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	31 f4       	brne	.+12     	; 0xbd6 <pwm_set+0x14>
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <pwm_set+0x10>
        case PWM_CHAN_A: OCR1A = value; break;
     bcc:	7b bd       	out	0x2b, r23	; 43
     bce:	6a bd       	out	0x2a, r22	; 42
     bd0:	08 95       	ret
        case PWM_CHAN_B: OCR1B = value; break;
     bd2:	79 bd       	out	0x29, r23	; 41
     bd4:	68 bd       	out	0x28, r22	; 40
     bd6:	08 95       	ret

00000bd8 <Queue_getCount>:
}

// get the current buffer size of the queue
uint8_t Queue_getCount(Queue *instance){
	return instance->count;
}
     bd8:	fc 01       	movw	r30, r24
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	08 95       	ret

00000bde <Queue_getError>:

// return the queue error and clear the current queue error
uint8_t Queue_getError(Queue *instance){
     bde:	fc 01       	movw	r30, r24
	static uint8_t error;
	error = instance->error;
     be0:	86 81       	ldd	r24, Z+6	; 0x06
     be2:	80 93 d7 01 	sts	0x01D7, r24
	instance->error = QUEUE_ERROR_NOERROR;
     be6:	16 82       	std	Z+6, r1	; 0x06
	return error; 
}
     be8:	08 95       	ret

00000bea <Queue_dequeue>:
}



// dequeue and return a value from the queue
void Queue_dequeue(Queue *instance, void* value){
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24

	static uint8_t temp;
	if (instance->count == 0){
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	88 23       	and	r24, r24
     bf4:	19 f4       	brne	.+6      	; 0xbfc <Queue_dequeue+0x12>
		instance->error = QUEUE_ERROR_QUEUEEMPTY;
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	8e 83       	std	Y+6, r24	; 0x06
     bfa:	25 c0       	rjmp	.+74     	; 0xc46 <Queue_dequeue+0x5c>
		//static QueueElement element;
		//return NULL;
		value = NULL;
		return;
	}
	temp = instance->out;
     bfc:	29 81       	ldd	r18, Y+1	; 0x01
     bfe:	20 93 d8 01 	sts	0x01D8, r18
	if (instance->out > (instance->size - 1) ) instance->out = 0;
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	28 17       	cp	r18, r24
     c0a:	39 07       	cpc	r19, r25
     c0c:	0c f0       	brlt	.+2      	; 0xc10 <Queue_dequeue+0x26>
     c0e:	19 82       	std	Y+1, r1	; 0x01
	memcpy(value, instance->queue + instance->out * instance->element_size, instance->element_size);
     c10:	ec 81       	ldd	r30, Y+4	; 0x04
     c12:	fd 81       	ldd	r31, Y+5	; 0x05
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	9c 01       	movw	r18, r24
     c1a:	2e 9f       	mul	r18, r30
     c1c:	c0 01       	movw	r24, r0
     c1e:	2f 9f       	mul	r18, r31
     c20:	90 0d       	add	r25, r0
     c22:	3e 9f       	mul	r19, r30
     c24:	90 0d       	add	r25, r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 81       	ldd	r18, Y+7	; 0x07
     c2a:	38 85       	ldd	r19, Y+8	; 0x08
     c2c:	28 0f       	add	r18, r24
     c2e:	39 1f       	adc	r19, r25
     c30:	cb 01       	movw	r24, r22
     c32:	b9 01       	movw	r22, r18
     c34:	af 01       	movw	r20, r30
     c36:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
	instance->count--;
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	81 50       	subi	r24, 0x01	; 1
     c3e:	8a 83       	std	Y+2, r24	; 0x02
	instance->out++;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	8f 5f       	subi	r24, 0xFF	; 255
     c44:	89 83       	std	Y+1, r24	; 0x01
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <Queue_enqueue>:

}


// Enqueue a new value into the queue
void Queue_enqueue(Queue *instance, void* value){
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24

	// check for overflowed queue
	if (instance->count + 1 > instance->size){
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	82 17       	cp	r24, r18
     c5e:	93 07       	cpc	r25, r19
     c60:	1c f0       	brlt	.+6      	; 0xc68 <Queue_enqueue+0x1c>
		instance->error = QUEUE_ERROR_QUEUEFULL;
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	8e 83       	std	Y+6, r24	; 0x06
     c66:	20 c0       	rjmp	.+64     	; 0xca8 <Queue_enqueue+0x5c>
		return;
	}

	// assign new queue value
	if (instance->in > (instance->size - 1) ) instance->in = 0;
     c68:	88 81       	ld	r24, Y
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	0c f0       	brlt	.+2      	; 0xc74 <Queue_enqueue+0x28>
     c72:	18 82       	st	Y, r1

	memcpy(instance->queue + instance->in * instance->element_size, value, instance->element_size);
     c74:	ec 81       	ldd	r30, Y+4	; 0x04
     c76:	fd 81       	ldd	r31, Y+5	; 0x05
     c78:	88 81       	ld	r24, Y
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9c 01       	movw	r18, r24
     c7e:	2e 9f       	mul	r18, r30
     c80:	c0 01       	movw	r24, r0
     c82:	2f 9f       	mul	r18, r31
     c84:	90 0d       	add	r25, r0
     c86:	3e 9f       	mul	r19, r30
     c88:	90 0d       	add	r25, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 81       	ldd	r18, Y+7	; 0x07
     c8e:	38 85       	ldd	r19, Y+8	; 0x08
     c90:	28 0f       	add	r18, r24
     c92:	39 1f       	adc	r19, r25
     c94:	c9 01       	movw	r24, r18
     c96:	af 01       	movw	r20, r30
     c98:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
	instance->in ++;	
     c9c:	88 81       	ld	r24, Y
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	88 83       	st	Y, r24
	instance->count ++;
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	8a 83       	std	Y+2, r24	; 0x02

}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <Queue_create>:
#include "../queue.h"

// Create a new queue
Queue Queue_create(uint8_t queue_size, size_t element_size){
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	ec 01       	movw	r28, r24
     cba:	f6 2e       	mov	r15, r22
     cbc:	8a 01       	movw	r16, r20
	instance.out = 0;
	instance.count = 0;
	instance.size = queue_size;
	instance.element_size = element_size;
	instance.error = QUEUE_ERROR_NOERROR;
	instance.queue = calloc(queue_size,  element_size);
     cbe:	86 2f       	mov	r24, r22
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	ba 01       	movw	r22, r20
     cc4:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <calloc>


	// check for malloc errors
	if (instance.queue == NULL){ 
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	29 f4       	brne	.+10     	; 0xcd6 <Queue_create+0x28>
		instance.error =  QUEUE_ERROR_MALLOC;
		return instance;
     ccc:	18 86       	std	Y+8, r1	; 0x08
     cce:	1f 82       	std	Y+7, r1	; 0x07
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	8e 83       	std	Y+6, r24	; 0x06
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <Queue_create+0x2e>
	}
	
	return instance;
     cd6:	98 87       	std	Y+8, r25	; 0x08
     cd8:	8f 83       	std	Y+7, r24	; 0x07
     cda:	1e 82       	std	Y+6, r1	; 0x06
     cdc:	1d 83       	std	Y+5, r17	; 0x05
     cde:	0c 83       	std	Y+4, r16	; 0x04
     ce0:	fb 82       	std	Y+3, r15	; 0x03
     ce2:	1a 82       	std	Y+2, r1	; 0x02
     ce4:	19 82       	std	Y+1, r1	; 0x01
     ce6:	18 82       	st	Y, r1

}
     ce8:	ce 01       	movw	r24, r28
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	08 95       	ret

00000cf6 <time_init>:
/* 
 * initialize and kick off the timer
 */
void time_init(){
    // initialize timer in normal mode with no scalar
    setbit(TIME_CONFIG, 2);
     cf6:	85 b5       	in	r24, 0x25	; 37
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	85 bd       	out	0x25, r24	; 37
    
    // set overflow interrupt
    setbit(TIMSK, BIT(TIME_OVFLOW_INTERRUPT));
     cfc:	89 b7       	in	r24, 0x39	; 57
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	89 bf       	out	0x39, r24	; 57
}
     d02:	08 95       	ret

00000d04 <__vector_5>:
/*
 * Interrupt
 * once ever TIME_TIMER_RESOLUTION clock cycles
 * increment the main timer
 */
ISR(TIME_INTERRUPT_VECT, ISR_NOBLOCK){
     d04:	78 94       	sei
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	2f 93       	push	r18
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
	uint32_t* time = time_get_time_counter();
    *time = *time + 1;
     d1a:	80 91 d9 01 	lds	r24, 0x01D9
     d1e:	90 91 da 01 	lds	r25, 0x01DA
     d22:	a0 91 db 01 	lds	r26, 0x01DB
     d26:	b0 91 dc 01 	lds	r27, 0x01DC
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	a1 1d       	adc	r26, r1
     d2e:	b1 1d       	adc	r27, r1
     d30:	80 93 d9 01 	sts	0x01D9, r24
     d34:	90 93 da 01 	sts	0x01DA, r25
     d38:	a0 93 db 01 	sts	0x01DB, r26
     d3c:	b0 93 dc 01 	sts	0x01DC, r27
    if (*time >= (uint32_t) TIME_MAINTIMEOVERFLOW){
     d40:	80 54       	subi	r24, 0x40	; 64
     d42:	92 44       	sbci	r25, 0x42	; 66
     d44:	af 40       	sbci	r26, 0x0F	; 15
     d46:	b0 40       	sbci	r27, 0x00	; 0
     d48:	40 f0       	brcs	.+16     	; 0xd5a <__vector_5+0x56>
		*time = 0;
     d4a:	10 92 d9 01 	sts	0x01D9, r1
     d4e:	10 92 da 01 	sts	0x01DA, r1
     d52:	10 92 db 01 	sts	0x01DB, r1
     d56:	10 92 dc 01 	sts	0x01DC, r1
	}
}
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <time_get_time>:
 * get current time
 */
uint32_t time_get_time(){
    uint32_t* time = time_get_time_counter();
    uint32_t buffer = 0;
    buffer = (*time << 8) + (uint32_t) TIME_PRECISION_TIMER;
     d6e:	84 b5       	in	r24, 0x24	; 36
     d70:	20 91 d9 01 	lds	r18, 0x01D9
     d74:	30 91 da 01 	lds	r19, 0x01DA
     d78:	40 91 db 01 	lds	r20, 0x01DB
     d7c:	50 91 dc 01 	lds	r21, 0x01DC
     d80:	54 2f       	mov	r21, r20
     d82:	43 2f       	mov	r20, r19
     d84:	32 2f       	mov	r19, r18
     d86:	22 27       	eor	r18, r18
     d88:	28 0f       	add	r18, r24
     d8a:	31 1d       	adc	r19, r1
     d8c:	41 1d       	adc	r20, r1
     d8e:	51 1d       	adc	r21, r1
    return buffer;    
}
     d90:	b9 01       	movw	r22, r18
     d92:	ca 01       	movw	r24, r20
     d94:	08 95       	ret

00000d96 <time_get_time_delta>:

/* 
 * get a time delta, 
 * also returns current time so to not miss time with a subsequent time_get_time() call
 */
TimeResult time_get_time_delta(uint32_t previous){
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	28 97       	sbiw	r28, 0x08	; 8
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	ab 01       	movw	r20, r22
     db4:	bc 01       	movw	r22, r24
 * get current time
 */
uint32_t time_get_time(){
    uint32_t* time = time_get_time_counter();
    uint32_t buffer = 0;
    buffer = (*time << 8) + (uint32_t) TIME_PRECISION_TIMER;
     db6:	24 b5       	in	r18, 0x24	; 36
     db8:	80 91 d9 01 	lds	r24, 0x01D9
     dbc:	90 91 da 01 	lds	r25, 0x01DA
     dc0:	a0 91 db 01 	lds	r26, 0x01DB
     dc4:	b0 91 dc 01 	lds	r27, 0x01DC
     dc8:	ba 2f       	mov	r27, r26
     dca:	a9 2f       	mov	r26, r25
     dcc:	98 2f       	mov	r25, r24
     dce:	88 27       	eor	r24, r24
     dd0:	82 0f       	add	r24, r18
     dd2:	91 1d       	adc	r25, r1
     dd4:	a1 1d       	adc	r26, r1
     dd6:	b1 1d       	adc	r27, r1
 * also returns current time so to not miss time with a subsequent time_get_time() call
 */
TimeResult time_get_time_delta(uint32_t previous){
    TimeResult result;
    uint32_t current = time_get_time();
    if (current > previous) result.delta = current - previous;
     dd8:	48 17       	cp	r20, r24
     dda:	59 07       	cpc	r21, r25
     ddc:	6a 07       	cpc	r22, r26
     dde:	7b 07       	cpc	r23, r27
     de0:	48 f4       	brcc	.+18     	; 0xdf4 <time_get_time_delta+0x5e>
     de2:	7c 01       	movw	r14, r24
     de4:	8d 01       	movw	r16, r26
     de6:	e4 1a       	sub	r14, r20
     de8:	f5 0a       	sbc	r15, r21
     dea:	06 0b       	sbc	r16, r22
     dec:	17 0b       	sbc	r17, r23
     dee:	a8 01       	movw	r20, r16
     df0:	97 01       	movw	r18, r14
     df2:	10 c0       	rjmp	.+32     	; 0xe14 <time_get_time_delta+0x7e>
    else result.delta = (uint32_t) TIME_MAINTIMEOVERFLOW * TIME_TIMER_RESOLUTION - previous + current;
     df4:	80 50       	subi	r24, 0x00	; 0
     df6:	90 4c       	sbci	r25, 0xC0	; 192
     df8:	ad 4b       	sbci	r26, 0xBD	; 189
     dfa:	b0 4f       	sbci	r27, 0xF0	; 240
     dfc:	7c 01       	movw	r14, r24
     dfe:	8d 01       	movw	r16, r26
     e00:	e4 1a       	sub	r14, r20
     e02:	f5 0a       	sbc	r15, r21
     e04:	06 0b       	sbc	r16, r22
     e06:	17 0b       	sbc	r17, r23
     e08:	a8 01       	movw	r20, r16
     e0a:	97 01       	movw	r18, r14
     e0c:	80 50       	subi	r24, 0x00	; 0
     e0e:	90 44       	sbci	r25, 0x40	; 64
     e10:	a2 44       	sbci	r26, 0x42	; 66
     e12:	bf 40       	sbci	r27, 0x0F	; 15
    result.previous = current;
    return result;
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	af 83       	std	Y+7, r26	; 0x07
     e1a:	b8 87       	std	Y+8, r27	; 0x08
     e1c:	29 83       	std	Y+1, r18	; 0x01
     e1e:	3a 83       	std	Y+2, r19	; 0x02
     e20:	4b 83       	std	Y+3, r20	; 0x03
     e22:	5c 83       	std	Y+4, r21	; 0x04
     e24:	3a 81       	ldd	r19, Y+2	; 0x02
     e26:	4b 81       	ldd	r20, Y+3	; 0x03
     e28:	5c 81       	ldd	r21, Y+4	; 0x04
     e2a:	68 2f       	mov	r22, r24
     e2c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     e2e:	8f 81       	ldd	r24, Y+7	; 0x07
     e30:	98 85       	ldd	r25, Y+8	; 0x08
     e32:	28 96       	adiw	r28, 0x08	; 8
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	08 95       	ret

00000e4c <get_time_in_ms>:

/* 
 * view a time in seconds
 */
double get_time_in_ms(uint32_t time){
    if (time == 0) time = time_get_time();
     e4c:	61 15       	cp	r22, r1
     e4e:	71 05       	cpc	r23, r1
     e50:	81 05       	cpc	r24, r1
     e52:	91 05       	cpc	r25, r1
     e54:	89 f4       	brne	.+34     	; 0xe78 <get_time_in_ms+0x2c>
 * get current time
 */
uint32_t time_get_time(){
    uint32_t* time = time_get_time_counter();
    uint32_t buffer = 0;
    buffer = (*time << 8) + (uint32_t) TIME_PRECISION_TIMER;
     e56:	24 b5       	in	r18, 0x24	; 36
     e58:	80 91 d9 01 	lds	r24, 0x01D9
     e5c:	90 91 da 01 	lds	r25, 0x01DA
     e60:	a0 91 db 01 	lds	r26, 0x01DB
     e64:	b0 91 dc 01 	lds	r27, 0x01DC
     e68:	66 27       	eor	r22, r22
     e6a:	78 2f       	mov	r23, r24
     e6c:	89 2f       	mov	r24, r25
     e6e:	9a 2f       	mov	r25, r26
     e70:	62 0f       	add	r22, r18
     e72:	71 1d       	adc	r23, r1
     e74:	81 1d       	adc	r24, r1
     e76:	91 1d       	adc	r25, r1
     e78:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__floatunsisf>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	34 e2       	ldi	r19, 0x24	; 36
     e80:	44 e7       	ldi	r20, 0x74	; 116
     e82:	5b e4       	ldi	r21, 0x4B	; 75
     e84:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	4a e7       	ldi	r20, 0x7A	; 122
     e9a:	54 e4       	ldi	r21, 0x44	; 68
     e9c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulsf3>
 * view a time in seconds
 */
double get_time_in_ms(uint32_t time){
    if (time == 0) time = time_get_time();
    return (double) time / F_CPU * TIME_SCALAR * 1000;
}
     ea0:	08 95       	ret

00000ea2 <time_get_time_counter>:
 * get main timer address, used internally
 */
uint32_t* time_get_time_counter(){
    static uint32_t time = 0;
    return &time;
}
     ea2:	89 ed       	ldi	r24, 0xD9	; 217
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	08 95       	ret

00000ea8 <usart_init>:
char usart_rxbuff[32];
uint8_t usart_position;

void usart_init(){
    
    UBRRH = UBRRH_VALUE;
     ea8:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
     eaa:	82 e2       	ldi	r24, 0x22	; 34
     eac:	89 b9       	out	0x09, r24	; 9
    #if USE_2X
    setbit(UCSRA, BIT(U2X));
     eae:	59 9a       	sbi	0x0b, 1	; 11
    #else
    clearbit(UCSRA, BIT(U2X));
    #endif

	// Enable receiver and transmitter
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
     eb0:	8a b1       	in	r24, 0x0a	; 10
     eb2:	88 69       	ori	r24, 0x98	; 152
     eb4:	8a b9       	out	0x0a, r24	; 10
}
     eb6:	08 95       	ret

00000eb8 <usart_putchr>:

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     eb8:	5d 9b       	sbis	0x0b, 5	; 11
     eba:	fe cf       	rjmp	.-4      	; 0xeb8 <usart_putchr>
	UDR = c;
     ebc:	8c b9       	out	0x0c, r24	; 12
}
     ebe:	08 95       	ret

00000ec0 <usart_send>:

void usart_send(const char *s){
     ec0:	fc 01       	movw	r30, r24
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     ec2:	9d e0       	ldi	r25, 0x0D	; 13
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <usart_send+0x18>
}

void usart_send(const char *s){
	RETURN_IF_AVRSIM;
	while (*s){
		if (*s == '\n') usart_putchr('\r');
     ec6:	8a 30       	cpi	r24, 0x0A	; 10
     ec8:	19 f4       	brne	.+6      	; 0xed0 <usart_send+0x10>
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     eca:	5d 9b       	sbis	0x0b, 5	; 11
     ecc:	fe cf       	rjmp	.-4      	; 0xeca <usart_send+0xa>
	UDR = c;
     ece:	9c b9       	out	0x0c, r25	; 12
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     ed0:	5d 9b       	sbis	0x0b, 5	; 11
     ed2:	fe cf       	rjmp	.-4      	; 0xed0 <usart_send+0x10>

void usart_send(const char *s){
	RETURN_IF_AVRSIM;
	while (*s){
		if (*s == '\n') usart_putchr('\r');
      	usart_putchr(*s++);
     ed4:	31 96       	adiw	r30, 0x01	; 1
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     ed6:	8c b9       	out	0x0c, r24	; 12
}

void usart_send(const char *s){
	RETURN_IF_AVRSIM;
	while (*s){
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	a1 f7       	brne	.-24     	; 0xec6 <usart_send+0x6>
		if (*s == '\n') usart_putchr('\r');
      	usart_putchr(*s++);
    }
}
     ede:	08 95       	ret

00000ee0 <usart_send_by_length>:

void usart_send_by_length(const char *s, uint8_t length){
     ee0:	fc 01       	movw	r30, r24
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <usart_send_by_length+0x12>
	RETURN_IF_AVRSIM;
	static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	for (uint8_t i = 0; i < length; i++){
		usart_putchr(s[i]);
     ee6:	90 81       	ld	r25, Z
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     ee8:	5d 9b       	sbis	0x0b, 5	; 11
     eea:	fe cf       	rjmp	.-4      	; 0xee8 <usart_send_by_length+0x8>
	UDR = c;
     eec:	9c b9       	out	0x0c, r25	; 12
}

void usart_send_by_length(const char *s, uint8_t length){
	RETURN_IF_AVRSIM;
	static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	for (uint8_t i = 0; i < length; i++){
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	31 96       	adiw	r30, 0x01	; 1
     ef2:	86 17       	cp	r24, r22
     ef4:	c0 f3       	brcs	.-16     	; 0xee6 <usart_send_by_length+0x6>
     ef6:	ef e6       	ldi	r30, 0x6F	; 111
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
		usart_putchr(s[i]);
	}
	for (uint8_t i = 0; i < 5; i ++){
		usart_putchr(terminator[i]);
     efa:	80 81       	ld	r24, Z
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     efc:	5d 9b       	sbis	0x0b, 5	; 11
     efe:	fe cf       	rjmp	.-4      	; 0xefc <usart_send_by_length+0x1c>
	UDR = c;
     f00:	8c b9       	out	0x0c, r24	; 12
     f02:	31 96       	adiw	r30, 0x01	; 1
	RETURN_IF_AVRSIM;
	static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	for (uint8_t i = 0; i < length; i++){
		usart_putchr(s[i]);
	}
	for (uint8_t i = 0; i < 5; i ++){
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	e4 37       	cpi	r30, 0x74	; 116
     f08:	f8 07       	cpc	r31, r24
     f0a:	b9 f7       	brne	.-18     	; 0xefa <usart_send_by_length+0x1a>
		usart_putchr(terminator[i]);
	}
}
     f0c:	08 95       	ret

00000f0e <usart_psend>:

void usart_psend(const char *s){
     f0e:	fc 01       	movw	r30, r24
	RETURN_IF_AVRSIM;
    static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	char c;
    for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s)){
     f10:	84 91       	lpm	r24, Z+
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <usart_psend+0x10>
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     f14:	5d 9b       	sbis	0x0b, 5	; 11
     f16:	fe cf       	rjmp	.-4      	; 0xf14 <usart_psend+0x6>
	UDR = c;
     f18:	8c b9       	out	0x0c, r24	; 12

void usart_psend(const char *s){
	RETURN_IF_AVRSIM;
    static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	char c;
    for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s)){
     f1a:	31 96       	adiw	r30, 0x01	; 1
     f1c:	84 91       	lpm	r24, Z+
     f1e:	88 23       	and	r24, r24
     f20:	c9 f7       	brne	.-14     	; 0xf14 <usart_psend+0x6>
     f22:	ea e6       	ldi	r30, 0x6A	; 106
     f24:	f0 e0       	ldi	r31, 0x00	; 0
        usart_putchr(c);
    }
	for (uint8_t i = 0; i < 5; i ++){
		usart_putchr(terminator[i])	;	
     f26:	80 81       	ld	r24, Z
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     f28:	5d 9b       	sbis	0x0b, 5	; 11
     f2a:	fe cf       	rjmp	.-4      	; 0xf28 <usart_psend+0x1a>
	UDR = c;
     f2c:	8c b9       	out	0x0c, r24	; 12
     f2e:	31 96       	adiw	r30, 0x01	; 1
    static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	char c;
    for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s)){
        usart_putchr(c);
    }
	for (uint8_t i = 0; i < 5; i ++){
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	ef 36       	cpi	r30, 0x6F	; 111
     f34:	f8 07       	cpc	r31, r24
     f36:	b9 f7       	brne	.-18     	; 0xf26 <usart_psend+0x18>
		usart_putchr(terminator[i])	;	
	}


}
     f38:	08 95       	ret

00000f3a <usart_print_int32_hex>:
	usart_send_by_length(str, strlen(str));	
	
}


void usart_print_int32_hex(uint32_t v){
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	c0 54       	subi	r28, 0x40	; 64
     f48:	d0 40       	sbci	r29, 0x00	; 0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
	RETURN_IF_AVRSIM;
	char str[64] = "";
     f54:	19 82       	std	Y+1, r1	; 0x01
     f56:	1a 82       	std	Y+2, r1	; 0x02
     f58:	1b 82       	std	Y+3, r1	; 0x03
     f5a:	1c 82       	std	Y+4, r1	; 0x04
     f5c:	fe 01       	movw	r30, r28
     f5e:	35 96       	adiw	r30, 0x05	; 5
     f60:	2c e3       	ldi	r18, 0x3C	; 60
     f62:	df 01       	movw	r26, r30
     f64:	1d 92       	st	X+, r1
     f66:	2a 95       	dec	r18
     f68:	e9 f7       	brne	.-6      	; 0xf64 <usart_print_int32_hex+0x2a>
	sprintf(str, "%" PRIX32, v);
     f6a:	2d b7       	in	r18, 0x3d	; 61
     f6c:	3e b7       	in	r19, 0x3e	; 62
     f6e:	28 50       	subi	r18, 0x08	; 8
     f70:	30 40       	sbci	r19, 0x00	; 0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	3e bf       	out	0x3e, r19	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	2d bf       	out	0x3d, r18	; 61
     f7c:	ed b7       	in	r30, 0x3d	; 61
     f7e:	fe b7       	in	r31, 0x3e	; 62
     f80:	31 96       	adiw	r30, 0x01	; 1
     f82:	8e 01       	movw	r16, r28
     f84:	0f 5f       	subi	r16, 0xFF	; 255
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	ad b7       	in	r26, 0x3d	; 61
     f8a:	be b7       	in	r27, 0x3e	; 62
     f8c:	12 96       	adiw	r26, 0x02	; 2
     f8e:	1c 93       	st	X, r17
     f90:	0e 93       	st	-X, r16
     f92:	11 97       	sbiw	r26, 0x01	; 1
     f94:	22 e6       	ldi	r18, 0x62	; 98
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	33 83       	std	Z+3, r19	; 0x03
     f9a:	22 83       	std	Z+2, r18	; 0x02
     f9c:	64 83       	std	Z+4, r22	; 0x04
     f9e:	75 83       	std	Z+5, r23	; 0x05
     fa0:	86 83       	std	Z+6, r24	; 0x06
     fa2:	97 83       	std	Z+7, r25	; 0x07
     fa4:	0e 94 1b 11 	call	0x2236	; 0x2236 <sprintf>
	usart_send_by_length(str, strlen(str));	
     fa8:	f8 01       	movw	r30, r16
     faa:	01 90       	ld	r0, Z+
     fac:	00 20       	and	r0, r0
     fae:	e9 f7       	brne	.-6      	; 0xfaa <usart_print_int32_hex+0x70>
     fb0:	31 97       	sbiw	r30, 0x01	; 1
     fb2:	e0 1b       	sub	r30, r16
     fb4:	f1 0b       	sbc	r31, r17
     fb6:	2d b7       	in	r18, 0x3d	; 61
     fb8:	3e b7       	in	r19, 0x3e	; 62
     fba:	28 5f       	subi	r18, 0xF8	; 248
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	3e bf       	out	0x3e, r19	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	2d bf       	out	0x3d, r18	; 61
     fc8:	c8 01       	movw	r24, r16
     fca:	6e 2f       	mov	r22, r30
     fcc:	0e 94 70 07 	call	0xee0	; 0xee0 <usart_send_by_length>
	
}
     fd0:	c0 5c       	subi	r28, 0xC0	; 192
     fd2:	df 4f       	sbci	r29, 0xFF	; 255
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	08 95       	ret

00000fe8 <usart_print_int32>:
	
}



void usart_print_int32(uint32_t v){
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	c0 54       	subi	r28, 0x40	; 64
     ff6:	d0 40       	sbci	r29, 0x00	; 0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
    1006:	5d 9b       	sbis	0x0b, 5	; 11
    1008:	fe cf       	rjmp	.-4      	; 0x1006 <usart_print_int32+0x1e>
	UDR = c;
    100a:	8e e3       	ldi	r24, 0x3E	; 62
    100c:	8c b9       	out	0x0c, r24	; 12
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
    100e:	5d 9b       	sbis	0x0b, 5	; 11
    1010:	fe cf       	rjmp	.-4      	; 0x100e <usart_print_int32+0x26>
	UDR = c;
    1012:	8e e3       	ldi	r24, 0x3E	; 62
    1014:	8c b9       	out	0x0c, r24	; 12

void usart_print_int32(uint32_t v){
	RETURN_IF_AVRSIM;
	usart_putchr('>');
	usart_putchr('>');
	char str[64] = "";
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	1a 82       	std	Y+2, r1	; 0x02
    101a:	1b 82       	std	Y+3, r1	; 0x03
    101c:	1c 82       	std	Y+4, r1	; 0x04
    101e:	fe 01       	movw	r30, r28
    1020:	35 96       	adiw	r30, 0x05	; 5
    1022:	8c e3       	ldi	r24, 0x3C	; 60
    1024:	df 01       	movw	r26, r30
    1026:	1d 92       	st	X+, r1
    1028:	8a 95       	dec	r24
    102a:	e9 f7       	brne	.-6      	; 0x1026 <usart_print_int32+0x3e>
	sprintf(str, "%" PRIi32, v);
    102c:	8d b7       	in	r24, 0x3d	; 61
    102e:	9e b7       	in	r25, 0x3e	; 62
    1030:	08 97       	sbiw	r24, 0x08	; 8
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	9e bf       	out	0x3e, r25	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	8d bf       	out	0x3d, r24	; 61
    103c:	ed b7       	in	r30, 0x3d	; 61
    103e:	fe b7       	in	r31, 0x3e	; 62
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	8e 01       	movw	r16, r28
    1044:	0f 5f       	subi	r16, 0xFF	; 255
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	ad b7       	in	r26, 0x3d	; 61
    104a:	be b7       	in	r27, 0x3e	; 62
    104c:	12 96       	adiw	r26, 0x02	; 2
    104e:	1c 93       	st	X, r17
    1050:	0e 93       	st	-X, r16
    1052:	11 97       	sbiw	r26, 0x01	; 1
    1054:	86 e6       	ldi	r24, 0x66	; 102
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	93 83       	std	Z+3, r25	; 0x03
    105a:	82 83       	std	Z+2, r24	; 0x02
    105c:	24 83       	std	Z+4, r18	; 0x04
    105e:	35 83       	std	Z+5, r19	; 0x05
    1060:	46 83       	std	Z+6, r20	; 0x06
    1062:	57 83       	std	Z+7, r21	; 0x07
    1064:	0e 94 1b 11 	call	0x2236	; 0x2236 <sprintf>
	usart_send_by_length(str, strlen(str));	
    1068:	f8 01       	movw	r30, r16
    106a:	01 90       	ld	r0, Z+
    106c:	00 20       	and	r0, r0
    106e:	e9 f7       	brne	.-6      	; 0x106a <usart_print_int32+0x82>
    1070:	31 97       	sbiw	r30, 0x01	; 1
    1072:	e0 1b       	sub	r30, r16
    1074:	f1 0b       	sbc	r31, r17
    1076:	8d b7       	in	r24, 0x3d	; 61
    1078:	9e b7       	in	r25, 0x3e	; 62
    107a:	08 96       	adiw	r24, 0x08	; 8
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	9e bf       	out	0x3e, r25	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	8d bf       	out	0x3d, r24	; 61
    1086:	c8 01       	movw	r24, r16
    1088:	6e 2f       	mov	r22, r30
    108a:	0e 94 70 07 	call	0xee0	; 0xee0 <usart_send_by_length>
	
}
    108e:	c0 5c       	subi	r28, 0xC0	; 192
    1090:	df 4f       	sbci	r29, 0xFF	; 255
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	08 95       	ret

000010a6 <usart_parse_rx>:
	uint8_t c;
	c = UDR;
	usart_parse_rx(c);
}

void usart_parse_rx(uint8_t c){
    10a6:	1f 93       	push	r17
    10a8:	18 2f       	mov	r17, r24
	
	// detect packet trailer 0x00 0xFF 0xFF 0xFF 0xFF
	// small finite state machine here
	static uint8_t trailer = 0;

	if (c == 0x00) trailer = 1;
    10aa:	88 23       	and	r24, r24
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <usart_parse_rx+0xc>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <usart_parse_rx+0x1a>
	else if (c == 0xFF && trailer > 0) trailer ++;
    10b2:	8f 3f       	cpi	r24, 0xFF	; 255
    10b4:	41 f4       	brne	.+16     	; 0x10c6 <usart_parse_rx+0x20>
    10b6:	80 91 dd 01 	lds	r24, 0x01DD
    10ba:	88 23       	and	r24, r24
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <usart_parse_rx+0x20>
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	80 93 dd 01 	sts	0x01DD, r24
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <usart_parse_rx+0x24>
	else trailer = 0;   
    10c6:	10 92 dd 01 	sts	0x01DD, r1
	
	if (trailer > 4){
    10ca:	80 91 dd 01 	lds	r24, 0x01DD
    10ce:	60 91 e0 01 	lds	r22, 0x01E0
    10d2:	85 30       	cpi	r24, 0x05	; 5
    10d4:	50 f0       	brcs	.+20     	; 0x10ea <usart_parse_rx+0x44>
		trailer = 0;
    10d6:	10 92 dd 01 	sts	0x01DD, r1
		usart_rx_callback(usart_rxbuff, usart_position+1);
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	81 ee       	ldi	r24, 0xE1	; 225
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 c8 05 	call	0xb90	; 0xb90 <usart_rx_callback>
		usart_position = 0;
    10e4:	10 92 e0 01 	sts	0x01E0, r1
    10e8:	10 c0       	rjmp	.+32     	; 0x110a <usart_parse_rx+0x64>
    	return;
	}

	usart_position ++;
    10ea:	86 2f       	mov	r24, r22
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	80 93 e0 01 	sts	0x01E0, r24
    
    if (usart_position >= 64){
    10f2:	80 34       	cpi	r24, 0x40	; 64
    10f4:	20 f0       	brcs	.+8      	; 0x10fe <usart_parse_rx+0x58>
        usart_psend(PSTR("!buffer_full\n"));
    10f6:	84 e5       	ldi	r24, 0x54	; 84
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 87 07 	call	0xf0e	; 0xf0e <usart_psend>
    }
    
    usart_rxbuff[usart_position-1] = c;		
    10fe:	e0 91 e0 01 	lds	r30, 0x01E0
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	e0 52       	subi	r30, 0x20	; 32
    1106:	fe 4f       	sbci	r31, 0xFE	; 254
    1108:	10 83       	st	Z, r17
	
}
    110a:	1f 91       	pop	r17
    110c:	08 95       	ret

0000110e <__vector_13>:


}


ISR(USART_RXC_vect){
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    
    if (!bit_is_clear(UCSRA, FE)){
    1130:	5c 9b       	sbis	0x0b, 4	; 11
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <__vector_13+0x34>
 		usart_position = 0;
    1134:	10 92 e0 01 	sts	0x01E0, r1
		usart_psend(PSTR("!framing_error\n"));
    1138:	82 e6       	ldi	r24, 0x62	; 98
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 87 07 	call	0xf0e	; 0xf0e <usart_psend>
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <__vector_13+0x3a>
        return;
    }

	uint8_t c;
	c = UDR;
    1142:	8c b1       	in	r24, 0x0c	; 12
	usart_parse_rx(c);
    1144:	0e 94 53 08 	call	0x10a6	; 0x10a6 <usart_parse_rx>
}
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <__vector_16>:
#include "../analoginput.h"

uint16_t ADC_RESULT = 0x00;


ISR(ADC_vect){
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    ADC_RESULT = 0x01;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	90 93 df 01 	sts	0x01DF, r25
    1180:	80 93 de 01 	sts	0x01DE, r24
}
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <analoginput_init>:

void analoginput_init(){
    
    // AVCC with external capacitor at AREF pin
	setbit(ADMUX, BIT(REFS0));	
    1192:	3e 9a       	sbi	0x07, 6	; 7
	
	// ADC Enable
	setbit(ADCSRA, BIT(ADEN) | BIT (ADIE) | BIT(ADPS2) | BIT(ADPS1));// | BIT (ADPS0));
    1194:	86 b1       	in	r24, 0x06	; 6
    1196:	8e 68       	ori	r24, 0x8E	; 142
    1198:	86 b9       	out	0x06, r24	; 6
}
    119a:	08 95       	ret

0000119c <analoginput_get>:

uint16_t analoginput_get(uint8_t chan){
    ADMUX = (ADMUX & 0xE0) | chan;
    119c:	97 b1       	in	r25, 0x07	; 7
    119e:	90 7e       	andi	r25, 0xE0	; 224
    11a0:	98 2b       	or	r25, r24
    11a2:	97 b9       	out	0x07, r25	; 7
    setbit(ADCSRA, BIT(ADSC));
    11a4:	36 9a       	sbi	0x06, 6	; 6
    for (uint8_t i = 0; i < 255; i ++){
		if (ADC_RESULT) break;
    11a6:	80 91 de 01 	lds	r24, 0x01DE
    11aa:	90 91 df 01 	lds	r25, 0x01DF
    11ae:	89 2b       	or	r24, r25
    11b0:	21 f4       	brne	.+8      	; 0x11ba <analoginput_get+0x1e>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
}

uint16_t analoginput_get(uint8_t chan){
    ADMUX = (ADMUX & 0xE0) | chan;
    setbit(ADCSRA, BIT(ADSC));
    for (uint8_t i = 0; i < 255; i ++){
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	8f 3f       	cpi	r24, 0xFF	; 255
    11b8:	e9 f7       	brne	.-6      	; 0x11b4 <analoginput_get+0x18>
		if (ADC_RESULT) break;
	}
    ADC_RESULT = 0x00;
    11ba:	10 92 df 01 	sts	0x01DF, r1
    11be:	10 92 de 01 	sts	0x01DE, r1
    return ADC;
    11c2:	24 b1       	in	r18, 0x04	; 4
    11c4:	35 b1       	in	r19, 0x05	; 5
}
    11c6:	c9 01       	movw	r24, r18
    11c8:	08 95       	ret

000011ca <__fixunssfsi>:
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	7b 01       	movw	r14, r22
    11d4:	8c 01       	movw	r16, r24
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	5f e4       	ldi	r21, 0x4F	; 79
    11de:	0e 94 91 0c 	call	0x1922	; 0x1922 <__gesf2>
    11e2:	88 23       	and	r24, r24
    11e4:	8c f0       	brlt	.+34     	; 0x1208 <__fixunssfsi+0x3e>
    11e6:	c8 01       	movw	r24, r16
    11e8:	b7 01       	movw	r22, r14
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	5f e4       	ldi	r21, 0x4F	; 79
    11f2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__subsf3>
    11f6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixsfsi>
    11fa:	9b 01       	movw	r18, r22
    11fc:	ac 01       	movw	r20, r24
    11fe:	20 50       	subi	r18, 0x00	; 0
    1200:	30 40       	sbci	r19, 0x00	; 0
    1202:	40 40       	sbci	r20, 0x00	; 0
    1204:	50 48       	sbci	r21, 0x80	; 128
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <__fixunssfsi+0x4a>
    1208:	c8 01       	movw	r24, r16
    120a:	b7 01       	movw	r22, r14
    120c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixsfsi>
    1210:	9b 01       	movw	r18, r22
    1212:	ac 01       	movw	r20, r24
    1214:	b9 01       	movw	r22, r18
    1216:	ca 01       	movw	r24, r20
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	08 95       	ret

00001222 <_fpadd_parts>:
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e1       	ldi	r30, 0x17	; 23
    1228:	f9 e0       	ldi	r31, 0x09	; 9
    122a:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__>
    122e:	dc 01       	movw	r26, r24
    1230:	2b 01       	movw	r4, r22
    1232:	fa 01       	movw	r30, r20
    1234:	9c 91       	ld	r25, X
    1236:	92 30       	cpi	r25, 0x02	; 2
    1238:	08 f4       	brcc	.+2      	; 0x123c <_fpadd_parts+0x1a>
    123a:	39 c1       	rjmp	.+626    	; 0x14ae <_fpadd_parts+0x28c>
    123c:	eb 01       	movw	r28, r22
    123e:	88 81       	ld	r24, Y
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	08 f4       	brcc	.+2      	; 0x1246 <_fpadd_parts+0x24>
    1244:	33 c1       	rjmp	.+614    	; 0x14ac <_fpadd_parts+0x28a>
    1246:	94 30       	cpi	r25, 0x04	; 4
    1248:	69 f4       	brne	.+26     	; 0x1264 <_fpadd_parts+0x42>
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	09 f0       	breq	.+2      	; 0x1250 <_fpadd_parts+0x2e>
    124e:	2f c1       	rjmp	.+606    	; 0x14ae <_fpadd_parts+0x28c>
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	9c 91       	ld	r25, X
    1254:	11 97       	sbiw	r26, 0x01	; 1
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	98 17       	cp	r25, r24
    125a:	09 f4       	brne	.+2      	; 0x125e <_fpadd_parts+0x3c>
    125c:	28 c1       	rjmp	.+592    	; 0x14ae <_fpadd_parts+0x28c>
    125e:	a4 e7       	ldi	r26, 0x74	; 116
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	25 c1       	rjmp	.+586    	; 0x14ae <_fpadd_parts+0x28c>
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	09 f4       	brne	.+2      	; 0x126a <_fpadd_parts+0x48>
    1268:	21 c1       	rjmp	.+578    	; 0x14ac <_fpadd_parts+0x28a>
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	a9 f4       	brne	.+42     	; 0x1298 <_fpadd_parts+0x76>
    126e:	92 30       	cpi	r25, 0x02	; 2
    1270:	09 f0       	breq	.+2      	; 0x1274 <_fpadd_parts+0x52>
    1272:	1d c1       	rjmp	.+570    	; 0x14ae <_fpadd_parts+0x28c>
    1274:	9a 01       	movw	r18, r20
    1276:	ad 01       	movw	r20, r26
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	ea 01       	movw	r28, r20
    127c:	09 90       	ld	r0, Y+
    127e:	ae 01       	movw	r20, r28
    1280:	e9 01       	movw	r28, r18
    1282:	09 92       	st	Y+, r0
    1284:	9e 01       	movw	r18, r28
    1286:	81 50       	subi	r24, 0x01	; 1
    1288:	c1 f7       	brne	.-16     	; 0x127a <_fpadd_parts+0x58>
    128a:	e2 01       	movw	r28, r4
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	11 96       	adiw	r26, 0x01	; 1
    1290:	9c 91       	ld	r25, X
    1292:	89 23       	and	r24, r25
    1294:	81 83       	std	Z+1, r24	; 0x01
    1296:	08 c1       	rjmp	.+528    	; 0x14a8 <_fpadd_parts+0x286>
    1298:	92 30       	cpi	r25, 0x02	; 2
    129a:	09 f4       	brne	.+2      	; 0x129e <_fpadd_parts+0x7c>
    129c:	07 c1       	rjmp	.+526    	; 0x14ac <_fpadd_parts+0x28a>
    129e:	12 96       	adiw	r26, 0x02	; 2
    12a0:	2d 90       	ld	r2, X+
    12a2:	3c 90       	ld	r3, X
    12a4:	13 97       	sbiw	r26, 0x03	; 3
    12a6:	eb 01       	movw	r28, r22
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	14 96       	adiw	r26, 0x04	; 4
    12ae:	ad 90       	ld	r10, X+
    12b0:	bd 90       	ld	r11, X+
    12b2:	cd 90       	ld	r12, X+
    12b4:	dc 90       	ld	r13, X
    12b6:	17 97       	sbiw	r26, 0x07	; 7
    12b8:	ec 80       	ldd	r14, Y+4	; 0x04
    12ba:	fd 80       	ldd	r15, Y+5	; 0x05
    12bc:	0e 81       	ldd	r16, Y+6	; 0x06
    12be:	1f 81       	ldd	r17, Y+7	; 0x07
    12c0:	91 01       	movw	r18, r2
    12c2:	28 1b       	sub	r18, r24
    12c4:	39 0b       	sbc	r19, r25
    12c6:	b9 01       	movw	r22, r18
    12c8:	37 ff       	sbrs	r19, 7
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <_fpadd_parts+0xb2>
    12cc:	66 27       	eor	r22, r22
    12ce:	77 27       	eor	r23, r23
    12d0:	62 1b       	sub	r22, r18
    12d2:	73 0b       	sbc	r23, r19
    12d4:	60 32       	cpi	r22, 0x20	; 32
    12d6:	71 05       	cpc	r23, r1
    12d8:	0c f0       	brlt	.+2      	; 0x12dc <_fpadd_parts+0xba>
    12da:	61 c0       	rjmp	.+194    	; 0x139e <_fpadd_parts+0x17c>
    12dc:	12 16       	cp	r1, r18
    12de:	13 06       	cpc	r1, r19
    12e0:	6c f5       	brge	.+90     	; 0x133c <_fpadd_parts+0x11a>
    12e2:	37 01       	movw	r6, r14
    12e4:	48 01       	movw	r8, r16
    12e6:	06 2e       	mov	r0, r22
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <_fpadd_parts+0xd0>
    12ea:	96 94       	lsr	r9
    12ec:	87 94       	ror	r8
    12ee:	77 94       	ror	r7
    12f0:	67 94       	ror	r6
    12f2:	0a 94       	dec	r0
    12f4:	d2 f7       	brpl	.-12     	; 0x12ea <_fpadd_parts+0xc8>
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <_fpadd_parts+0xe6>
    1300:	22 0f       	add	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	44 1f       	adc	r20, r20
    1306:	55 1f       	adc	r21, r21
    1308:	6a 95       	dec	r22
    130a:	d2 f7       	brpl	.-12     	; 0x1300 <_fpadd_parts+0xde>
    130c:	21 50       	subi	r18, 0x01	; 1
    130e:	30 40       	sbci	r19, 0x00	; 0
    1310:	40 40       	sbci	r20, 0x00	; 0
    1312:	50 40       	sbci	r21, 0x00	; 0
    1314:	2e 21       	and	r18, r14
    1316:	3f 21       	and	r19, r15
    1318:	40 23       	and	r20, r16
    131a:	51 23       	and	r21, r17
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	41 05       	cpc	r20, r1
    1322:	51 05       	cpc	r21, r1
    1324:	21 f0       	breq	.+8      	; 0x132e <_fpadd_parts+0x10c>
    1326:	21 e0       	ldi	r18, 0x01	; 1
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	79 01       	movw	r14, r18
    1330:	8a 01       	movw	r16, r20
    1332:	e6 28       	or	r14, r6
    1334:	f7 28       	or	r15, r7
    1336:	08 29       	or	r16, r8
    1338:	19 29       	or	r17, r9
    133a:	3c c0       	rjmp	.+120    	; 0x13b4 <_fpadd_parts+0x192>
    133c:	23 2b       	or	r18, r19
    133e:	d1 f1       	breq	.+116    	; 0x13b4 <_fpadd_parts+0x192>
    1340:	26 0e       	add	r2, r22
    1342:	37 1e       	adc	r3, r23
    1344:	35 01       	movw	r6, r10
    1346:	46 01       	movw	r8, r12
    1348:	06 2e       	mov	r0, r22
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <_fpadd_parts+0x132>
    134c:	96 94       	lsr	r9
    134e:	87 94       	ror	r8
    1350:	77 94       	ror	r7
    1352:	67 94       	ror	r6
    1354:	0a 94       	dec	r0
    1356:	d2 f7       	brpl	.-12     	; 0x134c <_fpadd_parts+0x12a>
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	04 c0       	rjmp	.+8      	; 0x136a <_fpadd_parts+0x148>
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	44 1f       	adc	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	6a 95       	dec	r22
    136c:	d2 f7       	brpl	.-12     	; 0x1362 <_fpadd_parts+0x140>
    136e:	21 50       	subi	r18, 0x01	; 1
    1370:	30 40       	sbci	r19, 0x00	; 0
    1372:	40 40       	sbci	r20, 0x00	; 0
    1374:	50 40       	sbci	r21, 0x00	; 0
    1376:	2a 21       	and	r18, r10
    1378:	3b 21       	and	r19, r11
    137a:	4c 21       	and	r20, r12
    137c:	5d 21       	and	r21, r13
    137e:	21 15       	cp	r18, r1
    1380:	31 05       	cpc	r19, r1
    1382:	41 05       	cpc	r20, r1
    1384:	51 05       	cpc	r21, r1
    1386:	21 f0       	breq	.+8      	; 0x1390 <_fpadd_parts+0x16e>
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	59 01       	movw	r10, r18
    1392:	6a 01       	movw	r12, r20
    1394:	a6 28       	or	r10, r6
    1396:	b7 28       	or	r11, r7
    1398:	c8 28       	or	r12, r8
    139a:	d9 28       	or	r13, r9
    139c:	0b c0       	rjmp	.+22     	; 0x13b4 <_fpadd_parts+0x192>
    139e:	82 15       	cp	r24, r2
    13a0:	93 05       	cpc	r25, r3
    13a2:	2c f0       	brlt	.+10     	; 0x13ae <_fpadd_parts+0x18c>
    13a4:	1c 01       	movw	r2, r24
    13a6:	aa 24       	eor	r10, r10
    13a8:	bb 24       	eor	r11, r11
    13aa:	65 01       	movw	r12, r10
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <_fpadd_parts+0x192>
    13ae:	ee 24       	eor	r14, r14
    13b0:	ff 24       	eor	r15, r15
    13b2:	87 01       	movw	r16, r14
    13b4:	11 96       	adiw	r26, 0x01	; 1
    13b6:	9c 91       	ld	r25, X
    13b8:	d2 01       	movw	r26, r4
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	8c 91       	ld	r24, X
    13be:	98 17       	cp	r25, r24
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <_fpadd_parts+0x1a2>
    13c2:	45 c0       	rjmp	.+138    	; 0x144e <_fpadd_parts+0x22c>
    13c4:	99 23       	and	r25, r25
    13c6:	39 f0       	breq	.+14     	; 0x13d6 <_fpadd_parts+0x1b4>
    13c8:	a8 01       	movw	r20, r16
    13ca:	97 01       	movw	r18, r14
    13cc:	2a 19       	sub	r18, r10
    13ce:	3b 09       	sbc	r19, r11
    13d0:	4c 09       	sbc	r20, r12
    13d2:	5d 09       	sbc	r21, r13
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <_fpadd_parts+0x1c0>
    13d6:	a6 01       	movw	r20, r12
    13d8:	95 01       	movw	r18, r10
    13da:	2e 19       	sub	r18, r14
    13dc:	3f 09       	sbc	r19, r15
    13de:	40 0b       	sbc	r20, r16
    13e0:	51 0b       	sbc	r21, r17
    13e2:	57 fd       	sbrc	r21, 7
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <_fpadd_parts+0x1d4>
    13e6:	11 82       	std	Z+1, r1	; 0x01
    13e8:	33 82       	std	Z+3, r3	; 0x03
    13ea:	22 82       	std	Z+2, r2	; 0x02
    13ec:	24 83       	std	Z+4, r18	; 0x04
    13ee:	35 83       	std	Z+5, r19	; 0x05
    13f0:	46 83       	std	Z+6, r20	; 0x06
    13f2:	57 83       	std	Z+7, r21	; 0x07
    13f4:	1d c0       	rjmp	.+58     	; 0x1430 <_fpadd_parts+0x20e>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	81 83       	std	Z+1, r24	; 0x01
    13fa:	33 82       	std	Z+3, r3	; 0x03
    13fc:	22 82       	std	Z+2, r2	; 0x02
    13fe:	88 27       	eor	r24, r24
    1400:	99 27       	eor	r25, r25
    1402:	dc 01       	movw	r26, r24
    1404:	82 1b       	sub	r24, r18
    1406:	93 0b       	sbc	r25, r19
    1408:	a4 0b       	sbc	r26, r20
    140a:	b5 0b       	sbc	r27, r21
    140c:	84 83       	std	Z+4, r24	; 0x04
    140e:	95 83       	std	Z+5, r25	; 0x05
    1410:	a6 83       	std	Z+6, r26	; 0x06
    1412:	b7 83       	std	Z+7, r27	; 0x07
    1414:	0d c0       	rjmp	.+26     	; 0x1430 <_fpadd_parts+0x20e>
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	44 1f       	adc	r20, r20
    141c:	55 1f       	adc	r21, r21
    141e:	24 83       	std	Z+4, r18	; 0x04
    1420:	35 83       	std	Z+5, r19	; 0x05
    1422:	46 83       	std	Z+6, r20	; 0x06
    1424:	57 83       	std	Z+7, r21	; 0x07
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	93 83       	std	Z+3, r25	; 0x03
    142e:	82 83       	std	Z+2, r24	; 0x02
    1430:	24 81       	ldd	r18, Z+4	; 0x04
    1432:	35 81       	ldd	r19, Z+5	; 0x05
    1434:	46 81       	ldd	r20, Z+6	; 0x06
    1436:	57 81       	ldd	r21, Z+7	; 0x07
    1438:	da 01       	movw	r26, r20
    143a:	c9 01       	movw	r24, r18
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	a1 09       	sbc	r26, r1
    1440:	b1 09       	sbc	r27, r1
    1442:	8f 5f       	subi	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	af 4f       	sbci	r26, 0xFF	; 255
    1448:	bf 43       	sbci	r27, 0x3F	; 63
    144a:	28 f3       	brcs	.-54     	; 0x1416 <_fpadd_parts+0x1f4>
    144c:	0b c0       	rjmp	.+22     	; 0x1464 <_fpadd_parts+0x242>
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	33 82       	std	Z+3, r3	; 0x03
    1452:	22 82       	std	Z+2, r2	; 0x02
    1454:	ea 0c       	add	r14, r10
    1456:	fb 1c       	adc	r15, r11
    1458:	0c 1d       	adc	r16, r12
    145a:	1d 1d       	adc	r17, r13
    145c:	e4 82       	std	Z+4, r14	; 0x04
    145e:	f5 82       	std	Z+5, r15	; 0x05
    1460:	06 83       	std	Z+6, r16	; 0x06
    1462:	17 83       	std	Z+7, r17	; 0x07
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	80 83       	st	Z, r24
    1468:	24 81       	ldd	r18, Z+4	; 0x04
    146a:	35 81       	ldd	r19, Z+5	; 0x05
    146c:	46 81       	ldd	r20, Z+6	; 0x06
    146e:	57 81       	ldd	r21, Z+7	; 0x07
    1470:	57 ff       	sbrs	r21, 7
    1472:	1a c0       	rjmp	.+52     	; 0x14a8 <_fpadd_parts+0x286>
    1474:	c9 01       	movw	r24, r18
    1476:	aa 27       	eor	r26, r26
    1478:	97 fd       	sbrc	r25, 7
    147a:	a0 95       	com	r26
    147c:	ba 2f       	mov	r27, r26
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	90 70       	andi	r25, 0x00	; 0
    1482:	a0 70       	andi	r26, 0x00	; 0
    1484:	b0 70       	andi	r27, 0x00	; 0
    1486:	56 95       	lsr	r21
    1488:	47 95       	ror	r20
    148a:	37 95       	ror	r19
    148c:	27 95       	ror	r18
    148e:	82 2b       	or	r24, r18
    1490:	93 2b       	or	r25, r19
    1492:	a4 2b       	or	r26, r20
    1494:	b5 2b       	or	r27, r21
    1496:	84 83       	std	Z+4, r24	; 0x04
    1498:	95 83       	std	Z+5, r25	; 0x05
    149a:	a6 83       	std	Z+6, r26	; 0x06
    149c:	b7 83       	std	Z+7, r27	; 0x07
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	93 83       	std	Z+3, r25	; 0x03
    14a6:	82 83       	std	Z+2, r24	; 0x02
    14a8:	df 01       	movw	r26, r30
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <_fpadd_parts+0x28c>
    14ac:	d2 01       	movw	r26, r4
    14ae:	cd 01       	movw	r24, r26
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	e2 e1       	ldi	r30, 0x12	; 18
    14b6:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__>

000014ba <__subsf3>:
    14ba:	a0 e2       	ldi	r26, 0x20	; 32
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e3 e6       	ldi	r30, 0x63	; 99
    14c0:	fa e0       	ldi	r31, 0x0A	; 10
    14c2:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
    14c6:	69 83       	std	Y+1, r22	; 0x01
    14c8:	7a 83       	std	Y+2, r23	; 0x02
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	2d 83       	std	Y+5, r18	; 0x05
    14d0:	3e 83       	std	Y+6, r19	; 0x06
    14d2:	4f 83       	std	Y+7, r20	; 0x07
    14d4:	58 87       	std	Y+8, r21	; 0x08
    14d6:	e9 e0       	ldi	r30, 0x09	; 9
    14d8:	ee 2e       	mov	r14, r30
    14da:	f1 2c       	mov	r15, r1
    14dc:	ec 0e       	add	r14, r28
    14de:	fd 1e       	adc	r15, r29
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	b7 01       	movw	r22, r14
    14e6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    14ea:	8e 01       	movw	r16, r28
    14ec:	0f 5e       	subi	r16, 0xEF	; 239
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
    14f0:	ce 01       	movw	r24, r28
    14f2:	05 96       	adiw	r24, 0x05	; 5
    14f4:	b8 01       	movw	r22, r16
    14f6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    14fa:	8a 89       	ldd	r24, Y+18	; 0x12
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	89 27       	eor	r24, r25
    1500:	8a 8b       	std	Y+18, r24	; 0x12
    1502:	c7 01       	movw	r24, r14
    1504:	b8 01       	movw	r22, r16
    1506:	ae 01       	movw	r20, r28
    1508:	47 5e       	subi	r20, 0xE7	; 231
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	0e 94 11 09 	call	0x1222	; 0x1222 <_fpadd_parts>
    1510:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__pack_f>
    1514:	a0 96       	adiw	r28, 0x20	; 32
    1516:	e6 e0       	ldi	r30, 0x06	; 6
    1518:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

0000151c <__addsf3>:
    151c:	a0 e2       	ldi	r26, 0x20	; 32
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e9       	ldi	r30, 0x94	; 148
    1522:	fa e0       	ldi	r31, 0x0A	; 10
    1524:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
    1528:	69 83       	std	Y+1, r22	; 0x01
    152a:	7a 83       	std	Y+2, r23	; 0x02
    152c:	8b 83       	std	Y+3, r24	; 0x03
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	2d 83       	std	Y+5, r18	; 0x05
    1532:	3e 83       	std	Y+6, r19	; 0x06
    1534:	4f 83       	std	Y+7, r20	; 0x07
    1536:	58 87       	std	Y+8, r21	; 0x08
    1538:	f9 e0       	ldi	r31, 0x09	; 9
    153a:	ef 2e       	mov	r14, r31
    153c:	f1 2c       	mov	r15, r1
    153e:	ec 0e       	add	r14, r28
    1540:	fd 1e       	adc	r15, r29
    1542:	ce 01       	movw	r24, r28
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	b7 01       	movw	r22, r14
    1548:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    154c:	8e 01       	movw	r16, r28
    154e:	0f 5e       	subi	r16, 0xEF	; 239
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	ce 01       	movw	r24, r28
    1554:	05 96       	adiw	r24, 0x05	; 5
    1556:	b8 01       	movw	r22, r16
    1558:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    155c:	c7 01       	movw	r24, r14
    155e:	b8 01       	movw	r22, r16
    1560:	ae 01       	movw	r20, r28
    1562:	47 5e       	subi	r20, 0xE7	; 231
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	0e 94 11 09 	call	0x1222	; 0x1222 <_fpadd_parts>
    156a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__pack_f>
    156e:	a0 96       	adiw	r28, 0x20	; 32
    1570:	e6 e0       	ldi	r30, 0x06	; 6
    1572:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

00001576 <__mulsf3>:
    1576:	a0 e2       	ldi	r26, 0x20	; 32
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 ec       	ldi	r30, 0xC1	; 193
    157c:	fa e0       	ldi	r31, 0x0A	; 10
    157e:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__>
    1582:	69 83       	std	Y+1, r22	; 0x01
    1584:	7a 83       	std	Y+2, r23	; 0x02
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	2d 83       	std	Y+5, r18	; 0x05
    158c:	3e 83       	std	Y+6, r19	; 0x06
    158e:	4f 83       	std	Y+7, r20	; 0x07
    1590:	58 87       	std	Y+8, r21	; 0x08
    1592:	ce 01       	movw	r24, r28
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	be 01       	movw	r22, r28
    1598:	67 5f       	subi	r22, 0xF7	; 247
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    15a0:	ce 01       	movw	r24, r28
    15a2:	05 96       	adiw	r24, 0x05	; 5
    15a4:	be 01       	movw	r22, r28
    15a6:	6f 5e       	subi	r22, 0xEF	; 239
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    15ae:	99 85       	ldd	r25, Y+9	; 0x09
    15b0:	92 30       	cpi	r25, 0x02	; 2
    15b2:	88 f0       	brcs	.+34     	; 0x15d6 <__mulsf3+0x60>
    15b4:	89 89       	ldd	r24, Y+17	; 0x11
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	c8 f0       	brcs	.+50     	; 0x15ec <__mulsf3+0x76>
    15ba:	94 30       	cpi	r25, 0x04	; 4
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <__mulsf3+0x4e>
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	51 f4       	brne	.+20     	; 0x15d6 <__mulsf3+0x60>
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <__mulsf3+0x56>
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	29 f4       	brne	.+10     	; 0x15d2 <__mulsf3+0x5c>
    15c8:	92 30       	cpi	r25, 0x02	; 2
    15ca:	81 f4       	brne	.+32     	; 0x15ec <__mulsf3+0x76>
    15cc:	84 e7       	ldi	r24, 0x74	; 116
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	c6 c0       	rjmp	.+396    	; 0x175e <__mulsf3+0x1e8>
    15d2:	92 30       	cpi	r25, 0x02	; 2
    15d4:	49 f4       	brne	.+18     	; 0x15e8 <__mulsf3+0x72>
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	8a 89       	ldd	r24, Y+18	; 0x12
    15dc:	98 13       	cpse	r25, r24
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	2a 87       	std	Y+10, r18	; 0x0a
    15e2:	ce 01       	movw	r24, r28
    15e4:	09 96       	adiw	r24, 0x09	; 9
    15e6:	bb c0       	rjmp	.+374    	; 0x175e <__mulsf3+0x1e8>
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	49 f4       	brne	.+18     	; 0x15fe <__mulsf3+0x88>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	8a 89       	ldd	r24, Y+18	; 0x12
    15f2:	98 13       	cpse	r25, r24
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    15f6:	2a 8b       	std	Y+18, r18	; 0x12
    15f8:	ce 01       	movw	r24, r28
    15fa:	41 96       	adiw	r24, 0x11	; 17
    15fc:	b0 c0       	rjmp	.+352    	; 0x175e <__mulsf3+0x1e8>
    15fe:	2d 84       	ldd	r2, Y+13	; 0x0d
    1600:	3e 84       	ldd	r3, Y+14	; 0x0e
    1602:	4f 84       	ldd	r4, Y+15	; 0x0f
    1604:	58 88       	ldd	r5, Y+16	; 0x10
    1606:	6d 88       	ldd	r6, Y+21	; 0x15
    1608:	7e 88       	ldd	r7, Y+22	; 0x16
    160a:	8f 88       	ldd	r8, Y+23	; 0x17
    160c:	98 8c       	ldd	r9, Y+24	; 0x18
    160e:	ee 24       	eor	r14, r14
    1610:	ff 24       	eor	r15, r15
    1612:	87 01       	movw	r16, r14
    1614:	aa 24       	eor	r10, r10
    1616:	bb 24       	eor	r11, r11
    1618:	65 01       	movw	r12, r10
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	e0 e0       	ldi	r30, 0x00	; 0
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	c1 01       	movw	r24, r2
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	89 2b       	or	r24, r25
    162e:	e9 f0       	breq	.+58     	; 0x166a <__mulsf3+0xf4>
    1630:	e6 0c       	add	r14, r6
    1632:	f7 1c       	adc	r15, r7
    1634:	08 1d       	adc	r16, r8
    1636:	19 1d       	adc	r17, r9
    1638:	9a 01       	movw	r18, r20
    163a:	ab 01       	movw	r20, r22
    163c:	2a 0d       	add	r18, r10
    163e:	3b 1d       	adc	r19, r11
    1640:	4c 1d       	adc	r20, r12
    1642:	5d 1d       	adc	r21, r13
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e6 14       	cp	r14, r6
    164e:	f7 04       	cpc	r15, r7
    1650:	08 05       	cpc	r16, r8
    1652:	19 05       	cpc	r17, r9
    1654:	20 f4       	brcc	.+8      	; 0x165e <__mulsf3+0xe8>
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ba 01       	movw	r22, r20
    1660:	a9 01       	movw	r20, r18
    1662:	48 0f       	add	r20, r24
    1664:	59 1f       	adc	r21, r25
    1666:	6a 1f       	adc	r22, r26
    1668:	7b 1f       	adc	r23, r27
    166a:	aa 0c       	add	r10, r10
    166c:	bb 1c       	adc	r11, r11
    166e:	cc 1c       	adc	r12, r12
    1670:	dd 1c       	adc	r13, r13
    1672:	97 fe       	sbrs	r9, 7
    1674:	08 c0       	rjmp	.+16     	; 0x1686 <__mulsf3+0x110>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	a8 2a       	or	r10, r24
    1680:	b9 2a       	or	r11, r25
    1682:	ca 2a       	or	r12, r26
    1684:	db 2a       	or	r13, r27
    1686:	31 96       	adiw	r30, 0x01	; 1
    1688:	e0 32       	cpi	r30, 0x20	; 32
    168a:	f1 05       	cpc	r31, r1
    168c:	49 f0       	breq	.+18     	; 0x16a0 <__mulsf3+0x12a>
    168e:	66 0c       	add	r6, r6
    1690:	77 1c       	adc	r7, r7
    1692:	88 1c       	adc	r8, r8
    1694:	99 1c       	adc	r9, r9
    1696:	56 94       	lsr	r5
    1698:	47 94       	ror	r4
    169a:	37 94       	ror	r3
    169c:	27 94       	ror	r2
    169e:	c3 cf       	rjmp	.-122    	; 0x1626 <__mulsf3+0xb0>
    16a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    16a2:	ea 89       	ldd	r30, Y+18	; 0x12
    16a4:	2b 89       	ldd	r18, Y+19	; 0x13
    16a6:	3c 89       	ldd	r19, Y+20	; 0x14
    16a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ac:	28 0f       	add	r18, r24
    16ae:	39 1f       	adc	r19, r25
    16b0:	2e 5f       	subi	r18, 0xFE	; 254
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	17 c0       	rjmp	.+46     	; 0x16e4 <__mulsf3+0x16e>
    16b6:	ca 01       	movw	r24, r20
    16b8:	81 70       	andi	r24, 0x01	; 1
    16ba:	90 70       	andi	r25, 0x00	; 0
    16bc:	89 2b       	or	r24, r25
    16be:	61 f0       	breq	.+24     	; 0x16d8 <__mulsf3+0x162>
    16c0:	16 95       	lsr	r17
    16c2:	07 95       	ror	r16
    16c4:	f7 94       	ror	r15
    16c6:	e7 94       	ror	r14
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e0       	ldi	r26, 0x00	; 0
    16ce:	b0 e8       	ldi	r27, 0x80	; 128
    16d0:	e8 2a       	or	r14, r24
    16d2:	f9 2a       	or	r15, r25
    16d4:	0a 2b       	or	r16, r26
    16d6:	1b 2b       	or	r17, r27
    16d8:	76 95       	lsr	r23
    16da:	67 95       	ror	r22
    16dc:	57 95       	ror	r21
    16de:	47 95       	ror	r20
    16e0:	2f 5f       	subi	r18, 0xFF	; 255
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	77 fd       	sbrc	r23, 7
    16e6:	e7 cf       	rjmp	.-50     	; 0x16b6 <__mulsf3+0x140>
    16e8:	0c c0       	rjmp	.+24     	; 0x1702 <__mulsf3+0x18c>
    16ea:	44 0f       	add	r20, r20
    16ec:	55 1f       	adc	r21, r21
    16ee:	66 1f       	adc	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	17 fd       	sbrc	r17, 7
    16f4:	41 60       	ori	r20, 0x01	; 1
    16f6:	ee 0c       	add	r14, r14
    16f8:	ff 1c       	adc	r15, r15
    16fa:	00 1f       	adc	r16, r16
    16fc:	11 1f       	adc	r17, r17
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	30 40       	sbci	r19, 0x00	; 0
    1702:	40 30       	cpi	r20, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	59 07       	cpc	r21, r25
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	69 07       	cpc	r22, r25
    170c:	90 e4       	ldi	r25, 0x40	; 64
    170e:	79 07       	cpc	r23, r25
    1710:	60 f3       	brcs	.-40     	; 0x16ea <__mulsf3+0x174>
    1712:	2b 8f       	std	Y+27, r18	; 0x1b
    1714:	3c 8f       	std	Y+28, r19	; 0x1c
    1716:	db 01       	movw	r26, r22
    1718:	ca 01       	movw	r24, r20
    171a:	8f 77       	andi	r24, 0x7F	; 127
    171c:	90 70       	andi	r25, 0x00	; 0
    171e:	a0 70       	andi	r26, 0x00	; 0
    1720:	b0 70       	andi	r27, 0x00	; 0
    1722:	80 34       	cpi	r24, 0x40	; 64
    1724:	91 05       	cpc	r25, r1
    1726:	a1 05       	cpc	r26, r1
    1728:	b1 05       	cpc	r27, r1
    172a:	61 f4       	brne	.+24     	; 0x1744 <__mulsf3+0x1ce>
    172c:	47 fd       	sbrc	r20, 7
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <__mulsf3+0x1ce>
    1730:	e1 14       	cp	r14, r1
    1732:	f1 04       	cpc	r15, r1
    1734:	01 05       	cpc	r16, r1
    1736:	11 05       	cpc	r17, r1
    1738:	29 f0       	breq	.+10     	; 0x1744 <__mulsf3+0x1ce>
    173a:	40 5c       	subi	r20, 0xC0	; 192
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	6f 4f       	sbci	r22, 0xFF	; 255
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	40 78       	andi	r20, 0x80	; 128
    1744:	1a 8e       	std	Y+26, r1	; 0x1a
    1746:	fe 17       	cp	r31, r30
    1748:	11 f0       	breq	.+4      	; 0x174e <__mulsf3+0x1d8>
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	8a 8f       	std	Y+26, r24	; 0x1a
    174e:	4d 8f       	std	Y+29, r20	; 0x1d
    1750:	5e 8f       	std	Y+30, r21	; 0x1e
    1752:	6f 8f       	std	Y+31, r22	; 0x1f
    1754:	78 a3       	std	Y+32, r23	; 0x20
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	89 8f       	std	Y+25, r24	; 0x19
    175a:	ce 01       	movw	r24, r28
    175c:	49 96       	adiw	r24, 0x19	; 25
    175e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__pack_f>
    1762:	a0 96       	adiw	r28, 0x20	; 32
    1764:	e2 e1       	ldi	r30, 0x12	; 18
    1766:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__>

0000176a <__divsf3>:
    176a:	a8 e1       	ldi	r26, 0x18	; 24
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	eb eb       	ldi	r30, 0xBB	; 187
    1770:	fb e0       	ldi	r31, 0x0B	; 11
    1772:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__prologue_saves__+0x10>
    1776:	69 83       	std	Y+1, r22	; 0x01
    1778:	7a 83       	std	Y+2, r23	; 0x02
    177a:	8b 83       	std	Y+3, r24	; 0x03
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	2d 83       	std	Y+5, r18	; 0x05
    1780:	3e 83       	std	Y+6, r19	; 0x06
    1782:	4f 83       	std	Y+7, r20	; 0x07
    1784:	58 87       	std	Y+8, r21	; 0x08
    1786:	b9 e0       	ldi	r27, 0x09	; 9
    1788:	eb 2e       	mov	r14, r27
    178a:	f1 2c       	mov	r15, r1
    178c:	ec 0e       	add	r14, r28
    178e:	fd 1e       	adc	r15, r29
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	b7 01       	movw	r22, r14
    1796:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    179a:	8e 01       	movw	r16, r28
    179c:	0f 5e       	subi	r16, 0xEF	; 239
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	ce 01       	movw	r24, r28
    17a2:	05 96       	adiw	r24, 0x05	; 5
    17a4:	b8 01       	movw	r22, r16
    17a6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    17aa:	29 85       	ldd	r18, Y+9	; 0x09
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <__divsf3+0x48>
    17b0:	7e c0       	rjmp	.+252    	; 0x18ae <__divsf3+0x144>
    17b2:	39 89       	ldd	r19, Y+17	; 0x11
    17b4:	32 30       	cpi	r19, 0x02	; 2
    17b6:	10 f4       	brcc	.+4      	; 0x17bc <__divsf3+0x52>
    17b8:	b8 01       	movw	r22, r16
    17ba:	7c c0       	rjmp	.+248    	; 0x18b4 <__divsf3+0x14a>
    17bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17be:	9a 89       	ldd	r25, Y+18	; 0x12
    17c0:	89 27       	eor	r24, r25
    17c2:	8a 87       	std	Y+10, r24	; 0x0a
    17c4:	24 30       	cpi	r18, 0x04	; 4
    17c6:	11 f0       	breq	.+4      	; 0x17cc <__divsf3+0x62>
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 f4       	brne	.+12     	; 0x17d8 <__divsf3+0x6e>
    17cc:	23 17       	cp	r18, r19
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <__divsf3+0x68>
    17d0:	6e c0       	rjmp	.+220    	; 0x18ae <__divsf3+0x144>
    17d2:	64 e7       	ldi	r22, 0x74	; 116
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	6e c0       	rjmp	.+220    	; 0x18b4 <__divsf3+0x14a>
    17d8:	34 30       	cpi	r19, 0x04	; 4
    17da:	39 f4       	brne	.+14     	; 0x17ea <__divsf3+0x80>
    17dc:	1d 86       	std	Y+13, r1	; 0x0d
    17de:	1e 86       	std	Y+14, r1	; 0x0e
    17e0:	1f 86       	std	Y+15, r1	; 0x0f
    17e2:	18 8a       	std	Y+16, r1	; 0x10
    17e4:	1c 86       	std	Y+12, r1	; 0x0c
    17e6:	1b 86       	std	Y+11, r1	; 0x0b
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <__divsf3+0x88>
    17ea:	32 30       	cpi	r19, 0x02	; 2
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <__divsf3+0x8c>
    17ee:	84 e0       	ldi	r24, 0x04	; 4
    17f0:	89 87       	std	Y+9, r24	; 0x09
    17f2:	b7 01       	movw	r22, r14
    17f4:	5f c0       	rjmp	.+190    	; 0x18b4 <__divsf3+0x14a>
    17f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    17f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    17fa:	8b 89       	ldd	r24, Y+19	; 0x13
    17fc:	9c 89       	ldd	r25, Y+20	; 0x14
    17fe:	28 1b       	sub	r18, r24
    1800:	39 0b       	sbc	r19, r25
    1802:	3c 87       	std	Y+12, r19	; 0x0c
    1804:	2b 87       	std	Y+11, r18	; 0x0b
    1806:	ed 84       	ldd	r14, Y+13	; 0x0d
    1808:	fe 84       	ldd	r15, Y+14	; 0x0e
    180a:	0f 85       	ldd	r16, Y+15	; 0x0f
    180c:	18 89       	ldd	r17, Y+16	; 0x10
    180e:	ad 88       	ldd	r10, Y+21	; 0x15
    1810:	be 88       	ldd	r11, Y+22	; 0x16
    1812:	cf 88       	ldd	r12, Y+23	; 0x17
    1814:	d8 8c       	ldd	r13, Y+24	; 0x18
    1816:	ea 14       	cp	r14, r10
    1818:	fb 04       	cpc	r15, r11
    181a:	0c 05       	cpc	r16, r12
    181c:	1d 05       	cpc	r17, r13
    181e:	40 f4       	brcc	.+16     	; 0x1830 <__divsf3+0xc6>
    1820:	ee 0c       	add	r14, r14
    1822:	ff 1c       	adc	r15, r15
    1824:	00 1f       	adc	r16, r16
    1826:	11 1f       	adc	r17, r17
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	30 40       	sbci	r19, 0x00	; 0
    182c:	3c 87       	std	Y+12, r19	; 0x0c
    182e:	2b 87       	std	Y+11, r18	; 0x0b
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e4       	ldi	r27, 0x40	; 64
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	ea 14       	cp	r14, r10
    1846:	fb 04       	cpc	r15, r11
    1848:	0c 05       	cpc	r16, r12
    184a:	1d 05       	cpc	r17, r13
    184c:	40 f0       	brcs	.+16     	; 0x185e <__divsf3+0xf4>
    184e:	28 2b       	or	r18, r24
    1850:	39 2b       	or	r19, r25
    1852:	4a 2b       	or	r20, r26
    1854:	5b 2b       	or	r21, r27
    1856:	ea 18       	sub	r14, r10
    1858:	fb 08       	sbc	r15, r11
    185a:	0c 09       	sbc	r16, r12
    185c:	1d 09       	sbc	r17, r13
    185e:	b6 95       	lsr	r27
    1860:	a7 95       	ror	r26
    1862:	97 95       	ror	r25
    1864:	87 95       	ror	r24
    1866:	ee 0c       	add	r14, r14
    1868:	ff 1c       	adc	r15, r15
    186a:	00 1f       	adc	r16, r16
    186c:	11 1f       	adc	r17, r17
    186e:	6f 5f       	subi	r22, 0xFF	; 255
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	6f 31       	cpi	r22, 0x1F	; 31
    1874:	71 05       	cpc	r23, r1
    1876:	31 f7       	brne	.-52     	; 0x1844 <__divsf3+0xda>
    1878:	da 01       	movw	r26, r20
    187a:	c9 01       	movw	r24, r18
    187c:	8f 77       	andi	r24, 0x7F	; 127
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	a0 70       	andi	r26, 0x00	; 0
    1882:	b0 70       	andi	r27, 0x00	; 0
    1884:	80 34       	cpi	r24, 0x40	; 64
    1886:	91 05       	cpc	r25, r1
    1888:	a1 05       	cpc	r26, r1
    188a:	b1 05       	cpc	r27, r1
    188c:	61 f4       	brne	.+24     	; 0x18a6 <__divsf3+0x13c>
    188e:	27 fd       	sbrc	r18, 7
    1890:	0a c0       	rjmp	.+20     	; 0x18a6 <__divsf3+0x13c>
    1892:	e1 14       	cp	r14, r1
    1894:	f1 04       	cpc	r15, r1
    1896:	01 05       	cpc	r16, r1
    1898:	11 05       	cpc	r17, r1
    189a:	29 f0       	breq	.+10     	; 0x18a6 <__divsf3+0x13c>
    189c:	20 5c       	subi	r18, 0xC0	; 192
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
    18a0:	4f 4f       	sbci	r20, 0xFF	; 255
    18a2:	5f 4f       	sbci	r21, 0xFF	; 255
    18a4:	20 78       	andi	r18, 0x80	; 128
    18a6:	2d 87       	std	Y+13, r18	; 0x0d
    18a8:	3e 87       	std	Y+14, r19	; 0x0e
    18aa:	4f 87       	std	Y+15, r20	; 0x0f
    18ac:	58 8b       	std	Y+16, r21	; 0x10
    18ae:	be 01       	movw	r22, r28
    18b0:	67 5f       	subi	r22, 0xF7	; 247
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	cb 01       	movw	r24, r22
    18b6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__pack_f>
    18ba:	68 96       	adiw	r28, 0x18	; 24
    18bc:	ea e0       	ldi	r30, 0x0A	; 10
    18be:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__epilogue_restores__+0x10>

000018c2 <__gtsf2>:
    18c2:	a8 e1       	ldi	r26, 0x18	; 24
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e7 e6       	ldi	r30, 0x67	; 103
    18c8:	fc e0       	ldi	r31, 0x0C	; 12
    18ca:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
    18ce:	69 83       	std	Y+1, r22	; 0x01
    18d0:	7a 83       	std	Y+2, r23	; 0x02
    18d2:	8b 83       	std	Y+3, r24	; 0x03
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	2d 83       	std	Y+5, r18	; 0x05
    18d8:	3e 83       	std	Y+6, r19	; 0x06
    18da:	4f 83       	std	Y+7, r20	; 0x07
    18dc:	58 87       	std	Y+8, r21	; 0x08
    18de:	89 e0       	ldi	r24, 0x09	; 9
    18e0:	e8 2e       	mov	r14, r24
    18e2:	f1 2c       	mov	r15, r1
    18e4:	ec 0e       	add	r14, r28
    18e6:	fd 1e       	adc	r15, r29
    18e8:	ce 01       	movw	r24, r28
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	b7 01       	movw	r22, r14
    18ee:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    18f2:	8e 01       	movw	r16, r28
    18f4:	0f 5e       	subi	r16, 0xEF	; 239
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	ce 01       	movw	r24, r28
    18fa:	05 96       	adiw	r24, 0x05	; 5
    18fc:	b8 01       	movw	r22, r16
    18fe:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	40 f0       	brcs	.+16     	; 0x1918 <__gtsf2+0x56>
    1908:	89 89       	ldd	r24, Y+17	; 0x11
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	28 f0       	brcs	.+10     	; 0x1918 <__gtsf2+0x56>
    190e:	c7 01       	movw	r24, r14
    1910:	b8 01       	movw	r22, r16
    1912:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fpcmp_parts_f>
    1916:	01 c0       	rjmp	.+2      	; 0x191a <__gtsf2+0x58>
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	68 96       	adiw	r28, 0x18	; 24
    191c:	e6 e0       	ldi	r30, 0x06	; 6
    191e:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

00001922 <__gesf2>:
    1922:	a8 e1       	ldi	r26, 0x18	; 24
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e9       	ldi	r30, 0x97	; 151
    1928:	fc e0       	ldi	r31, 0x0C	; 12
    192a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
    192e:	69 83       	std	Y+1, r22	; 0x01
    1930:	7a 83       	std	Y+2, r23	; 0x02
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	2d 83       	std	Y+5, r18	; 0x05
    1938:	3e 83       	std	Y+6, r19	; 0x06
    193a:	4f 83       	std	Y+7, r20	; 0x07
    193c:	58 87       	std	Y+8, r21	; 0x08
    193e:	89 e0       	ldi	r24, 0x09	; 9
    1940:	e8 2e       	mov	r14, r24
    1942:	f1 2c       	mov	r15, r1
    1944:	ec 0e       	add	r14, r28
    1946:	fd 1e       	adc	r15, r29
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	b7 01       	movw	r22, r14
    194e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    1952:	8e 01       	movw	r16, r28
    1954:	0f 5e       	subi	r16, 0xEF	; 239
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	ce 01       	movw	r24, r28
    195a:	05 96       	adiw	r24, 0x05	; 5
    195c:	b8 01       	movw	r22, r16
    195e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	40 f0       	brcs	.+16     	; 0x1978 <__gesf2+0x56>
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	28 f0       	brcs	.+10     	; 0x1978 <__gesf2+0x56>
    196e:	c7 01       	movw	r24, r14
    1970:	b8 01       	movw	r22, r16
    1972:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fpcmp_parts_f>
    1976:	01 c0       	rjmp	.+2      	; 0x197a <__gesf2+0x58>
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	68 96       	adiw	r28, 0x18	; 24
    197c:	e6 e0       	ldi	r30, 0x06	; 6
    197e:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

00001982 <__ltsf2>:
    1982:	a8 e1       	ldi	r26, 0x18	; 24
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e7 ec       	ldi	r30, 0xC7	; 199
    1988:	fc e0       	ldi	r31, 0x0C	; 12
    198a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
    198e:	69 83       	std	Y+1, r22	; 0x01
    1990:	7a 83       	std	Y+2, r23	; 0x02
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	2d 83       	std	Y+5, r18	; 0x05
    1998:	3e 83       	std	Y+6, r19	; 0x06
    199a:	4f 83       	std	Y+7, r20	; 0x07
    199c:	58 87       	std	Y+8, r21	; 0x08
    199e:	89 e0       	ldi	r24, 0x09	; 9
    19a0:	e8 2e       	mov	r14, r24
    19a2:	f1 2c       	mov	r15, r1
    19a4:	ec 0e       	add	r14, r28
    19a6:	fd 1e       	adc	r15, r29
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	b7 01       	movw	r22, r14
    19ae:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    19b2:	8e 01       	movw	r16, r28
    19b4:	0f 5e       	subi	r16, 0xEF	; 239
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	ce 01       	movw	r24, r28
    19ba:	05 96       	adiw	r24, 0x05	; 5
    19bc:	b8 01       	movw	r22, r16
    19be:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    19c2:	89 85       	ldd	r24, Y+9	; 0x09
    19c4:	82 30       	cpi	r24, 0x02	; 2
    19c6:	40 f0       	brcs	.+16     	; 0x19d8 <__ltsf2+0x56>
    19c8:	89 89       	ldd	r24, Y+17	; 0x11
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	28 f0       	brcs	.+10     	; 0x19d8 <__ltsf2+0x56>
    19ce:	c7 01       	movw	r24, r14
    19d0:	b8 01       	movw	r22, r16
    19d2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fpcmp_parts_f>
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <__ltsf2+0x58>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	68 96       	adiw	r28, 0x18	; 24
    19dc:	e6 e0       	ldi	r30, 0x06	; 6
    19de:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

000019e2 <__fixsfsi>:
    19e2:	ac e0       	ldi	r26, 0x0C	; 12
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e7 ef       	ldi	r30, 0xF7	; 247
    19e8:	fc e0       	ldi	r31, 0x0C	; 12
    19ea:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x20>
    19ee:	69 83       	std	Y+1, r22	; 0x01
    19f0:	7a 83       	std	Y+2, r23	; 0x02
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	ce 01       	movw	r24, r28
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	be 01       	movw	r22, r28
    19fc:	6b 5f       	subi	r22, 0xFB	; 251
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__unpack_f>
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	61 f1       	breq	.+88     	; 0x1a62 <__fixsfsi+0x80>
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	50 f1       	brcs	.+84     	; 0x1a62 <__fixsfsi+0x80>
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	21 f4       	brne	.+8      	; 0x1a1a <__fixsfsi+0x38>
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	88 23       	and	r24, r24
    1a16:	51 f1       	breq	.+84     	; 0x1a6c <__fixsfsi+0x8a>
    1a18:	2e c0       	rjmp	.+92     	; 0x1a76 <__fixsfsi+0x94>
    1a1a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a1c:	38 85       	ldd	r19, Y+8	; 0x08
    1a1e:	37 fd       	sbrc	r19, 7
    1a20:	20 c0       	rjmp	.+64     	; 0x1a62 <__fixsfsi+0x80>
    1a22:	6e 81       	ldd	r22, Y+6	; 0x06
    1a24:	2f 31       	cpi	r18, 0x1F	; 31
    1a26:	31 05       	cpc	r19, r1
    1a28:	1c f0       	brlt	.+6      	; 0x1a30 <__fixsfsi+0x4e>
    1a2a:	66 23       	and	r22, r22
    1a2c:	f9 f0       	breq	.+62     	; 0x1a6c <__fixsfsi+0x8a>
    1a2e:	23 c0       	rjmp	.+70     	; 0x1a76 <__fixsfsi+0x94>
    1a30:	8e e1       	ldi	r24, 0x1E	; 30
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	82 1b       	sub	r24, r18
    1a36:	93 0b       	sbc	r25, r19
    1a38:	29 85       	ldd	r18, Y+9	; 0x09
    1a3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a3c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a3e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <__fixsfsi+0x68>
    1a42:	56 95       	lsr	r21
    1a44:	47 95       	ror	r20
    1a46:	37 95       	ror	r19
    1a48:	27 95       	ror	r18
    1a4a:	8a 95       	dec	r24
    1a4c:	d2 f7       	brpl	.-12     	; 0x1a42 <__fixsfsi+0x60>
    1a4e:	66 23       	and	r22, r22
    1a50:	b1 f0       	breq	.+44     	; 0x1a7e <__fixsfsi+0x9c>
    1a52:	50 95       	com	r21
    1a54:	40 95       	com	r20
    1a56:	30 95       	com	r19
    1a58:	21 95       	neg	r18
    1a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	0e c0       	rjmp	.+28     	; 0x1a7e <__fixsfsi+0x9c>
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <__fixsfsi+0x9c>
    1a6c:	2f ef       	ldi	r18, 0xFF	; 255
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f ef       	ldi	r20, 0xFF	; 255
    1a72:	5f e7       	ldi	r21, 0x7F	; 127
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <__fixsfsi+0x9c>
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e8       	ldi	r21, 0x80	; 128
    1a7e:	b9 01       	movw	r22, r18
    1a80:	ca 01       	movw	r24, r20
    1a82:	2c 96       	adiw	r28, 0x0c	; 12
    1a84:	e2 e0       	ldi	r30, 0x02	; 2
    1a86:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x20>

00001a8a <__floatunsisf>:
    1a8a:	a8 e0       	ldi	r26, 0x08	; 8
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	eb e4       	ldi	r30, 0x4B	; 75
    1a90:	fd e0       	ldi	r31, 0x0D	; 13
    1a92:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__prologue_saves__+0x10>
    1a96:	7b 01       	movw	r14, r22
    1a98:	8c 01       	movw	r16, r24
    1a9a:	61 15       	cp	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	81 05       	cpc	r24, r1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	19 f4       	brne	.+6      	; 0x1aaa <__floatunsisf+0x20>
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	60 c0       	rjmp	.+192    	; 0x1b6a <__floatunsisf+0xe0>
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	8e e1       	ldi	r24, 0x1E	; 30
    1ab0:	c8 2e       	mov	r12, r24
    1ab2:	d1 2c       	mov	r13, r1
    1ab4:	dc 82       	std	Y+4, r13	; 0x04
    1ab6:	cb 82       	std	Y+3, r12	; 0x03
    1ab8:	ed 82       	std	Y+5, r14	; 0x05
    1aba:	fe 82       	std	Y+6, r15	; 0x06
    1abc:	0f 83       	std	Y+7, r16	; 0x07
    1abe:	18 87       	std	Y+8, r17	; 0x08
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	b7 01       	movw	r22, r14
    1ac4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__clzsi2>
    1ac8:	fc 01       	movw	r30, r24
    1aca:	31 97       	sbiw	r30, 0x01	; 1
    1acc:	f7 ff       	sbrs	r31, 7
    1ace:	3b c0       	rjmp	.+118    	; 0x1b46 <__floatunsisf+0xbc>
    1ad0:	22 27       	eor	r18, r18
    1ad2:	33 27       	eor	r19, r19
    1ad4:	2e 1b       	sub	r18, r30
    1ad6:	3f 0b       	sbc	r19, r31
    1ad8:	57 01       	movw	r10, r14
    1ada:	68 01       	movw	r12, r16
    1adc:	02 2e       	mov	r0, r18
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <__floatunsisf+0x5e>
    1ae0:	d6 94       	lsr	r13
    1ae2:	c7 94       	ror	r12
    1ae4:	b7 94       	ror	r11
    1ae6:	a7 94       	ror	r10
    1ae8:	0a 94       	dec	r0
    1aea:	d2 f7       	brpl	.-12     	; 0x1ae0 <__floatunsisf+0x56>
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a0 e0       	ldi	r26, 0x00	; 0
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <__floatunsisf+0x7c>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	2a 95       	dec	r18
    1b08:	d2 f7       	brpl	.-12     	; 0x1afe <__floatunsisf+0x74>
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	a1 09       	sbc	r26, r1
    1b0e:	b1 09       	sbc	r27, r1
    1b10:	8e 21       	and	r24, r14
    1b12:	9f 21       	and	r25, r15
    1b14:	a0 23       	and	r26, r16
    1b16:	b1 23       	and	r27, r17
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	a1 05       	cpc	r26, r1
    1b1c:	b1 05       	cpc	r27, r1
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <__floatunsisf+0x9e>
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	4a 29       	or	r20, r10
    1b2a:	5b 29       	or	r21, r11
    1b2c:	6c 29       	or	r22, r12
    1b2e:	7d 29       	or	r23, r13
    1b30:	4d 83       	std	Y+5, r20	; 0x05
    1b32:	5e 83       	std	Y+6, r21	; 0x06
    1b34:	6f 83       	std	Y+7, r22	; 0x07
    1b36:	78 87       	std	Y+8, r23	; 0x08
    1b38:	8e e1       	ldi	r24, 0x1E	; 30
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	8e 1b       	sub	r24, r30
    1b3e:	9f 0b       	sbc	r25, r31
    1b40:	9c 83       	std	Y+4, r25	; 0x04
    1b42:	8b 83       	std	Y+3, r24	; 0x03
    1b44:	12 c0       	rjmp	.+36     	; 0x1b6a <__floatunsisf+0xe0>
    1b46:	30 97       	sbiw	r30, 0x00	; 0
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <__floatunsisf+0xe0>
    1b4a:	0e 2e       	mov	r0, r30
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <__floatunsisf+0xcc>
    1b4e:	ee 0c       	add	r14, r14
    1b50:	ff 1c       	adc	r15, r15
    1b52:	00 1f       	adc	r16, r16
    1b54:	11 1f       	adc	r17, r17
    1b56:	0a 94       	dec	r0
    1b58:	d2 f7       	brpl	.-12     	; 0x1b4e <__floatunsisf+0xc4>
    1b5a:	ed 82       	std	Y+5, r14	; 0x05
    1b5c:	fe 82       	std	Y+6, r15	; 0x06
    1b5e:	0f 83       	std	Y+7, r16	; 0x07
    1b60:	18 87       	std	Y+8, r17	; 0x08
    1b62:	ce 1a       	sub	r12, r30
    1b64:	df 0a       	sbc	r13, r31
    1b66:	dc 82       	std	Y+4, r13	; 0x04
    1b68:	cb 82       	std	Y+3, r12	; 0x03
    1b6a:	1a 82       	std	Y+2, r1	; 0x02
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__pack_f>
    1b74:	28 96       	adiw	r28, 0x08	; 8
    1b76:	ea e0       	ldi	r30, 0x0A	; 10
    1b78:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__epilogue_restores__+0x10>

00001b7c <__clzsi2>:
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	7b 01       	movw	r14, r22
    1b86:	8c 01       	movw	r16, r24
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	e8 16       	cp	r14, r24
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	f8 06       	cpc	r15, r24
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	08 07       	cpc	r16, r24
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	18 07       	cpc	r17, r24
    1b98:	88 f4       	brcc	.+34     	; 0x1bbc <__clzsi2+0x40>
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	e8 16       	cp	r14, r24
    1b9e:	f1 04       	cpc	r15, r1
    1ba0:	01 05       	cpc	r16, r1
    1ba2:	11 05       	cpc	r17, r1
    1ba4:	31 f0       	breq	.+12     	; 0x1bb2 <__clzsi2+0x36>
    1ba6:	28 f0       	brcs	.+10     	; 0x1bb2 <__clzsi2+0x36>
    1ba8:	88 e0       	ldi	r24, 0x08	; 8
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	17 c0       	rjmp	.+46     	; 0x1be0 <__clzsi2+0x64>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	12 c0       	rjmp	.+36     	; 0x1be0 <__clzsi2+0x64>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	e8 16       	cp	r14, r24
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	f8 06       	cpc	r15, r24
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	08 07       	cpc	r16, r24
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	18 07       	cpc	r17, r24
    1bcc:	28 f0       	brcs	.+10     	; 0x1bd8 <__clzsi2+0x5c>
    1bce:	88 e1       	ldi	r24, 0x18	; 24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e0       	ldi	r26, 0x00	; 0
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <__clzsi2+0x64>
    1bd8:	80 e1       	ldi	r24, 0x10	; 16
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e0       	ldi	r26, 0x00	; 0
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	20 e2       	ldi	r18, 0x20	; 32
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	28 1b       	sub	r18, r24
    1bea:	39 0b       	sbc	r19, r25
    1bec:	4a 0b       	sbc	r20, r26
    1bee:	5b 0b       	sbc	r21, r27
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <__clzsi2+0x7e>
    1bf2:	16 95       	lsr	r17
    1bf4:	07 95       	ror	r16
    1bf6:	f7 94       	ror	r15
    1bf8:	e7 94       	ror	r14
    1bfa:	8a 95       	dec	r24
    1bfc:	d2 f7       	brpl	.-12     	; 0x1bf2 <__clzsi2+0x76>
    1bfe:	f7 01       	movw	r30, r14
    1c00:	e4 58       	subi	r30, 0x84	; 132
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	28 1b       	sub	r18, r24
    1c08:	31 09       	sbc	r19, r1
    1c0a:	41 09       	sbc	r20, r1
    1c0c:	51 09       	sbc	r21, r1
    1c0e:	c9 01       	movw	r24, r18
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	08 95       	ret

00001c1a <__pack_f>:
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	fc 01       	movw	r30, r24
    1c26:	e4 80       	ldd	r14, Z+4	; 0x04
    1c28:	f5 80       	ldd	r15, Z+5	; 0x05
    1c2a:	06 81       	ldd	r16, Z+6	; 0x06
    1c2c:	17 81       	ldd	r17, Z+7	; 0x07
    1c2e:	d1 80       	ldd	r13, Z+1	; 0x01
    1c30:	80 81       	ld	r24, Z
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	48 f4       	brcc	.+18     	; 0x1c48 <__pack_f+0x2e>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a0 e1       	ldi	r26, 0x10	; 16
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e8 2a       	or	r14, r24
    1c40:	f9 2a       	or	r15, r25
    1c42:	0a 2b       	or	r16, r26
    1c44:	1b 2b       	or	r17, r27
    1c46:	a5 c0       	rjmp	.+330    	; 0x1d92 <__pack_f+0x178>
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <__pack_f+0x34>
    1c4c:	9f c0       	rjmp	.+318    	; 0x1d8c <__pack_f+0x172>
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	21 f4       	brne	.+8      	; 0x1c5a <__pack_f+0x40>
    1c52:	ee 24       	eor	r14, r14
    1c54:	ff 24       	eor	r15, r15
    1c56:	87 01       	movw	r16, r14
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <__pack_f+0x4a>
    1c5a:	e1 14       	cp	r14, r1
    1c5c:	f1 04       	cpc	r15, r1
    1c5e:	01 05       	cpc	r16, r1
    1c60:	11 05       	cpc	r17, r1
    1c62:	19 f4       	brne	.+6      	; 0x1c6a <__pack_f+0x50>
    1c64:	e0 e0       	ldi	r30, 0x00	; 0
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	96 c0       	rjmp	.+300    	; 0x1d96 <__pack_f+0x17c>
    1c6a:	62 81       	ldd	r22, Z+2	; 0x02
    1c6c:	73 81       	ldd	r23, Z+3	; 0x03
    1c6e:	9f ef       	ldi	r25, 0xFF	; 255
    1c70:	62 38       	cpi	r22, 0x82	; 130
    1c72:	79 07       	cpc	r23, r25
    1c74:	0c f0       	brlt	.+2      	; 0x1c78 <__pack_f+0x5e>
    1c76:	5b c0       	rjmp	.+182    	; 0x1d2e <__pack_f+0x114>
    1c78:	22 e8       	ldi	r18, 0x82	; 130
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	26 1b       	sub	r18, r22
    1c7e:	37 0b       	sbc	r19, r23
    1c80:	2a 31       	cpi	r18, 0x1A	; 26
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f0       	brlt	.+10     	; 0x1c90 <__pack_f+0x76>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	2a c0       	rjmp	.+84     	; 0x1ce4 <__pack_f+0xca>
    1c90:	b8 01       	movw	r22, r16
    1c92:	a7 01       	movw	r20, r14
    1c94:	02 2e       	mov	r0, r18
    1c96:	04 c0       	rjmp	.+8      	; 0x1ca0 <__pack_f+0x86>
    1c98:	76 95       	lsr	r23
    1c9a:	67 95       	ror	r22
    1c9c:	57 95       	ror	r21
    1c9e:	47 95       	ror	r20
    1ca0:	0a 94       	dec	r0
    1ca2:	d2 f7       	brpl	.-12     	; 0x1c98 <__pack_f+0x7e>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a0 e0       	ldi	r26, 0x00	; 0
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <__pack_f+0x9c>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	aa 1f       	adc	r26, r26
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	2a 95       	dec	r18
    1cb8:	d2 f7       	brpl	.-12     	; 0x1cae <__pack_f+0x94>
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	a1 09       	sbc	r26, r1
    1cbe:	b1 09       	sbc	r27, r1
    1cc0:	8e 21       	and	r24, r14
    1cc2:	9f 21       	and	r25, r15
    1cc4:	a0 23       	and	r26, r16
    1cc6:	b1 23       	and	r27, r17
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	a1 05       	cpc	r26, r1
    1ccc:	b1 05       	cpc	r27, r1
    1cce:	21 f0       	breq	.+8      	; 0x1cd8 <__pack_f+0xbe>
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	9a 01       	movw	r18, r20
    1cda:	ab 01       	movw	r20, r22
    1cdc:	28 2b       	or	r18, r24
    1cde:	39 2b       	or	r19, r25
    1ce0:	4a 2b       	or	r20, r26
    1ce2:	5b 2b       	or	r21, r27
    1ce4:	da 01       	movw	r26, r20
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	8f 77       	andi	r24, 0x7F	; 127
    1cea:	90 70       	andi	r25, 0x00	; 0
    1cec:	a0 70       	andi	r26, 0x00	; 0
    1cee:	b0 70       	andi	r27, 0x00	; 0
    1cf0:	80 34       	cpi	r24, 0x40	; 64
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	a1 05       	cpc	r26, r1
    1cf6:	b1 05       	cpc	r27, r1
    1cf8:	39 f4       	brne	.+14     	; 0x1d08 <__pack_f+0xee>
    1cfa:	27 ff       	sbrs	r18, 7
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <__pack_f+0xf6>
    1cfe:	20 5c       	subi	r18, 0xC0	; 192
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	4f 4f       	sbci	r20, 0xFF	; 255
    1d04:	5f 4f       	sbci	r21, 0xFF	; 255
    1d06:	04 c0       	rjmp	.+8      	; 0x1d10 <__pack_f+0xf6>
    1d08:	21 5c       	subi	r18, 0xC1	; 193
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	e0 e0       	ldi	r30, 0x00	; 0
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	20 30       	cpi	r18, 0x00	; 0
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	3a 07       	cpc	r19, r26
    1d1a:	a0 e0       	ldi	r26, 0x00	; 0
    1d1c:	4a 07       	cpc	r20, r26
    1d1e:	a0 e4       	ldi	r26, 0x40	; 64
    1d20:	5a 07       	cpc	r21, r26
    1d22:	10 f0       	brcs	.+4      	; 0x1d28 <__pack_f+0x10e>
    1d24:	e1 e0       	ldi	r30, 0x01	; 1
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	79 01       	movw	r14, r18
    1d2a:	8a 01       	movw	r16, r20
    1d2c:	27 c0       	rjmp	.+78     	; 0x1d7c <__pack_f+0x162>
    1d2e:	60 38       	cpi	r22, 0x80	; 128
    1d30:	71 05       	cpc	r23, r1
    1d32:	64 f5       	brge	.+88     	; 0x1d8c <__pack_f+0x172>
    1d34:	fb 01       	movw	r30, r22
    1d36:	e1 58       	subi	r30, 0x81	; 129
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	d8 01       	movw	r26, r16
    1d3c:	c7 01       	movw	r24, r14
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	90 70       	andi	r25, 0x00	; 0
    1d42:	a0 70       	andi	r26, 0x00	; 0
    1d44:	b0 70       	andi	r27, 0x00	; 0
    1d46:	80 34       	cpi	r24, 0x40	; 64
    1d48:	91 05       	cpc	r25, r1
    1d4a:	a1 05       	cpc	r26, r1
    1d4c:	b1 05       	cpc	r27, r1
    1d4e:	39 f4       	brne	.+14     	; 0x1d5e <__pack_f+0x144>
    1d50:	e7 fe       	sbrs	r14, 7
    1d52:	0d c0       	rjmp	.+26     	; 0x1d6e <__pack_f+0x154>
    1d54:	80 e4       	ldi	r24, 0x40	; 64
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e0       	ldi	r26, 0x00	; 0
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__pack_f+0x14c>
    1d5e:	8f e3       	ldi	r24, 0x3F	; 63
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e0       	ldi	r26, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e8 0e       	add	r14, r24
    1d68:	f9 1e       	adc	r15, r25
    1d6a:	0a 1f       	adc	r16, r26
    1d6c:	1b 1f       	adc	r17, r27
    1d6e:	17 ff       	sbrs	r17, 7
    1d70:	05 c0       	rjmp	.+10     	; 0x1d7c <__pack_f+0x162>
    1d72:	16 95       	lsr	r17
    1d74:	07 95       	ror	r16
    1d76:	f7 94       	ror	r15
    1d78:	e7 94       	ror	r14
    1d7a:	31 96       	adiw	r30, 0x01	; 1
    1d7c:	87 e0       	ldi	r24, 0x07	; 7
    1d7e:	16 95       	lsr	r17
    1d80:	07 95       	ror	r16
    1d82:	f7 94       	ror	r15
    1d84:	e7 94       	ror	r14
    1d86:	8a 95       	dec	r24
    1d88:	d1 f7       	brne	.-12     	; 0x1d7e <__pack_f+0x164>
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <__pack_f+0x17c>
    1d8c:	ee 24       	eor	r14, r14
    1d8e:	ff 24       	eor	r15, r15
    1d90:	87 01       	movw	r16, r14
    1d92:	ef ef       	ldi	r30, 0xFF	; 255
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	6e 2f       	mov	r22, r30
    1d98:	67 95       	ror	r22
    1d9a:	66 27       	eor	r22, r22
    1d9c:	67 95       	ror	r22
    1d9e:	90 2f       	mov	r25, r16
    1da0:	9f 77       	andi	r25, 0x7F	; 127
    1da2:	d7 94       	ror	r13
    1da4:	dd 24       	eor	r13, r13
    1da6:	d7 94       	ror	r13
    1da8:	8e 2f       	mov	r24, r30
    1daa:	86 95       	lsr	r24
    1dac:	49 2f       	mov	r20, r25
    1dae:	46 2b       	or	r20, r22
    1db0:	58 2f       	mov	r21, r24
    1db2:	5d 29       	or	r21, r13
    1db4:	b7 01       	movw	r22, r14
    1db6:	ca 01       	movw	r24, r20
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	df 90       	pop	r13
    1dc2:	08 95       	ret

00001dc4 <__unpack_f>:
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	db 01       	movw	r26, r22
    1dc8:	40 81       	ld	r20, Z
    1dca:	51 81       	ldd	r21, Z+1	; 0x01
    1dcc:	22 81       	ldd	r18, Z+2	; 0x02
    1dce:	62 2f       	mov	r22, r18
    1dd0:	6f 77       	andi	r22, 0x7F	; 127
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	22 1f       	adc	r18, r18
    1dd6:	22 27       	eor	r18, r18
    1dd8:	22 1f       	adc	r18, r18
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	89 2f       	mov	r24, r25
    1dde:	88 0f       	add	r24, r24
    1de0:	82 2b       	or	r24, r18
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	99 1f       	adc	r25, r25
    1de8:	99 27       	eor	r25, r25
    1dea:	99 1f       	adc	r25, r25
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	11 97       	sbiw	r26, 0x01	; 1
    1df2:	21 15       	cp	r18, r1
    1df4:	31 05       	cpc	r19, r1
    1df6:	a9 f5       	brne	.+106    	; 0x1e62 <__unpack_f+0x9e>
    1df8:	41 15       	cp	r20, r1
    1dfa:	51 05       	cpc	r21, r1
    1dfc:	61 05       	cpc	r22, r1
    1dfe:	71 05       	cpc	r23, r1
    1e00:	11 f4       	brne	.+4      	; 0x1e06 <__unpack_f+0x42>
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	37 c0       	rjmp	.+110    	; 0x1e74 <__unpack_f+0xb0>
    1e06:	82 e8       	ldi	r24, 0x82	; 130
    1e08:	9f ef       	ldi	r25, 0xFF	; 255
    1e0a:	13 96       	adiw	r26, 0x03	; 3
    1e0c:	9c 93       	st	X, r25
    1e0e:	8e 93       	st	-X, r24
    1e10:	12 97       	sbiw	r26, 0x02	; 2
    1e12:	9a 01       	movw	r18, r20
    1e14:	ab 01       	movw	r20, r22
    1e16:	67 e0       	ldi	r22, 0x07	; 7
    1e18:	22 0f       	add	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	44 1f       	adc	r20, r20
    1e1e:	55 1f       	adc	r21, r21
    1e20:	6a 95       	dec	r22
    1e22:	d1 f7       	brne	.-12     	; 0x1e18 <__unpack_f+0x54>
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	8c 93       	st	X, r24
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <__unpack_f+0x80>
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	44 1f       	adc	r20, r20
    1e30:	55 1f       	adc	r21, r21
    1e32:	12 96       	adiw	r26, 0x02	; 2
    1e34:	8d 91       	ld	r24, X+
    1e36:	9c 91       	ld	r25, X
    1e38:	13 97       	sbiw	r26, 0x03	; 3
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	13 96       	adiw	r26, 0x03	; 3
    1e3e:	9c 93       	st	X, r25
    1e40:	8e 93       	st	-X, r24
    1e42:	12 97       	sbiw	r26, 0x02	; 2
    1e44:	20 30       	cpi	r18, 0x00	; 0
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	38 07       	cpc	r19, r24
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	48 07       	cpc	r20, r24
    1e4e:	80 e4       	ldi	r24, 0x40	; 64
    1e50:	58 07       	cpc	r21, r24
    1e52:	58 f3       	brcs	.-42     	; 0x1e2a <__unpack_f+0x66>
    1e54:	14 96       	adiw	r26, 0x04	; 4
    1e56:	2d 93       	st	X+, r18
    1e58:	3d 93       	st	X+, r19
    1e5a:	4d 93       	st	X+, r20
    1e5c:	5c 93       	st	X, r21
    1e5e:	17 97       	sbiw	r26, 0x07	; 7
    1e60:	08 95       	ret
    1e62:	2f 3f       	cpi	r18, 0xFF	; 255
    1e64:	31 05       	cpc	r19, r1
    1e66:	79 f4       	brne	.+30     	; 0x1e86 <__unpack_f+0xc2>
    1e68:	41 15       	cp	r20, r1
    1e6a:	51 05       	cpc	r21, r1
    1e6c:	61 05       	cpc	r22, r1
    1e6e:	71 05       	cpc	r23, r1
    1e70:	19 f4       	brne	.+6      	; 0x1e78 <__unpack_f+0xb4>
    1e72:	84 e0       	ldi	r24, 0x04	; 4
    1e74:	8c 93       	st	X, r24
    1e76:	08 95       	ret
    1e78:	64 ff       	sbrs	r22, 4
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <__unpack_f+0xbe>
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	8c 93       	st	X, r24
    1e80:	12 c0       	rjmp	.+36     	; 0x1ea6 <__unpack_f+0xe2>
    1e82:	1c 92       	st	X, r1
    1e84:	10 c0       	rjmp	.+32     	; 0x1ea6 <__unpack_f+0xe2>
    1e86:	2f 57       	subi	r18, 0x7F	; 127
    1e88:	30 40       	sbci	r19, 0x00	; 0
    1e8a:	13 96       	adiw	r26, 0x03	; 3
    1e8c:	3c 93       	st	X, r19
    1e8e:	2e 93       	st	-X, r18
    1e90:	12 97       	sbiw	r26, 0x02	; 2
    1e92:	83 e0       	ldi	r24, 0x03	; 3
    1e94:	8c 93       	st	X, r24
    1e96:	87 e0       	ldi	r24, 0x07	; 7
    1e98:	44 0f       	add	r20, r20
    1e9a:	55 1f       	adc	r21, r21
    1e9c:	66 1f       	adc	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	8a 95       	dec	r24
    1ea2:	d1 f7       	brne	.-12     	; 0x1e98 <__unpack_f+0xd4>
    1ea4:	70 64       	ori	r23, 0x40	; 64
    1ea6:	14 96       	adiw	r26, 0x04	; 4
    1ea8:	4d 93       	st	X+, r20
    1eaa:	5d 93       	st	X+, r21
    1eac:	6d 93       	st	X+, r22
    1eae:	7c 93       	st	X, r23
    1eb0:	17 97       	sbiw	r26, 0x07	; 7
    1eb2:	08 95       	ret

00001eb4 <__fpcmp_parts_f>:
    1eb4:	1f 93       	push	r17
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	fb 01       	movw	r30, r22
    1eba:	9c 91       	ld	r25, X
    1ebc:	92 30       	cpi	r25, 0x02	; 2
    1ebe:	08 f4       	brcc	.+2      	; 0x1ec2 <__fpcmp_parts_f+0xe>
    1ec0:	47 c0       	rjmp	.+142    	; 0x1f50 <__fpcmp_parts_f+0x9c>
    1ec2:	80 81       	ld	r24, Z
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <__fpcmp_parts_f+0x16>
    1ec8:	43 c0       	rjmp	.+134    	; 0x1f50 <__fpcmp_parts_f+0x9c>
    1eca:	94 30       	cpi	r25, 0x04	; 4
    1ecc:	51 f4       	brne	.+20     	; 0x1ee2 <__fpcmp_parts_f+0x2e>
    1ece:	11 96       	adiw	r26, 0x01	; 1
    1ed0:	1c 91       	ld	r17, X
    1ed2:	84 30       	cpi	r24, 0x04	; 4
    1ed4:	99 f5       	brne	.+102    	; 0x1f3c <__fpcmp_parts_f+0x88>
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	68 2f       	mov	r22, r24
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	61 1b       	sub	r22, r17
    1ede:	71 09       	sbc	r23, r1
    1ee0:	3f c0       	rjmp	.+126    	; 0x1f60 <__fpcmp_parts_f+0xac>
    1ee2:	84 30       	cpi	r24, 0x04	; 4
    1ee4:	21 f0       	breq	.+8      	; 0x1eee <__fpcmp_parts_f+0x3a>
    1ee6:	92 30       	cpi	r25, 0x02	; 2
    1ee8:	31 f4       	brne	.+12     	; 0x1ef6 <__fpcmp_parts_f+0x42>
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	b9 f1       	breq	.+110    	; 0x1f5c <__fpcmp_parts_f+0xa8>
    1eee:	81 81       	ldd	r24, Z+1	; 0x01
    1ef0:	88 23       	and	r24, r24
    1ef2:	89 f1       	breq	.+98     	; 0x1f56 <__fpcmp_parts_f+0xa2>
    1ef4:	2d c0       	rjmp	.+90     	; 0x1f50 <__fpcmp_parts_f+0x9c>
    1ef6:	11 96       	adiw	r26, 0x01	; 1
    1ef8:	1c 91       	ld	r17, X
    1efa:	11 97       	sbiw	r26, 0x01	; 1
    1efc:	82 30       	cpi	r24, 0x02	; 2
    1efe:	f1 f0       	breq	.+60     	; 0x1f3c <__fpcmp_parts_f+0x88>
    1f00:	81 81       	ldd	r24, Z+1	; 0x01
    1f02:	18 17       	cp	r17, r24
    1f04:	d9 f4       	brne	.+54     	; 0x1f3c <__fpcmp_parts_f+0x88>
    1f06:	12 96       	adiw	r26, 0x02	; 2
    1f08:	2d 91       	ld	r18, X+
    1f0a:	3c 91       	ld	r19, X
    1f0c:	13 97       	sbiw	r26, 0x03	; 3
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	82 17       	cp	r24, r18
    1f14:	93 07       	cpc	r25, r19
    1f16:	94 f0       	brlt	.+36     	; 0x1f3c <__fpcmp_parts_f+0x88>
    1f18:	28 17       	cp	r18, r24
    1f1a:	39 07       	cpc	r19, r25
    1f1c:	bc f0       	brlt	.+46     	; 0x1f4c <__fpcmp_parts_f+0x98>
    1f1e:	14 96       	adiw	r26, 0x04	; 4
    1f20:	8d 91       	ld	r24, X+
    1f22:	9d 91       	ld	r25, X+
    1f24:	0d 90       	ld	r0, X+
    1f26:	bc 91       	ld	r27, X
    1f28:	a0 2d       	mov	r26, r0
    1f2a:	24 81       	ldd	r18, Z+4	; 0x04
    1f2c:	35 81       	ldd	r19, Z+5	; 0x05
    1f2e:	46 81       	ldd	r20, Z+6	; 0x06
    1f30:	57 81       	ldd	r21, Z+7	; 0x07
    1f32:	28 17       	cp	r18, r24
    1f34:	39 07       	cpc	r19, r25
    1f36:	4a 07       	cpc	r20, r26
    1f38:	5b 07       	cpc	r21, r27
    1f3a:	18 f4       	brcc	.+6      	; 0x1f42 <__fpcmp_parts_f+0x8e>
    1f3c:	11 23       	and	r17, r17
    1f3e:	41 f0       	breq	.+16     	; 0x1f50 <__fpcmp_parts_f+0x9c>
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <__fpcmp_parts_f+0xa2>
    1f42:	82 17       	cp	r24, r18
    1f44:	93 07       	cpc	r25, r19
    1f46:	a4 07       	cpc	r26, r20
    1f48:	b5 07       	cpc	r27, r21
    1f4a:	40 f4       	brcc	.+16     	; 0x1f5c <__fpcmp_parts_f+0xa8>
    1f4c:	11 23       	and	r17, r17
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <__fpcmp_parts_f+0xa2>
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <__fpcmp_parts_f+0xac>
    1f56:	6f ef       	ldi	r22, 0xFF	; 255
    1f58:	7f ef       	ldi	r23, 0xFF	; 255
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <__fpcmp_parts_f+0xac>
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	cb 01       	movw	r24, r22
    1f62:	1f 91       	pop	r17
    1f64:	08 95       	ret

00001f66 <__prologue_saves__>:
    1f66:	2f 92       	push	r2
    1f68:	3f 92       	push	r3
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	ca 1b       	sub	r28, r26
    1f90:	db 0b       	sbc	r29, r27
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	09 94       	ijmp

00001f9e <__epilogue_restores__>:
    1f9e:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa0:	39 88       	ldd	r3, Y+17	; 0x11
    1fa2:	48 88       	ldd	r4, Y+16	; 0x10
    1fa4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1faa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fac:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fae:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb0:	b9 84       	ldd	r11, Y+9	; 0x09
    1fb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb4:	df 80       	ldd	r13, Y+7	; 0x07
    1fb6:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb8:	fd 80       	ldd	r15, Y+5	; 0x05
    1fba:	0c 81       	ldd	r16, Y+4	; 0x04
    1fbc:	1b 81       	ldd	r17, Y+3	; 0x03
    1fbe:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc0:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc2:	ce 0f       	add	r28, r30
    1fc4:	d1 1d       	adc	r29, r1
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	ed 01       	movw	r28, r26
    1fd2:	08 95       	ret

00001fd4 <calloc>:
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	68 9f       	mul	r22, r24
    1fde:	80 01       	movw	r16, r0
    1fe0:	69 9f       	mul	r22, r25
    1fe2:	10 0d       	add	r17, r0
    1fe4:	78 9f       	mul	r23, r24
    1fe6:	10 0d       	add	r17, r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	c8 01       	movw	r24, r16
    1fec:	0e 94 06 10 	call	0x200c	; 0x200c <malloc>
    1ff0:	ec 01       	movw	r28, r24
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	29 f0       	breq	.+10     	; 0x2000 <calloc+0x2c>
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	a8 01       	movw	r20, r16
    1ffc:	0e 94 14 11 	call	0x2228	; 0x2228 <memset>
    2000:	ce 01       	movw	r24, r28
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <malloc>:
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	bc 01       	movw	r22, r24
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	91 05       	cpc	r25, r1
    2016:	10 f4       	brcc	.+4      	; 0x201c <malloc+0x10>
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	a0 91 03 02 	lds	r26, 0x0203
    2020:	b0 91 04 02 	lds	r27, 0x0204
    2024:	ed 01       	movw	r28, r26
    2026:	e0 e0       	ldi	r30, 0x00	; 0
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	21 c0       	rjmp	.+66     	; 0x2072 <malloc+0x66>
    2030:	88 81       	ld	r24, Y
    2032:	99 81       	ldd	r25, Y+1	; 0x01
    2034:	86 17       	cp	r24, r22
    2036:	97 07       	cpc	r25, r23
    2038:	69 f4       	brne	.+26     	; 0x2054 <malloc+0x48>
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	30 97       	sbiw	r30, 0x00	; 0
    2040:	19 f0       	breq	.+6      	; 0x2048 <malloc+0x3c>
    2042:	93 83       	std	Z+3, r25	; 0x03
    2044:	82 83       	std	Z+2, r24	; 0x02
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <malloc+0x44>
    2048:	90 93 04 02 	sts	0x0204, r25
    204c:	80 93 03 02 	sts	0x0203, r24
    2050:	fe 01       	movw	r30, r28
    2052:	34 c0       	rjmp	.+104    	; 0x20bc <malloc+0xb0>
    2054:	68 17       	cp	r22, r24
    2056:	79 07       	cpc	r23, r25
    2058:	38 f4       	brcc	.+14     	; 0x2068 <malloc+0x5c>
    205a:	41 15       	cp	r20, r1
    205c:	51 05       	cpc	r21, r1
    205e:	19 f0       	breq	.+6      	; 0x2066 <malloc+0x5a>
    2060:	84 17       	cp	r24, r20
    2062:	95 07       	cpc	r25, r21
    2064:	08 f4       	brcc	.+2      	; 0x2068 <malloc+0x5c>
    2066:	ac 01       	movw	r20, r24
    2068:	fe 01       	movw	r30, r28
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	9c 01       	movw	r18, r24
    2070:	e9 01       	movw	r28, r18
    2072:	20 97       	sbiw	r28, 0x00	; 0
    2074:	e9 f6       	brne	.-70     	; 0x2030 <malloc+0x24>
    2076:	41 15       	cp	r20, r1
    2078:	51 05       	cpc	r21, r1
    207a:	a9 f1       	breq	.+106    	; 0x20e6 <malloc+0xda>
    207c:	ca 01       	movw	r24, r20
    207e:	86 1b       	sub	r24, r22
    2080:	97 0b       	sbc	r25, r23
    2082:	04 97       	sbiw	r24, 0x04	; 4
    2084:	08 f4       	brcc	.+2      	; 0x2088 <malloc+0x7c>
    2086:	ba 01       	movw	r22, r20
    2088:	e0 e0       	ldi	r30, 0x00	; 0
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	2a c0       	rjmp	.+84     	; 0x20e2 <malloc+0xd6>
    208e:	8d 91       	ld	r24, X+
    2090:	9c 91       	ld	r25, X
    2092:	11 97       	sbiw	r26, 0x01	; 1
    2094:	84 17       	cp	r24, r20
    2096:	95 07       	cpc	r25, r21
    2098:	f9 f4       	brne	.+62     	; 0x20d8 <malloc+0xcc>
    209a:	64 17       	cp	r22, r20
    209c:	75 07       	cpc	r23, r21
    209e:	81 f4       	brne	.+32     	; 0x20c0 <malloc+0xb4>
    20a0:	12 96       	adiw	r26, 0x02	; 2
    20a2:	8d 91       	ld	r24, X+
    20a4:	9c 91       	ld	r25, X
    20a6:	13 97       	sbiw	r26, 0x03	; 3
    20a8:	30 97       	sbiw	r30, 0x00	; 0
    20aa:	19 f0       	breq	.+6      	; 0x20b2 <malloc+0xa6>
    20ac:	93 83       	std	Z+3, r25	; 0x03
    20ae:	82 83       	std	Z+2, r24	; 0x02
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <malloc+0xae>
    20b2:	90 93 04 02 	sts	0x0204, r25
    20b6:	80 93 03 02 	sts	0x0203, r24
    20ba:	fd 01       	movw	r30, r26
    20bc:	32 96       	adiw	r30, 0x02	; 2
    20be:	4f c0       	rjmp	.+158    	; 0x215e <malloc+0x152>
    20c0:	ca 01       	movw	r24, r20
    20c2:	86 1b       	sub	r24, r22
    20c4:	97 0b       	sbc	r25, r23
    20c6:	fd 01       	movw	r30, r26
    20c8:	e8 0f       	add	r30, r24
    20ca:	f9 1f       	adc	r31, r25
    20cc:	61 93       	st	Z+, r22
    20ce:	71 93       	st	Z+, r23
    20d0:	02 97       	sbiw	r24, 0x02	; 2
    20d2:	8d 93       	st	X+, r24
    20d4:	9c 93       	st	X, r25
    20d6:	43 c0       	rjmp	.+134    	; 0x215e <malloc+0x152>
    20d8:	fd 01       	movw	r30, r26
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	9c 01       	movw	r18, r24
    20e0:	d9 01       	movw	r26, r18
    20e2:	10 97       	sbiw	r26, 0x00	; 0
    20e4:	a1 f6       	brne	.-88     	; 0x208e <malloc+0x82>
    20e6:	80 91 01 02 	lds	r24, 0x0201
    20ea:	90 91 02 02 	lds	r25, 0x0202
    20ee:	89 2b       	or	r24, r25
    20f0:	41 f4       	brne	.+16     	; 0x2102 <malloc+0xf6>
    20f2:	80 91 7e 01 	lds	r24, 0x017E
    20f6:	90 91 7f 01 	lds	r25, 0x017F
    20fa:	90 93 02 02 	sts	0x0202, r25
    20fe:	80 93 01 02 	sts	0x0201, r24
    2102:	40 91 80 01 	lds	r20, 0x0180
    2106:	50 91 81 01 	lds	r21, 0x0181
    210a:	41 15       	cp	r20, r1
    210c:	51 05       	cpc	r21, r1
    210e:	41 f4       	brne	.+16     	; 0x2120 <malloc+0x114>
    2110:	4d b7       	in	r20, 0x3d	; 61
    2112:	5e b7       	in	r21, 0x3e	; 62
    2114:	80 91 7c 01 	lds	r24, 0x017C
    2118:	90 91 7d 01 	lds	r25, 0x017D
    211c:	48 1b       	sub	r20, r24
    211e:	59 0b       	sbc	r21, r25
    2120:	20 91 01 02 	lds	r18, 0x0201
    2124:	30 91 02 02 	lds	r19, 0x0202
    2128:	24 17       	cp	r18, r20
    212a:	35 07       	cpc	r19, r21
    212c:	b0 f4       	brcc	.+44     	; 0x215a <malloc+0x14e>
    212e:	ca 01       	movw	r24, r20
    2130:	82 1b       	sub	r24, r18
    2132:	93 0b       	sbc	r25, r19
    2134:	86 17       	cp	r24, r22
    2136:	97 07       	cpc	r25, r23
    2138:	80 f0       	brcs	.+32     	; 0x215a <malloc+0x14e>
    213a:	ab 01       	movw	r20, r22
    213c:	4e 5f       	subi	r20, 0xFE	; 254
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	84 17       	cp	r24, r20
    2142:	95 07       	cpc	r25, r21
    2144:	50 f0       	brcs	.+20     	; 0x215a <malloc+0x14e>
    2146:	42 0f       	add	r20, r18
    2148:	53 1f       	adc	r21, r19
    214a:	50 93 02 02 	sts	0x0202, r21
    214e:	40 93 01 02 	sts	0x0201, r20
    2152:	f9 01       	movw	r30, r18
    2154:	61 93       	st	Z+, r22
    2156:	71 93       	st	Z+, r23
    2158:	02 c0       	rjmp	.+4      	; 0x215e <malloc+0x152>
    215a:	e0 e0       	ldi	r30, 0x00	; 0
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	cf 01       	movw	r24, r30
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	08 95       	ret

00002166 <free>:
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	09 f4       	brne	.+2      	; 0x2170 <free+0xa>
    216e:	50 c0       	rjmp	.+160    	; 0x2210 <free+0xaa>
    2170:	ec 01       	movw	r28, r24
    2172:	22 97       	sbiw	r28, 0x02	; 2
    2174:	1b 82       	std	Y+3, r1	; 0x03
    2176:	1a 82       	std	Y+2, r1	; 0x02
    2178:	a0 91 03 02 	lds	r26, 0x0203
    217c:	b0 91 04 02 	lds	r27, 0x0204
    2180:	10 97       	sbiw	r26, 0x00	; 0
    2182:	09 f1       	breq	.+66     	; 0x21c6 <free+0x60>
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	ac 17       	cp	r26, r28
    218a:	bd 07       	cpc	r27, r29
    218c:	08 f1       	brcs	.+66     	; 0x21d0 <free+0x6a>
    218e:	bb 83       	std	Y+3, r27	; 0x03
    2190:	aa 83       	std	Y+2, r26	; 0x02
    2192:	fe 01       	movw	r30, r28
    2194:	21 91       	ld	r18, Z+
    2196:	31 91       	ld	r19, Z+
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	ae 17       	cp	r26, r30
    219e:	bf 07       	cpc	r27, r31
    21a0:	79 f4       	brne	.+30     	; 0x21c0 <free+0x5a>
    21a2:	8d 91       	ld	r24, X+
    21a4:	9c 91       	ld	r25, X
    21a6:	11 97       	sbiw	r26, 0x01	; 1
    21a8:	28 0f       	add	r18, r24
    21aa:	39 1f       	adc	r19, r25
    21ac:	2e 5f       	subi	r18, 0xFE	; 254
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255
    21b0:	39 83       	std	Y+1, r19	; 0x01
    21b2:	28 83       	st	Y, r18
    21b4:	12 96       	adiw	r26, 0x02	; 2
    21b6:	8d 91       	ld	r24, X+
    21b8:	9c 91       	ld	r25, X
    21ba:	13 97       	sbiw	r26, 0x03	; 3
    21bc:	9b 83       	std	Y+3, r25	; 0x03
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	41 15       	cp	r20, r1
    21c2:	51 05       	cpc	r21, r1
    21c4:	71 f4       	brne	.+28     	; 0x21e2 <free+0x7c>
    21c6:	d0 93 04 02 	sts	0x0204, r29
    21ca:	c0 93 03 02 	sts	0x0203, r28
    21ce:	20 c0       	rjmp	.+64     	; 0x2210 <free+0xaa>
    21d0:	12 96       	adiw	r26, 0x02	; 2
    21d2:	8d 91       	ld	r24, X+
    21d4:	9c 91       	ld	r25, X
    21d6:	13 97       	sbiw	r26, 0x03	; 3
    21d8:	ad 01       	movw	r20, r26
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	11 f0       	breq	.+4      	; 0x21e2 <free+0x7c>
    21de:	dc 01       	movw	r26, r24
    21e0:	d3 cf       	rjmp	.-90     	; 0x2188 <free+0x22>
    21e2:	fa 01       	movw	r30, r20
    21e4:	d3 83       	std	Z+3, r29	; 0x03
    21e6:	c2 83       	std	Z+2, r28	; 0x02
    21e8:	21 91       	ld	r18, Z+
    21ea:	31 91       	ld	r19, Z+
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	ce 17       	cp	r28, r30
    21f2:	df 07       	cpc	r29, r31
    21f4:	69 f4       	brne	.+26     	; 0x2210 <free+0xaa>
    21f6:	88 81       	ld	r24, Y
    21f8:	99 81       	ldd	r25, Y+1	; 0x01
    21fa:	28 0f       	add	r18, r24
    21fc:	39 1f       	adc	r19, r25
    21fe:	2e 5f       	subi	r18, 0xFE	; 254
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	fa 01       	movw	r30, r20
    2204:	31 83       	std	Z+1, r19	; 0x01
    2206:	20 83       	st	Z, r18
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	9b 81       	ldd	r25, Y+3	; 0x03
    220c:	93 83       	std	Z+3, r25	; 0x03
    220e:	82 83       	std	Z+2, r24	; 0x02
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	08 95       	ret

00002216 <memcpy>:
    2216:	fb 01       	movw	r30, r22
    2218:	dc 01       	movw	r26, r24
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <memcpy+0xa>
    221c:	01 90       	ld	r0, Z+
    221e:	0d 92       	st	X+, r0
    2220:	41 50       	subi	r20, 0x01	; 1
    2222:	50 40       	sbci	r21, 0x00	; 0
    2224:	d8 f7       	brcc	.-10     	; 0x221c <memcpy+0x6>
    2226:	08 95       	ret

00002228 <memset>:
    2228:	dc 01       	movw	r26, r24
    222a:	01 c0       	rjmp	.+2      	; 0x222e <memset+0x6>
    222c:	6d 93       	st	X+, r22
    222e:	41 50       	subi	r20, 0x01	; 1
    2230:	50 40       	sbci	r21, 0x00	; 0
    2232:	e0 f7       	brcc	.-8      	; 0x222c <memset+0x4>
    2234:	08 95       	ret

00002236 <sprintf>:
    2236:	ae e0       	ldi	r26, 0x0E	; 14
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e1 e2       	ldi	r30, 0x21	; 33
    223c:	f1 e1       	ldi	r31, 0x11	; 17
    223e:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__prologue_saves__+0x1c>
    2242:	0d 89       	ldd	r16, Y+21	; 0x15
    2244:	1e 89       	ldd	r17, Y+22	; 0x16
    2246:	86 e0       	ldi	r24, 0x06	; 6
    2248:	8c 83       	std	Y+4, r24	; 0x04
    224a:	1a 83       	std	Y+2, r17	; 0x02
    224c:	09 83       	std	Y+1, r16	; 0x01
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	9f e7       	ldi	r25, 0x7F	; 127
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	9e 01       	movw	r18, r28
    2258:	27 5e       	subi	r18, 0xE7	; 231
    225a:	3f 4f       	sbci	r19, 0xFF	; 255
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	6f 89       	ldd	r22, Y+23	; 0x17
    2262:	78 8d       	ldd	r23, Y+24	; 0x18
    2264:	a9 01       	movw	r20, r18
    2266:	0e 94 99 11 	call	0x2332	; 0x2332 <vfprintf>
    226a:	2f 81       	ldd	r18, Y+7	; 0x07
    226c:	38 85       	ldd	r19, Y+8	; 0x08
    226e:	02 0f       	add	r16, r18
    2270:	13 1f       	adc	r17, r19
    2272:	f8 01       	movw	r30, r16
    2274:	10 82       	st	Z, r1
    2276:	2e 96       	adiw	r28, 0x0e	; 14
    2278:	e4 e0       	ldi	r30, 0x04	; 4
    227a:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__epilogue_restores__+0x1c>

0000227e <floor>:
    227e:	3b d0       	rcall	.+118    	; 0x22f6 <__fp_trunc>
    2280:	80 f0       	brcs	.+32     	; 0x22a2 <floor+0x24>
    2282:	9f 37       	cpi	r25, 0x7F	; 127
    2284:	40 f4       	brcc	.+16     	; 0x2296 <floor+0x18>
    2286:	91 11       	cpse	r25, r1
    2288:	0e f0       	brts	.+2      	; 0x228c <floor+0xe>
    228a:	4d c0       	rjmp	.+154    	; 0x2326 <__fp_szero>
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	80 e8       	ldi	r24, 0x80	; 128
    2292:	9f eb       	ldi	r25, 0xBF	; 191
    2294:	08 95       	ret
    2296:	26 f4       	brtc	.+8      	; 0x22a0 <floor+0x22>
    2298:	1b 16       	cp	r1, r27
    229a:	61 1d       	adc	r22, r1
    229c:	71 1d       	adc	r23, r1
    229e:	81 1d       	adc	r24, r1
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <__fp_mintl>
    22a2:	1b c0       	rjmp	.+54     	; 0x22da <__fp_mpack>

000022a4 <__fp_mintl>:
    22a4:	88 23       	and	r24, r24
    22a6:	71 f4       	brne	.+28     	; 0x22c4 <__fp_mintl+0x20>
    22a8:	77 23       	and	r23, r23
    22aa:	21 f0       	breq	.+8      	; 0x22b4 <__fp_mintl+0x10>
    22ac:	98 50       	subi	r25, 0x08	; 8
    22ae:	87 2b       	or	r24, r23
    22b0:	76 2f       	mov	r23, r22
    22b2:	07 c0       	rjmp	.+14     	; 0x22c2 <__fp_mintl+0x1e>
    22b4:	66 23       	and	r22, r22
    22b6:	11 f4       	brne	.+4      	; 0x22bc <__fp_mintl+0x18>
    22b8:	99 27       	eor	r25, r25
    22ba:	0d c0       	rjmp	.+26     	; 0x22d6 <__fp_mintl+0x32>
    22bc:	90 51       	subi	r25, 0x10	; 16
    22be:	86 2b       	or	r24, r22
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	2a f0       	brmi	.+10     	; 0x22d0 <__fp_mintl+0x2c>
    22c6:	9a 95       	dec	r25
    22c8:	66 0f       	add	r22, r22
    22ca:	77 1f       	adc	r23, r23
    22cc:	88 1f       	adc	r24, r24
    22ce:	da f7       	brpl	.-10     	; 0x22c6 <__fp_mintl+0x22>
    22d0:	88 0f       	add	r24, r24
    22d2:	96 95       	lsr	r25
    22d4:	87 95       	ror	r24
    22d6:	97 f9       	bld	r25, 7
    22d8:	08 95       	ret

000022da <__fp_mpack>:
    22da:	9f 3f       	cpi	r25, 0xFF	; 255
    22dc:	31 f0       	breq	.+12     	; 0x22ea <__fp_mpack_finite+0xc>

000022de <__fp_mpack_finite>:
    22de:	91 50       	subi	r25, 0x01	; 1
    22e0:	20 f4       	brcc	.+8      	; 0x22ea <__fp_mpack_finite+0xc>
    22e2:	87 95       	ror	r24
    22e4:	77 95       	ror	r23
    22e6:	67 95       	ror	r22
    22e8:	b7 95       	ror	r27
    22ea:	88 0f       	add	r24, r24
    22ec:	91 1d       	adc	r25, r1
    22ee:	96 95       	lsr	r25
    22f0:	87 95       	ror	r24
    22f2:	97 f9       	bld	r25, 7
    22f4:	08 95       	ret

000022f6 <__fp_trunc>:
    22f6:	a2 d2       	rcall	.+1348   	; 0x283c <__fp_splitA>
    22f8:	a0 f0       	brcs	.+40     	; 0x2322 <__fp_trunc+0x2c>
    22fa:	be e7       	ldi	r27, 0x7E	; 126
    22fc:	b9 17       	cp	r27, r25
    22fe:	88 f4       	brcc	.+34     	; 0x2322 <__fp_trunc+0x2c>
    2300:	bb 27       	eor	r27, r27
    2302:	9f 38       	cpi	r25, 0x8F	; 143
    2304:	60 f4       	brcc	.+24     	; 0x231e <__fp_trunc+0x28>
    2306:	16 16       	cp	r1, r22
    2308:	b1 1d       	adc	r27, r1
    230a:	67 2f       	mov	r22, r23
    230c:	78 2f       	mov	r23, r24
    230e:	88 27       	eor	r24, r24
    2310:	98 5f       	subi	r25, 0xF8	; 248
    2312:	f7 cf       	rjmp	.-18     	; 0x2302 <__fp_trunc+0xc>
    2314:	86 95       	lsr	r24
    2316:	77 95       	ror	r23
    2318:	67 95       	ror	r22
    231a:	b1 1d       	adc	r27, r1
    231c:	93 95       	inc	r25
    231e:	96 39       	cpi	r25, 0x96	; 150
    2320:	c8 f3       	brcs	.-14     	; 0x2314 <__fp_trunc+0x1e>
    2322:	08 95       	ret

00002324 <__fp_zero>:
    2324:	e8 94       	clt

00002326 <__fp_szero>:
    2326:	bb 27       	eor	r27, r27
    2328:	66 27       	eor	r22, r22
    232a:	77 27       	eor	r23, r23
    232c:	cb 01       	movw	r24, r22
    232e:	97 f9       	bld	r25, 7
    2330:	08 95       	ret

00002332 <vfprintf>:
    2332:	ab e0       	ldi	r26, 0x0B	; 11
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	ef e9       	ldi	r30, 0x9F	; 159
    2338:	f1 e1       	ldi	r31, 0x11	; 17
    233a:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__>
    233e:	3c 01       	movw	r6, r24
    2340:	2b 01       	movw	r4, r22
    2342:	5a 01       	movw	r10, r20
    2344:	fc 01       	movw	r30, r24
    2346:	17 82       	std	Z+7, r1	; 0x07
    2348:	16 82       	std	Z+6, r1	; 0x06
    234a:	83 81       	ldd	r24, Z+3	; 0x03
    234c:	81 fd       	sbrc	r24, 1
    234e:	03 c0       	rjmp	.+6      	; 0x2356 <vfprintf+0x24>
    2350:	6f ef       	ldi	r22, 0xFF	; 255
    2352:	7f ef       	ldi	r23, 0xFF	; 255
    2354:	c6 c1       	rjmp	.+908    	; 0x26e2 <vfprintf+0x3b0>
    2356:	9a e0       	ldi	r25, 0x0A	; 10
    2358:	89 2e       	mov	r8, r25
    235a:	1e 01       	movw	r2, r28
    235c:	08 94       	sec
    235e:	21 1c       	adc	r2, r1
    2360:	31 1c       	adc	r3, r1
    2362:	f3 01       	movw	r30, r6
    2364:	23 81       	ldd	r18, Z+3	; 0x03
    2366:	f2 01       	movw	r30, r4
    2368:	23 fd       	sbrc	r18, 3
    236a:	85 91       	lpm	r24, Z+
    236c:	23 ff       	sbrs	r18, 3
    236e:	81 91       	ld	r24, Z+
    2370:	2f 01       	movw	r4, r30
    2372:	88 23       	and	r24, r24
    2374:	09 f4       	brne	.+2      	; 0x2378 <vfprintf+0x46>
    2376:	b2 c1       	rjmp	.+868    	; 0x26dc <vfprintf+0x3aa>
    2378:	85 32       	cpi	r24, 0x25	; 37
    237a:	39 f4       	brne	.+14     	; 0x238a <vfprintf+0x58>
    237c:	23 fd       	sbrc	r18, 3
    237e:	85 91       	lpm	r24, Z+
    2380:	23 ff       	sbrs	r18, 3
    2382:	81 91       	ld	r24, Z+
    2384:	2f 01       	movw	r4, r30
    2386:	85 32       	cpi	r24, 0x25	; 37
    2388:	29 f4       	brne	.+10     	; 0x2394 <vfprintf+0x62>
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	b3 01       	movw	r22, r6
    238e:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    2392:	e7 cf       	rjmp	.-50     	; 0x2362 <vfprintf+0x30>
    2394:	98 2f       	mov	r25, r24
    2396:	ff 24       	eor	r15, r15
    2398:	ee 24       	eor	r14, r14
    239a:	99 24       	eor	r9, r9
    239c:	ff e1       	ldi	r31, 0x1F	; 31
    239e:	ff 15       	cp	r31, r15
    23a0:	d0 f0       	brcs	.+52     	; 0x23d6 <vfprintf+0xa4>
    23a2:	9b 32       	cpi	r25, 0x2B	; 43
    23a4:	69 f0       	breq	.+26     	; 0x23c0 <vfprintf+0x8e>
    23a6:	9c 32       	cpi	r25, 0x2C	; 44
    23a8:	28 f4       	brcc	.+10     	; 0x23b4 <vfprintf+0x82>
    23aa:	90 32       	cpi	r25, 0x20	; 32
    23ac:	59 f0       	breq	.+22     	; 0x23c4 <vfprintf+0x92>
    23ae:	93 32       	cpi	r25, 0x23	; 35
    23b0:	91 f4       	brne	.+36     	; 0x23d6 <vfprintf+0xa4>
    23b2:	0e c0       	rjmp	.+28     	; 0x23d0 <vfprintf+0x9e>
    23b4:	9d 32       	cpi	r25, 0x2D	; 45
    23b6:	49 f0       	breq	.+18     	; 0x23ca <vfprintf+0x98>
    23b8:	90 33       	cpi	r25, 0x30	; 48
    23ba:	69 f4       	brne	.+26     	; 0x23d6 <vfprintf+0xa4>
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	24 c0       	rjmp	.+72     	; 0x2408 <vfprintf+0xd6>
    23c0:	52 e0       	ldi	r21, 0x02	; 2
    23c2:	f5 2a       	or	r15, r21
    23c4:	84 e0       	ldi	r24, 0x04	; 4
    23c6:	f8 2a       	or	r15, r24
    23c8:	28 c0       	rjmp	.+80     	; 0x241a <vfprintf+0xe8>
    23ca:	98 e0       	ldi	r25, 0x08	; 8
    23cc:	f9 2a       	or	r15, r25
    23ce:	25 c0       	rjmp	.+74     	; 0x241a <vfprintf+0xe8>
    23d0:	e0 e1       	ldi	r30, 0x10	; 16
    23d2:	fe 2a       	or	r15, r30
    23d4:	22 c0       	rjmp	.+68     	; 0x241a <vfprintf+0xe8>
    23d6:	f7 fc       	sbrc	r15, 7
    23d8:	29 c0       	rjmp	.+82     	; 0x242c <vfprintf+0xfa>
    23da:	89 2f       	mov	r24, r25
    23dc:	80 53       	subi	r24, 0x30	; 48
    23de:	8a 30       	cpi	r24, 0x0A	; 10
    23e0:	70 f4       	brcc	.+28     	; 0x23fe <vfprintf+0xcc>
    23e2:	f6 fe       	sbrs	r15, 6
    23e4:	05 c0       	rjmp	.+10     	; 0x23f0 <vfprintf+0xbe>
    23e6:	98 9c       	mul	r9, r8
    23e8:	90 2c       	mov	r9, r0
    23ea:	11 24       	eor	r1, r1
    23ec:	98 0e       	add	r9, r24
    23ee:	15 c0       	rjmp	.+42     	; 0x241a <vfprintf+0xe8>
    23f0:	e8 9c       	mul	r14, r8
    23f2:	e0 2c       	mov	r14, r0
    23f4:	11 24       	eor	r1, r1
    23f6:	e8 0e       	add	r14, r24
    23f8:	f0 e2       	ldi	r31, 0x20	; 32
    23fa:	ff 2a       	or	r15, r31
    23fc:	0e c0       	rjmp	.+28     	; 0x241a <vfprintf+0xe8>
    23fe:	9e 32       	cpi	r25, 0x2E	; 46
    2400:	29 f4       	brne	.+10     	; 0x240c <vfprintf+0xda>
    2402:	f6 fc       	sbrc	r15, 6
    2404:	6b c1       	rjmp	.+726    	; 0x26dc <vfprintf+0x3aa>
    2406:	40 e4       	ldi	r20, 0x40	; 64
    2408:	f4 2a       	or	r15, r20
    240a:	07 c0       	rjmp	.+14     	; 0x241a <vfprintf+0xe8>
    240c:	9c 36       	cpi	r25, 0x6C	; 108
    240e:	19 f4       	brne	.+6      	; 0x2416 <vfprintf+0xe4>
    2410:	50 e8       	ldi	r21, 0x80	; 128
    2412:	f5 2a       	or	r15, r21
    2414:	02 c0       	rjmp	.+4      	; 0x241a <vfprintf+0xe8>
    2416:	98 36       	cpi	r25, 0x68	; 104
    2418:	49 f4       	brne	.+18     	; 0x242c <vfprintf+0xfa>
    241a:	f2 01       	movw	r30, r4
    241c:	23 fd       	sbrc	r18, 3
    241e:	95 91       	lpm	r25, Z+
    2420:	23 ff       	sbrs	r18, 3
    2422:	91 91       	ld	r25, Z+
    2424:	2f 01       	movw	r4, r30
    2426:	99 23       	and	r25, r25
    2428:	09 f0       	breq	.+2      	; 0x242c <vfprintf+0xfa>
    242a:	b8 cf       	rjmp	.-144    	; 0x239c <vfprintf+0x6a>
    242c:	89 2f       	mov	r24, r25
    242e:	85 54       	subi	r24, 0x45	; 69
    2430:	83 30       	cpi	r24, 0x03	; 3
    2432:	18 f0       	brcs	.+6      	; 0x243a <vfprintf+0x108>
    2434:	80 52       	subi	r24, 0x20	; 32
    2436:	83 30       	cpi	r24, 0x03	; 3
    2438:	38 f4       	brcc	.+14     	; 0x2448 <vfprintf+0x116>
    243a:	44 e0       	ldi	r20, 0x04	; 4
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	a4 0e       	add	r10, r20
    2440:	b5 1e       	adc	r11, r21
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	59 83       	std	Y+1, r21	; 0x01
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <vfprintf+0x134>
    2448:	93 36       	cpi	r25, 0x63	; 99
    244a:	31 f0       	breq	.+12     	; 0x2458 <vfprintf+0x126>
    244c:	93 37       	cpi	r25, 0x73	; 115
    244e:	79 f0       	breq	.+30     	; 0x246e <vfprintf+0x13c>
    2450:	93 35       	cpi	r25, 0x53	; 83
    2452:	09 f0       	breq	.+2      	; 0x2456 <vfprintf+0x124>
    2454:	56 c0       	rjmp	.+172    	; 0x2502 <vfprintf+0x1d0>
    2456:	20 c0       	rjmp	.+64     	; 0x2498 <vfprintf+0x166>
    2458:	f5 01       	movw	r30, r10
    245a:	80 81       	ld	r24, Z
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	42 e0       	ldi	r20, 0x02	; 2
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	a4 0e       	add	r10, r20
    2464:	b5 1e       	adc	r11, r21
    2466:	61 01       	movw	r12, r2
    2468:	01 e0       	ldi	r16, 0x01	; 1
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	12 c0       	rjmp	.+36     	; 0x2492 <vfprintf+0x160>
    246e:	f5 01       	movw	r30, r10
    2470:	c0 80       	ld	r12, Z
    2472:	d1 80       	ldd	r13, Z+1	; 0x01
    2474:	f6 fc       	sbrc	r15, 6
    2476:	03 c0       	rjmp	.+6      	; 0x247e <vfprintf+0x14c>
    2478:	6f ef       	ldi	r22, 0xFF	; 255
    247a:	7f ef       	ldi	r23, 0xFF	; 255
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <vfprintf+0x150>
    247e:	69 2d       	mov	r22, r9
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	42 e0       	ldi	r20, 0x02	; 2
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	a4 0e       	add	r10, r20
    2488:	b5 1e       	adc	r11, r21
    248a:	c6 01       	movw	r24, r12
    248c:	0e 94 81 13 	call	0x2702	; 0x2702 <strnlen>
    2490:	8c 01       	movw	r16, r24
    2492:	5f e7       	ldi	r21, 0x7F	; 127
    2494:	f5 22       	and	r15, r21
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <vfprintf+0x18e>
    2498:	f5 01       	movw	r30, r10
    249a:	c0 80       	ld	r12, Z
    249c:	d1 80       	ldd	r13, Z+1	; 0x01
    249e:	f6 fc       	sbrc	r15, 6
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <vfprintf+0x176>
    24a2:	6f ef       	ldi	r22, 0xFF	; 255
    24a4:	7f ef       	ldi	r23, 0xFF	; 255
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <vfprintf+0x17a>
    24a8:	69 2d       	mov	r22, r9
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	42 e0       	ldi	r20, 0x02	; 2
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	a4 0e       	add	r10, r20
    24b2:	b5 1e       	adc	r11, r21
    24b4:	c6 01       	movw	r24, r12
    24b6:	0e 94 76 13 	call	0x26ec	; 0x26ec <strnlen_P>
    24ba:	8c 01       	movw	r16, r24
    24bc:	50 e8       	ldi	r21, 0x80	; 128
    24be:	f5 2a       	or	r15, r21
    24c0:	f3 fe       	sbrs	r15, 3
    24c2:	07 c0       	rjmp	.+14     	; 0x24d2 <vfprintf+0x1a0>
    24c4:	1a c0       	rjmp	.+52     	; 0x24fa <vfprintf+0x1c8>
    24c6:	80 e2       	ldi	r24, 0x20	; 32
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	b3 01       	movw	r22, r6
    24cc:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    24d0:	ea 94       	dec	r14
    24d2:	8e 2d       	mov	r24, r14
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	08 17       	cp	r16, r24
    24d8:	19 07       	cpc	r17, r25
    24da:	a8 f3       	brcs	.-22     	; 0x24c6 <vfprintf+0x194>
    24dc:	0e c0       	rjmp	.+28     	; 0x24fa <vfprintf+0x1c8>
    24de:	f6 01       	movw	r30, r12
    24e0:	f7 fc       	sbrc	r15, 7
    24e2:	85 91       	lpm	r24, Z+
    24e4:	f7 fe       	sbrs	r15, 7
    24e6:	81 91       	ld	r24, Z+
    24e8:	6f 01       	movw	r12, r30
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	b3 01       	movw	r22, r6
    24ee:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    24f2:	e1 10       	cpse	r14, r1
    24f4:	ea 94       	dec	r14
    24f6:	01 50       	subi	r16, 0x01	; 1
    24f8:	10 40       	sbci	r17, 0x00	; 0
    24fa:	01 15       	cp	r16, r1
    24fc:	11 05       	cpc	r17, r1
    24fe:	79 f7       	brne	.-34     	; 0x24de <vfprintf+0x1ac>
    2500:	ea c0       	rjmp	.+468    	; 0x26d6 <vfprintf+0x3a4>
    2502:	94 36       	cpi	r25, 0x64	; 100
    2504:	11 f0       	breq	.+4      	; 0x250a <vfprintf+0x1d8>
    2506:	99 36       	cpi	r25, 0x69	; 105
    2508:	69 f5       	brne	.+90     	; 0x2564 <vfprintf+0x232>
    250a:	f7 fe       	sbrs	r15, 7
    250c:	08 c0       	rjmp	.+16     	; 0x251e <vfprintf+0x1ec>
    250e:	f5 01       	movw	r30, r10
    2510:	20 81       	ld	r18, Z
    2512:	31 81       	ldd	r19, Z+1	; 0x01
    2514:	42 81       	ldd	r20, Z+2	; 0x02
    2516:	53 81       	ldd	r21, Z+3	; 0x03
    2518:	84 e0       	ldi	r24, 0x04	; 4
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0a c0       	rjmp	.+20     	; 0x2532 <vfprintf+0x200>
    251e:	f5 01       	movw	r30, r10
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	9c 01       	movw	r18, r24
    2526:	44 27       	eor	r20, r20
    2528:	37 fd       	sbrc	r19, 7
    252a:	40 95       	com	r20
    252c:	54 2f       	mov	r21, r20
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a8 0e       	add	r10, r24
    2534:	b9 1e       	adc	r11, r25
    2536:	9f e6       	ldi	r25, 0x6F	; 111
    2538:	f9 22       	and	r15, r25
    253a:	57 ff       	sbrs	r21, 7
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <vfprintf+0x21e>
    253e:	50 95       	com	r21
    2540:	40 95       	com	r20
    2542:	30 95       	com	r19
    2544:	21 95       	neg	r18
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	4f 4f       	sbci	r20, 0xFF	; 255
    254a:	5f 4f       	sbci	r21, 0xFF	; 255
    254c:	e0 e8       	ldi	r30, 0x80	; 128
    254e:	fe 2a       	or	r15, r30
    2550:	ca 01       	movw	r24, r20
    2552:	b9 01       	movw	r22, r18
    2554:	a1 01       	movw	r20, r2
    2556:	2a e0       	ldi	r18, 0x0A	; 10
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	0e 94 b8 13 	call	0x2770	; 0x2770 <__ultoa_invert>
    255e:	d8 2e       	mov	r13, r24
    2560:	d2 18       	sub	r13, r2
    2562:	40 c0       	rjmp	.+128    	; 0x25e4 <vfprintf+0x2b2>
    2564:	95 37       	cpi	r25, 0x75	; 117
    2566:	29 f4       	brne	.+10     	; 0x2572 <vfprintf+0x240>
    2568:	1f 2d       	mov	r17, r15
    256a:	1f 7e       	andi	r17, 0xEF	; 239
    256c:	2a e0       	ldi	r18, 0x0A	; 10
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	1d c0       	rjmp	.+58     	; 0x25ac <vfprintf+0x27a>
    2572:	1f 2d       	mov	r17, r15
    2574:	19 7f       	andi	r17, 0xF9	; 249
    2576:	9f 36       	cpi	r25, 0x6F	; 111
    2578:	61 f0       	breq	.+24     	; 0x2592 <vfprintf+0x260>
    257a:	90 37       	cpi	r25, 0x70	; 112
    257c:	20 f4       	brcc	.+8      	; 0x2586 <vfprintf+0x254>
    257e:	98 35       	cpi	r25, 0x58	; 88
    2580:	09 f0       	breq	.+2      	; 0x2584 <vfprintf+0x252>
    2582:	ac c0       	rjmp	.+344    	; 0x26dc <vfprintf+0x3aa>
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <vfprintf+0x272>
    2586:	90 37       	cpi	r25, 0x70	; 112
    2588:	39 f0       	breq	.+14     	; 0x2598 <vfprintf+0x266>
    258a:	98 37       	cpi	r25, 0x78	; 120
    258c:	09 f0       	breq	.+2      	; 0x2590 <vfprintf+0x25e>
    258e:	a6 c0       	rjmp	.+332    	; 0x26dc <vfprintf+0x3aa>
    2590:	04 c0       	rjmp	.+8      	; 0x259a <vfprintf+0x268>
    2592:	28 e0       	ldi	r18, 0x08	; 8
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	0a c0       	rjmp	.+20     	; 0x25ac <vfprintf+0x27a>
    2598:	10 61       	ori	r17, 0x10	; 16
    259a:	14 fd       	sbrc	r17, 4
    259c:	14 60       	ori	r17, 0x04	; 4
    259e:	20 e1       	ldi	r18, 0x10	; 16
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <vfprintf+0x27a>
    25a4:	14 fd       	sbrc	r17, 4
    25a6:	16 60       	ori	r17, 0x06	; 6
    25a8:	20 e1       	ldi	r18, 0x10	; 16
    25aa:	32 e0       	ldi	r19, 0x02	; 2
    25ac:	17 ff       	sbrs	r17, 7
    25ae:	08 c0       	rjmp	.+16     	; 0x25c0 <vfprintf+0x28e>
    25b0:	f5 01       	movw	r30, r10
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	44 e0       	ldi	r20, 0x04	; 4
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	08 c0       	rjmp	.+16     	; 0x25d0 <vfprintf+0x29e>
    25c0:	f5 01       	movw	r30, r10
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	bc 01       	movw	r22, r24
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	42 e0       	ldi	r20, 0x02	; 2
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	a4 0e       	add	r10, r20
    25d2:	b5 1e       	adc	r11, r21
    25d4:	a1 01       	movw	r20, r2
    25d6:	0e 94 b8 13 	call	0x2770	; 0x2770 <__ultoa_invert>
    25da:	d8 2e       	mov	r13, r24
    25dc:	d2 18       	sub	r13, r2
    25de:	8f e7       	ldi	r24, 0x7F	; 127
    25e0:	f8 2e       	mov	r15, r24
    25e2:	f1 22       	and	r15, r17
    25e4:	f6 fe       	sbrs	r15, 6
    25e6:	0b c0       	rjmp	.+22     	; 0x25fe <vfprintf+0x2cc>
    25e8:	5e ef       	ldi	r21, 0xFE	; 254
    25ea:	f5 22       	and	r15, r21
    25ec:	d9 14       	cp	r13, r9
    25ee:	38 f4       	brcc	.+14     	; 0x25fe <vfprintf+0x2cc>
    25f0:	f4 fe       	sbrs	r15, 4
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <vfprintf+0x2d0>
    25f4:	f2 fc       	sbrc	r15, 2
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <vfprintf+0x2d0>
    25f8:	8f ee       	ldi	r24, 0xEF	; 239
    25fa:	f8 22       	and	r15, r24
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <vfprintf+0x2d0>
    25fe:	1d 2d       	mov	r17, r13
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <vfprintf+0x2d2>
    2602:	19 2d       	mov	r17, r9
    2604:	f4 fe       	sbrs	r15, 4
    2606:	0d c0       	rjmp	.+26     	; 0x2622 <vfprintf+0x2f0>
    2608:	fe 01       	movw	r30, r28
    260a:	ed 0d       	add	r30, r13
    260c:	f1 1d       	adc	r31, r1
    260e:	80 81       	ld	r24, Z
    2610:	80 33       	cpi	r24, 0x30	; 48
    2612:	19 f4       	brne	.+6      	; 0x261a <vfprintf+0x2e8>
    2614:	99 ee       	ldi	r25, 0xE9	; 233
    2616:	f9 22       	and	r15, r25
    2618:	08 c0       	rjmp	.+16     	; 0x262a <vfprintf+0x2f8>
    261a:	1f 5f       	subi	r17, 0xFF	; 255
    261c:	f2 fe       	sbrs	r15, 2
    261e:	05 c0       	rjmp	.+10     	; 0x262a <vfprintf+0x2f8>
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <vfprintf+0x2f6>
    2622:	8f 2d       	mov	r24, r15
    2624:	86 78       	andi	r24, 0x86	; 134
    2626:	09 f0       	breq	.+2      	; 0x262a <vfprintf+0x2f8>
    2628:	1f 5f       	subi	r17, 0xFF	; 255
    262a:	0f 2d       	mov	r16, r15
    262c:	f3 fc       	sbrc	r15, 3
    262e:	14 c0       	rjmp	.+40     	; 0x2658 <vfprintf+0x326>
    2630:	f0 fe       	sbrs	r15, 0
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <vfprintf+0x320>
    2634:	1e 15       	cp	r17, r14
    2636:	10 f0       	brcs	.+4      	; 0x263c <vfprintf+0x30a>
    2638:	9d 2c       	mov	r9, r13
    263a:	0b c0       	rjmp	.+22     	; 0x2652 <vfprintf+0x320>
    263c:	9d 2c       	mov	r9, r13
    263e:	9e 0c       	add	r9, r14
    2640:	91 1a       	sub	r9, r17
    2642:	1e 2d       	mov	r17, r14
    2644:	06 c0       	rjmp	.+12     	; 0x2652 <vfprintf+0x320>
    2646:	80 e2       	ldi	r24, 0x20	; 32
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	b3 01       	movw	r22, r6
    264c:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    2650:	1f 5f       	subi	r17, 0xFF	; 255
    2652:	1e 15       	cp	r17, r14
    2654:	c0 f3       	brcs	.-16     	; 0x2646 <vfprintf+0x314>
    2656:	04 c0       	rjmp	.+8      	; 0x2660 <vfprintf+0x32e>
    2658:	1e 15       	cp	r17, r14
    265a:	10 f4       	brcc	.+4      	; 0x2660 <vfprintf+0x32e>
    265c:	e1 1a       	sub	r14, r17
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <vfprintf+0x330>
    2660:	ee 24       	eor	r14, r14
    2662:	04 ff       	sbrs	r16, 4
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <vfprintf+0x352>
    2666:	80 e3       	ldi	r24, 0x30	; 48
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	b3 01       	movw	r22, r6
    266c:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    2670:	02 ff       	sbrs	r16, 2
    2672:	1d c0       	rjmp	.+58     	; 0x26ae <vfprintf+0x37c>
    2674:	01 fd       	sbrc	r16, 1
    2676:	03 c0       	rjmp	.+6      	; 0x267e <vfprintf+0x34c>
    2678:	88 e7       	ldi	r24, 0x78	; 120
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e c0       	rjmp	.+28     	; 0x269a <vfprintf+0x368>
    267e:	88 e5       	ldi	r24, 0x58	; 88
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0b c0       	rjmp	.+22     	; 0x269a <vfprintf+0x368>
    2684:	80 2f       	mov	r24, r16
    2686:	86 78       	andi	r24, 0x86	; 134
    2688:	91 f0       	breq	.+36     	; 0x26ae <vfprintf+0x37c>
    268a:	01 ff       	sbrs	r16, 1
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <vfprintf+0x360>
    268e:	8b e2       	ldi	r24, 0x2B	; 43
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <vfprintf+0x362>
    2692:	80 e2       	ldi	r24, 0x20	; 32
    2694:	f7 fc       	sbrc	r15, 7
    2696:	8d e2       	ldi	r24, 0x2D	; 45
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	b3 01       	movw	r22, r6
    269c:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <vfprintf+0x37c>
    26a2:	80 e3       	ldi	r24, 0x30	; 48
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	b3 01       	movw	r22, r6
    26a8:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    26ac:	9a 94       	dec	r9
    26ae:	d9 14       	cp	r13, r9
    26b0:	c0 f3       	brcs	.-16     	; 0x26a2 <vfprintf+0x370>
    26b2:	da 94       	dec	r13
    26b4:	f1 01       	movw	r30, r2
    26b6:	ed 0d       	add	r30, r13
    26b8:	f1 1d       	adc	r31, r1
    26ba:	80 81       	ld	r24, Z
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	b3 01       	movw	r22, r6
    26c0:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    26c4:	dd 20       	and	r13, r13
    26c6:	a9 f7       	brne	.-22     	; 0x26b2 <vfprintf+0x380>
    26c8:	06 c0       	rjmp	.+12     	; 0x26d6 <vfprintf+0x3a4>
    26ca:	80 e2       	ldi	r24, 0x20	; 32
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	b3 01       	movw	r22, r6
    26d0:	0e 94 8c 13 	call	0x2718	; 0x2718 <fputc>
    26d4:	ea 94       	dec	r14
    26d6:	ee 20       	and	r14, r14
    26d8:	c1 f7       	brne	.-16     	; 0x26ca <vfprintf+0x398>
    26da:	43 ce       	rjmp	.-890    	; 0x2362 <vfprintf+0x30>
    26dc:	f3 01       	movw	r30, r6
    26de:	66 81       	ldd	r22, Z+6	; 0x06
    26e0:	77 81       	ldd	r23, Z+7	; 0x07
    26e2:	cb 01       	movw	r24, r22
    26e4:	2b 96       	adiw	r28, 0x0b	; 11
    26e6:	e2 e1       	ldi	r30, 0x12	; 18
    26e8:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__>

000026ec <strnlen_P>:
    26ec:	fc 01       	movw	r30, r24
    26ee:	05 90       	lpm	r0, Z+
    26f0:	61 50       	subi	r22, 0x01	; 1
    26f2:	70 40       	sbci	r23, 0x00	; 0
    26f4:	01 10       	cpse	r0, r1
    26f6:	d8 f7       	brcc	.-10     	; 0x26ee <strnlen_P+0x2>
    26f8:	80 95       	com	r24
    26fa:	90 95       	com	r25
    26fc:	8e 0f       	add	r24, r30
    26fe:	9f 1f       	adc	r25, r31
    2700:	08 95       	ret

00002702 <strnlen>:
    2702:	fc 01       	movw	r30, r24
    2704:	61 50       	subi	r22, 0x01	; 1
    2706:	70 40       	sbci	r23, 0x00	; 0
    2708:	01 90       	ld	r0, Z+
    270a:	01 10       	cpse	r0, r1
    270c:	d8 f7       	brcc	.-10     	; 0x2704 <strnlen+0x2>
    270e:	80 95       	com	r24
    2710:	90 95       	com	r25
    2712:	8e 0f       	add	r24, r30
    2714:	9f 1f       	adc	r25, r31
    2716:	08 95       	ret

00002718 <fputc>:
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	8c 01       	movw	r16, r24
    2722:	eb 01       	movw	r28, r22
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	81 ff       	sbrs	r24, 1
    2728:	1b c0       	rjmp	.+54     	; 0x2760 <fputc+0x48>
    272a:	82 ff       	sbrs	r24, 2
    272c:	0d c0       	rjmp	.+26     	; 0x2748 <fputc+0x30>
    272e:	2e 81       	ldd	r18, Y+6	; 0x06
    2730:	3f 81       	ldd	r19, Y+7	; 0x07
    2732:	8c 81       	ldd	r24, Y+4	; 0x04
    2734:	9d 81       	ldd	r25, Y+5	; 0x05
    2736:	28 17       	cp	r18, r24
    2738:	39 07       	cpc	r19, r25
    273a:	64 f4       	brge	.+24     	; 0x2754 <fputc+0x3c>
    273c:	e8 81       	ld	r30, Y
    273e:	f9 81       	ldd	r31, Y+1	; 0x01
    2740:	01 93       	st	Z+, r16
    2742:	f9 83       	std	Y+1, r31	; 0x01
    2744:	e8 83       	st	Y, r30
    2746:	06 c0       	rjmp	.+12     	; 0x2754 <fputc+0x3c>
    2748:	e8 85       	ldd	r30, Y+8	; 0x08
    274a:	f9 85       	ldd	r31, Y+9	; 0x09
    274c:	80 2f       	mov	r24, r16
    274e:	09 95       	icall
    2750:	89 2b       	or	r24, r25
    2752:	31 f4       	brne	.+12     	; 0x2760 <fputc+0x48>
    2754:	8e 81       	ldd	r24, Y+6	; 0x06
    2756:	9f 81       	ldd	r25, Y+7	; 0x07
    2758:	01 96       	adiw	r24, 0x01	; 1
    275a:	9f 83       	std	Y+7, r25	; 0x07
    275c:	8e 83       	std	Y+6, r24	; 0x06
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <fputc+0x4c>
    2760:	0f ef       	ldi	r16, 0xFF	; 255
    2762:	1f ef       	ldi	r17, 0xFF	; 255
    2764:	c8 01       	movw	r24, r16
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	08 95       	ret

00002770 <__ultoa_invert>:
    2770:	fa 01       	movw	r30, r20
    2772:	aa 27       	eor	r26, r26
    2774:	28 30       	cpi	r18, 0x08	; 8
    2776:	51 f1       	breq	.+84     	; 0x27cc <__ultoa_invert+0x5c>
    2778:	20 31       	cpi	r18, 0x10	; 16
    277a:	81 f1       	breq	.+96     	; 0x27dc <__ultoa_invert+0x6c>
    277c:	e8 94       	clt
    277e:	6f 93       	push	r22
    2780:	6e 7f       	andi	r22, 0xFE	; 254
    2782:	6e 5f       	subi	r22, 0xFE	; 254
    2784:	7f 4f       	sbci	r23, 0xFF	; 255
    2786:	8f 4f       	sbci	r24, 0xFF	; 255
    2788:	9f 4f       	sbci	r25, 0xFF	; 255
    278a:	af 4f       	sbci	r26, 0xFF	; 255
    278c:	b1 e0       	ldi	r27, 0x01	; 1
    278e:	3e d0       	rcall	.+124    	; 0x280c <__ultoa_invert+0x9c>
    2790:	b4 e0       	ldi	r27, 0x04	; 4
    2792:	3c d0       	rcall	.+120    	; 0x280c <__ultoa_invert+0x9c>
    2794:	67 0f       	add	r22, r23
    2796:	78 1f       	adc	r23, r24
    2798:	89 1f       	adc	r24, r25
    279a:	9a 1f       	adc	r25, r26
    279c:	a1 1d       	adc	r26, r1
    279e:	68 0f       	add	r22, r24
    27a0:	79 1f       	adc	r23, r25
    27a2:	8a 1f       	adc	r24, r26
    27a4:	91 1d       	adc	r25, r1
    27a6:	a1 1d       	adc	r26, r1
    27a8:	6a 0f       	add	r22, r26
    27aa:	71 1d       	adc	r23, r1
    27ac:	81 1d       	adc	r24, r1
    27ae:	91 1d       	adc	r25, r1
    27b0:	a1 1d       	adc	r26, r1
    27b2:	20 d0       	rcall	.+64     	; 0x27f4 <__ultoa_invert+0x84>
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <__ultoa_invert+0x48>
    27b6:	68 94       	set
    27b8:	3f 91       	pop	r19
    27ba:	2a e0       	ldi	r18, 0x0A	; 10
    27bc:	26 9f       	mul	r18, r22
    27be:	11 24       	eor	r1, r1
    27c0:	30 19       	sub	r19, r0
    27c2:	30 5d       	subi	r19, 0xD0	; 208
    27c4:	31 93       	st	Z+, r19
    27c6:	de f6       	brtc	.-74     	; 0x277e <__ultoa_invert+0xe>
    27c8:	cf 01       	movw	r24, r30
    27ca:	08 95       	ret
    27cc:	46 2f       	mov	r20, r22
    27ce:	47 70       	andi	r20, 0x07	; 7
    27d0:	40 5d       	subi	r20, 0xD0	; 208
    27d2:	41 93       	st	Z+, r20
    27d4:	b3 e0       	ldi	r27, 0x03	; 3
    27d6:	0f d0       	rcall	.+30     	; 0x27f6 <__ultoa_invert+0x86>
    27d8:	c9 f7       	brne	.-14     	; 0x27cc <__ultoa_invert+0x5c>
    27da:	f6 cf       	rjmp	.-20     	; 0x27c8 <__ultoa_invert+0x58>
    27dc:	46 2f       	mov	r20, r22
    27de:	4f 70       	andi	r20, 0x0F	; 15
    27e0:	40 5d       	subi	r20, 0xD0	; 208
    27e2:	4a 33       	cpi	r20, 0x3A	; 58
    27e4:	18 f0       	brcs	.+6      	; 0x27ec <__ultoa_invert+0x7c>
    27e6:	49 5d       	subi	r20, 0xD9	; 217
    27e8:	31 fd       	sbrc	r19, 1
    27ea:	40 52       	subi	r20, 0x20	; 32
    27ec:	41 93       	st	Z+, r20
    27ee:	02 d0       	rcall	.+4      	; 0x27f4 <__ultoa_invert+0x84>
    27f0:	a9 f7       	brne	.-22     	; 0x27dc <__ultoa_invert+0x6c>
    27f2:	ea cf       	rjmp	.-44     	; 0x27c8 <__ultoa_invert+0x58>
    27f4:	b4 e0       	ldi	r27, 0x04	; 4
    27f6:	a6 95       	lsr	r26
    27f8:	97 95       	ror	r25
    27fa:	87 95       	ror	r24
    27fc:	77 95       	ror	r23
    27fe:	67 95       	ror	r22
    2800:	ba 95       	dec	r27
    2802:	c9 f7       	brne	.-14     	; 0x27f6 <__ultoa_invert+0x86>
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	61 05       	cpc	r22, r1
    2808:	71 05       	cpc	r23, r1
    280a:	08 95       	ret
    280c:	9b 01       	movw	r18, r22
    280e:	ac 01       	movw	r20, r24
    2810:	0a 2e       	mov	r0, r26
    2812:	06 94       	lsr	r0
    2814:	57 95       	ror	r21
    2816:	47 95       	ror	r20
    2818:	37 95       	ror	r19
    281a:	27 95       	ror	r18
    281c:	ba 95       	dec	r27
    281e:	c9 f7       	brne	.-14     	; 0x2812 <__ultoa_invert+0xa2>
    2820:	62 0f       	add	r22, r18
    2822:	73 1f       	adc	r23, r19
    2824:	84 1f       	adc	r24, r20
    2826:	95 1f       	adc	r25, r21
    2828:	a0 1d       	adc	r26, r0
    282a:	08 95       	ret

0000282c <__fp_split3>:
    282c:	57 fd       	sbrc	r21, 7
    282e:	90 58       	subi	r25, 0x80	; 128
    2830:	44 0f       	add	r20, r20
    2832:	55 1f       	adc	r21, r21
    2834:	59 f0       	breq	.+22     	; 0x284c <__fp_splitA+0x10>
    2836:	5f 3f       	cpi	r21, 0xFF	; 255
    2838:	71 f0       	breq	.+28     	; 0x2856 <__fp_splitA+0x1a>
    283a:	47 95       	ror	r20

0000283c <__fp_splitA>:
    283c:	88 0f       	add	r24, r24
    283e:	97 fb       	bst	r25, 7
    2840:	99 1f       	adc	r25, r25
    2842:	61 f0       	breq	.+24     	; 0x285c <__fp_splitA+0x20>
    2844:	9f 3f       	cpi	r25, 0xFF	; 255
    2846:	79 f0       	breq	.+30     	; 0x2866 <__fp_splitA+0x2a>
    2848:	87 95       	ror	r24
    284a:	08 95       	ret
    284c:	12 16       	cp	r1, r18
    284e:	13 06       	cpc	r1, r19
    2850:	14 06       	cpc	r1, r20
    2852:	55 1f       	adc	r21, r21
    2854:	f2 cf       	rjmp	.-28     	; 0x283a <__fp_split3+0xe>
    2856:	46 95       	lsr	r20
    2858:	f1 df       	rcall	.-30     	; 0x283c <__fp_splitA>
    285a:	08 c0       	rjmp	.+16     	; 0x286c <__fp_splitA+0x30>
    285c:	16 16       	cp	r1, r22
    285e:	17 06       	cpc	r1, r23
    2860:	18 06       	cpc	r1, r24
    2862:	99 1f       	adc	r25, r25
    2864:	f1 cf       	rjmp	.-30     	; 0x2848 <__fp_splitA+0xc>
    2866:	86 95       	lsr	r24
    2868:	71 05       	cpc	r23, r1
    286a:	61 05       	cpc	r22, r1
    286c:	08 94       	sec
    286e:	08 95       	ret

00002870 <_exit>:
    2870:	f8 94       	cli

00002872 <__stop_program>:
    2872:	ff cf       	rjmp	.-2      	; 0x2872 <__stop_program>
