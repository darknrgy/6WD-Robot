
DualChannelCounter1PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002814  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002814  000028a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000081  00800182  00800182  000029ca  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000643  00000000  00000000  00002c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c89  00000000  00000000  000032cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e83  00000000  00000000  00006f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000023a0  00000000  00000000  00008dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000560  00000000  00000000  0000b17c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000089a  00000000  00000000  0000b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001086  00000000  00000000  0000bf76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000cffc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_1>
       8:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_2>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 35 04 	jmp	0x86a	; 0x86a <__vector_5>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_13>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000054 <__c.1708>:
      54:	21 62 75 66 66 65 72 5f 66 75 6c 6c 0a 00           !buffer_full..

00000062 <__c.1696>:
      62:	21 66 72 61 6d 69 6e 67 5f 65 72 72 6f 72 0a 00     !framing_error..

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e4 e1       	ldi	r30, 0x14	; 20
      86:	f8 e2       	ldi	r31, 0x28	; 40
      88:	02 c0       	rjmp	.+4      	; 0x8e <.do_copy_data_start>

0000008a <.do_copy_data_loop>:
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0

0000008e <.do_copy_data_start>:
      8e:	a2 38       	cpi	r26, 0x82	; 130
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <.do_copy_data_loop>

00000094 <__do_clear_bss>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a2 e8       	ldi	r26, 0x82	; 130
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a3 30       	cpi	r26, 0x03	; 3
      a0:	b1 07       	cpc	r27, r17
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 d3 05 	call	0xba6	; 0xba6 <main>
      a8:	0c 94 08 14 	jmp	0x2810	; 0x2810 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <usart_init>:
char usart_rxbuff[32];
uint8_t usart_position;

void usart_init(){
    
    UBRRH = UBRRH_VALUE;
      b0:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
      b2:	82 e2       	ldi	r24, 0x22	; 34
      b4:	89 b9       	out	0x09, r24	; 9
    #if USE_2X
    setbit(UCSRA, BIT(U2X));
      b6:	59 9a       	sbi	0x0b, 1	; 11
    #else
    clearbit(UCSRA, BIT(U2X));
    #endif

	// Enable receiver and transmitter
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
      b8:	8a b1       	in	r24, 0x0a	; 10
      ba:	88 69       	ori	r24, 0x98	; 152
      bc:	8a b9       	out	0x0a, r24	; 10
}
      be:	08 95       	ret

000000c0 <usart_putchr>:

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
      c0:	5d 9b       	sbis	0x0b, 5	; 11
      c2:	fe cf       	rjmp	.-4      	; 0xc0 <usart_putchr>
	UDR = c;
      c4:	8c b9       	out	0x0c, r24	; 12
}
      c6:	08 95       	ret

000000c8 <usart_send>:

void usart_send(const char *s){
      c8:	fc 01       	movw	r30, r24
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
      ca:	9d e0       	ldi	r25, 0x0D	; 13
      cc:	09 c0       	rjmp	.+18     	; 0xe0 <usart_send+0x18>
}

void usart_send(const char *s){
	RETURN_IF_AVRSIM;
	while (*s){
		if (*s == '\n') usart_putchr('\r');
      ce:	8a 30       	cpi	r24, 0x0A	; 10
      d0:	19 f4       	brne	.+6      	; 0xd8 <usart_send+0x10>
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
      d2:	5d 9b       	sbis	0x0b, 5	; 11
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <usart_send+0xa>
	UDR = c;
      d6:	9c b9       	out	0x0c, r25	; 12
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
      d8:	5d 9b       	sbis	0x0b, 5	; 11
      da:	fe cf       	rjmp	.-4      	; 0xd8 <usart_send+0x10>

void usart_send(const char *s){
	RETURN_IF_AVRSIM;
	while (*s){
		if (*s == '\n') usart_putchr('\r');
      	usart_putchr(*s++);
      dc:	31 96       	adiw	r30, 0x01	; 1
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
      de:	8c b9       	out	0x0c, r24	; 12
}

void usart_send(const char *s){
	RETURN_IF_AVRSIM;
	while (*s){
      e0:	80 81       	ld	r24, Z
      e2:	88 23       	and	r24, r24
      e4:	a1 f7       	brne	.-24     	; 0xce <usart_send+0x6>
		if (*s == '\n') usart_putchr('\r');
      	usart_putchr(*s++);
    }
}
      e6:	08 95       	ret

000000e8 <usart_send_by_length>:

void usart_send_by_length(const char *s, uint8_t length){
      e8:	fc 01       	movw	r30, r24
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	06 c0       	rjmp	.+12     	; 0xfa <usart_send_by_length+0x12>
	RETURN_IF_AVRSIM;
	static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	for (uint8_t i = 0; i < length; i++){
		usart_putchr(s[i]);
      ee:	90 81       	ld	r25, Z
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
      f0:	5d 9b       	sbis	0x0b, 5	; 11
      f2:	fe cf       	rjmp	.-4      	; 0xf0 <usart_send_by_length+0x8>
	UDR = c;
      f4:	9c b9       	out	0x0c, r25	; 12
}

void usart_send_by_length(const char *s, uint8_t length){
	RETURN_IF_AVRSIM;
	static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	for (uint8_t i = 0; i < length; i++){
      f6:	8f 5f       	subi	r24, 0xFF	; 255
      f8:	31 96       	adiw	r30, 0x01	; 1
      fa:	86 17       	cp	r24, r22
      fc:	c0 f3       	brcs	.-16     	; 0xee <usart_send_by_length+0x6>
      fe:	ed e6       	ldi	r30, 0x6D	; 109
     100:	f0 e0       	ldi	r31, 0x00	; 0
		usart_putchr(s[i]);
	}
	for (uint8_t i = 0; i < 5; i ++){
		usart_putchr(terminator[i]);
     102:	80 81       	ld	r24, Z
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     104:	5d 9b       	sbis	0x0b, 5	; 11
     106:	fe cf       	rjmp	.-4      	; 0x104 <usart_send_by_length+0x1c>
	UDR = c;
     108:	8c b9       	out	0x0c, r24	; 12
     10a:	31 96       	adiw	r30, 0x01	; 1
	RETURN_IF_AVRSIM;
	static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	for (uint8_t i = 0; i < length; i++){
		usart_putchr(s[i]);
	}
	for (uint8_t i = 0; i < 5; i ++){
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	e2 37       	cpi	r30, 0x72	; 114
     110:	f8 07       	cpc	r31, r24
     112:	b9 f7       	brne	.-18     	; 0x102 <usart_send_by_length+0x1a>
		usart_putchr(terminator[i]);
	}
}
     114:	08 95       	ret

00000116 <usart_psend>:

void usart_psend(const char *s){
     116:	fc 01       	movw	r30, r24
	RETURN_IF_AVRSIM;
    static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	char c;
    for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s)){
     118:	84 91       	lpm	r24, Z+
     11a:	05 c0       	rjmp	.+10     	; 0x126 <usart_psend+0x10>
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     11c:	5d 9b       	sbis	0x0b, 5	; 11
     11e:	fe cf       	rjmp	.-4      	; 0x11c <usart_psend+0x6>
	UDR = c;
     120:	8c b9       	out	0x0c, r24	; 12

void usart_psend(const char *s){
	RETURN_IF_AVRSIM;
    static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	char c;
    for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s)){
     122:	31 96       	adiw	r30, 0x01	; 1
     124:	84 91       	lpm	r24, Z+
     126:	88 23       	and	r24, r24
     128:	c9 f7       	brne	.-14     	; 0x11c <usart_psend+0x6>
     12a:	e8 e6       	ldi	r30, 0x68	; 104
     12c:	f0 e0       	ldi	r31, 0x00	; 0
        usart_putchr(c);
    }
	for (uint8_t i = 0; i < 5; i ++){
		usart_putchr(terminator[i])	;	
     12e:	80 81       	ld	r24, Z
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     130:	5d 9b       	sbis	0x0b, 5	; 11
     132:	fe cf       	rjmp	.-4      	; 0x130 <usart_psend+0x1a>
	UDR = c;
     134:	8c b9       	out	0x0c, r24	; 12
     136:	31 96       	adiw	r30, 0x01	; 1
    static char terminator[] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	char c;
    for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s)){
        usart_putchr(c);
    }
	for (uint8_t i = 0; i < 5; i ++){
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	ed 36       	cpi	r30, 0x6D	; 109
     13c:	f8 07       	cpc	r31, r24
     13e:	b9 f7       	brne	.-18     	; 0x12e <usart_psend+0x18>
		usart_putchr(terminator[i])	;	
	}


}
     140:	08 95       	ret

00000142 <usart_print_int32_hex>:
	usart_send_by_length(str, strlen(str));	
	
}


void usart_print_int32_hex(uint32_t v){
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	c0 54       	subi	r28, 0x40	; 64
     150:	d0 40       	sbci	r29, 0x00	; 0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	f8 94       	cli
     156:	de bf       	out	0x3e, r29	; 62
     158:	0f be       	out	0x3f, r0	; 63
     15a:	cd bf       	out	0x3d, r28	; 61
	RETURN_IF_AVRSIM;
	char str[64] = "";
     15c:	19 82       	std	Y+1, r1	; 0x01
     15e:	1a 82       	std	Y+2, r1	; 0x02
     160:	1b 82       	std	Y+3, r1	; 0x03
     162:	1c 82       	std	Y+4, r1	; 0x04
     164:	fe 01       	movw	r30, r28
     166:	35 96       	adiw	r30, 0x05	; 5
     168:	2c e3       	ldi	r18, 0x3C	; 60
     16a:	df 01       	movw	r26, r30
     16c:	1d 92       	st	X+, r1
     16e:	2a 95       	dec	r18
     170:	e9 f7       	brne	.-6      	; 0x16c <usart_print_int32_hex+0x2a>
	sprintf(str, "%" PRIX32, v);
     172:	2d b7       	in	r18, 0x3d	; 61
     174:	3e b7       	in	r19, 0x3e	; 62
     176:	28 50       	subi	r18, 0x08	; 8
     178:	30 40       	sbci	r19, 0x00	; 0
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	3e bf       	out	0x3e, r19	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	2d bf       	out	0x3d, r18	; 61
     184:	ed b7       	in	r30, 0x3d	; 61
     186:	fe b7       	in	r31, 0x3e	; 62
     188:	31 96       	adiw	r30, 0x01	; 1
     18a:	8e 01       	movw	r16, r28
     18c:	0f 5f       	subi	r16, 0xFF	; 255
     18e:	1f 4f       	sbci	r17, 0xFF	; 255
     190:	ad b7       	in	r26, 0x3d	; 61
     192:	be b7       	in	r27, 0x3e	; 62
     194:	12 96       	adiw	r26, 0x02	; 2
     196:	1c 93       	st	X, r17
     198:	0e 93       	st	-X, r16
     19a:	11 97       	sbiw	r26, 0x01	; 1
     19c:	20 e6       	ldi	r18, 0x60	; 96
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	33 83       	std	Z+3, r19	; 0x03
     1a2:	22 83       	std	Z+2, r18	; 0x02
     1a4:	64 83       	std	Z+4, r22	; 0x04
     1a6:	75 83       	std	Z+5, r23	; 0x05
     1a8:	86 83       	std	Z+6, r24	; 0x06
     1aa:	97 83       	std	Z+7, r25	; 0x07
     1ac:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <sprintf>
	usart_send_by_length(str, strlen(str));	
     1b0:	f8 01       	movw	r30, r16
     1b2:	01 90       	ld	r0, Z+
     1b4:	00 20       	and	r0, r0
     1b6:	e9 f7       	brne	.-6      	; 0x1b2 <usart_print_int32_hex+0x70>
     1b8:	31 97       	sbiw	r30, 0x01	; 1
     1ba:	e0 1b       	sub	r30, r16
     1bc:	f1 0b       	sbc	r31, r17
     1be:	2d b7       	in	r18, 0x3d	; 61
     1c0:	3e b7       	in	r19, 0x3e	; 62
     1c2:	28 5f       	subi	r18, 0xF8	; 248
     1c4:	3f 4f       	sbci	r19, 0xFF	; 255
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	3e bf       	out	0x3e, r19	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	2d bf       	out	0x3d, r18	; 61
     1d0:	c8 01       	movw	r24, r16
     1d2:	6e 2f       	mov	r22, r30
     1d4:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_send_by_length>
	
}
     1d8:	c0 5c       	subi	r28, 0xC0	; 192
     1da:	df 4f       	sbci	r29, 0xFF	; 255
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	cf 91       	pop	r28
     1e8:	df 91       	pop	r29
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	08 95       	ret

000001f0 <usart_print_int32>:
	
}



void usart_print_int32(uint32_t v){
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	df 93       	push	r29
     1f6:	cf 93       	push	r28
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	c0 54       	subi	r28, 0x40	; 64
     1fe:	d0 40       	sbci	r29, 0x00	; 0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	9b 01       	movw	r18, r22
     20c:	ac 01       	movw	r20, r24
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     20e:	5d 9b       	sbis	0x0b, 5	; 11
     210:	fe cf       	rjmp	.-4      	; 0x20e <usart_print_int32+0x1e>
	UDR = c;
     212:	8e e3       	ldi	r24, 0x3E	; 62
     214:	8c b9       	out	0x0c, r24	; 12
	UCSRB |= _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);
}

void usart_putchr(char c){
	RETURN_IF_AVRSIM;
	loop_until_bit_is_set(UCSRA, UDRE);
     216:	5d 9b       	sbis	0x0b, 5	; 11
     218:	fe cf       	rjmp	.-4      	; 0x216 <usart_print_int32+0x26>
	UDR = c;
     21a:	8e e3       	ldi	r24, 0x3E	; 62
     21c:	8c b9       	out	0x0c, r24	; 12

void usart_print_int32(uint32_t v){
	RETURN_IF_AVRSIM;
	usart_putchr('>');
	usart_putchr('>');
	char str[64] = "";
     21e:	19 82       	std	Y+1, r1	; 0x01
     220:	1a 82       	std	Y+2, r1	; 0x02
     222:	1b 82       	std	Y+3, r1	; 0x03
     224:	1c 82       	std	Y+4, r1	; 0x04
     226:	fe 01       	movw	r30, r28
     228:	35 96       	adiw	r30, 0x05	; 5
     22a:	8c e3       	ldi	r24, 0x3C	; 60
     22c:	df 01       	movw	r26, r30
     22e:	1d 92       	st	X+, r1
     230:	8a 95       	dec	r24
     232:	e9 f7       	brne	.-6      	; 0x22e <usart_print_int32+0x3e>
	sprintf(str, "%" PRIi32, v);
     234:	8d b7       	in	r24, 0x3d	; 61
     236:	9e b7       	in	r25, 0x3e	; 62
     238:	08 97       	sbiw	r24, 0x08	; 8
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	f8 94       	cli
     23e:	9e bf       	out	0x3e, r25	; 62
     240:	0f be       	out	0x3f, r0	; 63
     242:	8d bf       	out	0x3d, r24	; 61
     244:	ed b7       	in	r30, 0x3d	; 61
     246:	fe b7       	in	r31, 0x3e	; 62
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	8e 01       	movw	r16, r28
     24c:	0f 5f       	subi	r16, 0xFF	; 255
     24e:	1f 4f       	sbci	r17, 0xFF	; 255
     250:	ad b7       	in	r26, 0x3d	; 61
     252:	be b7       	in	r27, 0x3e	; 62
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	1c 93       	st	X, r17
     258:	0e 93       	st	-X, r16
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	84 e6       	ldi	r24, 0x64	; 100
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	93 83       	std	Z+3, r25	; 0x03
     262:	82 83       	std	Z+2, r24	; 0x02
     264:	24 83       	std	Z+4, r18	; 0x04
     266:	35 83       	std	Z+5, r19	; 0x05
     268:	46 83       	std	Z+6, r20	; 0x06
     26a:	57 83       	std	Z+7, r21	; 0x07
     26c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <sprintf>
	usart_send_by_length(str, strlen(str));	
     270:	f8 01       	movw	r30, r16
     272:	01 90       	ld	r0, Z+
     274:	00 20       	and	r0, r0
     276:	e9 f7       	brne	.-6      	; 0x272 <usart_print_int32+0x82>
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	e0 1b       	sub	r30, r16
     27c:	f1 0b       	sbc	r31, r17
     27e:	8d b7       	in	r24, 0x3d	; 61
     280:	9e b7       	in	r25, 0x3e	; 62
     282:	08 96       	adiw	r24, 0x08	; 8
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	9e bf       	out	0x3e, r25	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	8d bf       	out	0x3d, r24	; 61
     28e:	c8 01       	movw	r24, r16
     290:	6e 2f       	mov	r22, r30
     292:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_send_by_length>
	
}
     296:	c0 5c       	subi	r28, 0xC0	; 192
     298:	df 4f       	sbci	r29, 0xFF	; 255
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	cf 91       	pop	r28
     2a6:	df 91       	pop	r29
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	08 95       	ret

000002ae <usart_parse_rx>:
	uint8_t c;
	c = UDR;
	usart_parse_rx(c);
}

void usart_parse_rx(uint8_t c){
     2ae:	1f 93       	push	r17
     2b0:	18 2f       	mov	r17, r24
	
	// detect packet trailer 0x00 0xFF 0xFF 0xFF 0xFF
	// small finite state machine here
	static uint8_t trailer = 0;

	if (c == 0x00) trailer = 1;
     2b2:	88 23       	and	r24, r24
     2b4:	11 f4       	brne	.+4      	; 0x2ba <usart_parse_rx+0xc>
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <usart_parse_rx+0x1a>
	else if (c == 0xFF && trailer > 0) trailer ++;
     2ba:	8f 3f       	cpi	r24, 0xFF	; 255
     2bc:	41 f4       	brne	.+16     	; 0x2ce <usart_parse_rx+0x20>
     2be:	80 91 82 01 	lds	r24, 0x0182
     2c2:	88 23       	and	r24, r24
     2c4:	21 f0       	breq	.+8      	; 0x2ce <usart_parse_rx+0x20>
     2c6:	8f 5f       	subi	r24, 0xFF	; 255
     2c8:	80 93 82 01 	sts	0x0182, r24
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <usart_parse_rx+0x24>
	else trailer = 0;   
     2ce:	10 92 82 01 	sts	0x0182, r1
	
	if (trailer > 4){
     2d2:	80 91 82 01 	lds	r24, 0x0182
     2d6:	60 91 de 01 	lds	r22, 0x01DE
     2da:	85 30       	cpi	r24, 0x05	; 5
     2dc:	50 f0       	brcs	.+20     	; 0x2f2 <usart_parse_rx+0x44>
		trailer = 0;
     2de:	10 92 82 01 	sts	0x0182, r1
		usart_rx_callback(usart_rxbuff, usart_position+1);
     2e2:	6f 5f       	subi	r22, 0xFF	; 255
     2e4:	8f ed       	ldi	r24, 0xDF	; 223
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 15 03 	call	0x62a	; 0x62a <usart_rx_callback>
		usart_position = 0;
     2ec:	10 92 de 01 	sts	0x01DE, r1
     2f0:	10 c0       	rjmp	.+32     	; 0x312 <usart_parse_rx+0x64>
    	return;
	}

	usart_position ++;
     2f2:	86 2f       	mov	r24, r22
     2f4:	8f 5f       	subi	r24, 0xFF	; 255
     2f6:	80 93 de 01 	sts	0x01DE, r24
    
    if (usart_position >= 64){
     2fa:	80 34       	cpi	r24, 0x40	; 64
     2fc:	20 f0       	brcs	.+8      	; 0x306 <usart_parse_rx+0x58>
        usart_psend(PSTR("!buffer_full\n"));
     2fe:	84 e5       	ldi	r24, 0x54	; 84
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 8b 00 	call	0x116	; 0x116 <usart_psend>
    }
    
    usart_rxbuff[usart_position-1] = c;		
     306:	e0 91 de 01 	lds	r30, 0x01DE
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	e2 52       	subi	r30, 0x22	; 34
     30e:	fe 4f       	sbci	r31, 0xFE	; 254
     310:	10 83       	st	Z, r17
	
}
     312:	1f 91       	pop	r17
     314:	08 95       	ret

00000316 <__vector_13>:


}


ISR(USART_RXC_vect){
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	2f 93       	push	r18
     322:	3f 93       	push	r19
     324:	4f 93       	push	r20
     326:	5f 93       	push	r21
     328:	6f 93       	push	r22
     32a:	7f 93       	push	r23
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
    
    if (!bit_is_clear(UCSRA, FE)){
     338:	5c 9b       	sbis	0x0b, 4	; 11
     33a:	07 c0       	rjmp	.+14     	; 0x34a <__vector_13+0x34>
 		usart_position = 0;
     33c:	10 92 de 01 	sts	0x01DE, r1
		usart_psend(PSTR("!framing_error\n"));
     340:	82 e6       	ldi	r24, 0x62	; 98
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 8b 00 	call	0x116	; 0x116 <usart_psend>
     348:	03 c0       	rjmp	.+6      	; 0x350 <__vector_13+0x3a>
        return;
    }

	uint8_t c;
	c = UDR;
     34a:	8c b1       	in	r24, 0x0c	; 12
	usart_parse_rx(c);
     34c:	0e 94 57 01 	call	0x2ae	; 0x2ae <usart_parse_rx>
}
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <Packets_getError>:
	return &error;
}

uint8_t Packets_getError(){
	uint8_t* error = Packets_error();
	uint8_t value = *error;
     372:	80 91 83 01 	lds	r24, 0x0183
	*error = 0x00;
     376:	10 92 83 01 	sts	0x0183, r1
	return value;
}
     37a:	08 95       	ret

0000037c <Packets_getQueue>:

}



Queue* Packets_getQueue(){
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	df 93       	push	r29
     382:	cf 93       	push	r28
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	29 97       	sbiw	r28, 0x09	; 9
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
	static Queue queue;
	static char is_created = 0x00;
	if (is_created == 0x00){
     394:	80 91 84 01 	lds	r24, 0x0184
     398:	88 23       	and	r24, r24
     39a:	a1 f4       	brne	.+40     	; 0x3c4 <Packets_getQueue+0x48>
		// create the queue
		queue = Queue_create(10, sizeof (Packet) );
     39c:	8e 01       	movw	r16, r28
     39e:	0f 5f       	subi	r16, 0xFF	; 255
     3a0:	1f 4f       	sbci	r17, 0xFF	; 255
     3a2:	c8 01       	movw	r24, r16
     3a4:	6a e0       	ldi	r22, 0x0A	; 10
     3a6:	4c e0       	ldi	r20, 0x0C	; 12
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	0e 94 85 03 	call	0x70a	; 0x70a <Queue_create>
     3ae:	a5 e8       	ldi	r26, 0x85	; 133
     3b0:	b1 e0       	ldi	r27, 0x01	; 1
     3b2:	f8 01       	movw	r30, r16
     3b4:	89 e0       	ldi	r24, 0x09	; 9
     3b6:	01 90       	ld	r0, Z+
     3b8:	0d 92       	st	X+, r0
     3ba:	81 50       	subi	r24, 0x01	; 1
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <Packets_getQueue+0x3a>
		is_created = 0x01;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 93 84 01 	sts	0x0184, r24
	}
	return &queue;
}
     3c4:	85 e8       	ldi	r24, 0x85	; 133
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	29 96       	adiw	r28, 0x09	; 9
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	08 95       	ret

000003de <Packets_send>:
	packet.data[2] = error;
	packet.length = 3;
	Packets_send(packet);
}

void Packets_send(Packet packet){
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	df 93       	push	r29
     3e8:	cf 93       	push	r28
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	6c 97       	sbiw	r28, 0x1c	; 28
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	e9 8a       	std	Y+17, r14	; 0x11
     3fc:	fa 8a       	std	Y+18, r15	; 0x12
     3fe:	0b 8b       	std	Y+19, r16	; 0x13
     400:	1c 8b       	std	Y+20, r17	; 0x14
     402:	2d 8b       	std	Y+21, r18	; 0x15
     404:	3e 8b       	std	Y+22, r19	; 0x16
     406:	4f 8b       	std	Y+23, r20	; 0x17
     408:	58 8f       	std	Y+24, r21	; 0x18
     40a:	69 8f       	std	Y+25, r22	; 0x19
     40c:	7a 8f       	std	Y+26, r23	; 0x1a
     40e:	8b 8f       	std	Y+27, r24	; 0x1b
     410:	9c 8f       	std	Y+28, r25	; 0x1c

	char buffer[PACKETS_MAXLENGTH+8];
	//char terminator[PACKETS_TERMINATOR_LEN] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
	buffer[0] = PACKETS_SEND_ADD;
     412:	8a ef       	ldi	r24, 0xFA	; 250
     414:	89 83       	std	Y+1, r24	; 0x01
	memcpy(&buffer[1], &packet.data[0], packet.length);
     416:	8e 01       	movw	r16, r28
     418:	0e 5f       	subi	r16, 0xFE	; 254
     41a:	1f 4f       	sbci	r17, 0xFF	; 255
     41c:	49 2f       	mov	r20, r25
     41e:	9e 01       	movw	r18, r28
     420:	2e 5e       	subi	r18, 0xEE	; 238
     422:	3f 4f       	sbci	r19, 0xFF	; 255
     424:	c8 01       	movw	r24, r16
     426:	b9 01       	movw	r22, r18
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <memcpy>
	uint16_t crc = crc16(buffer, packet.length+1);
     42e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     430:	6f 5f       	subi	r22, 0xFF	; 255
     432:	7e 01       	movw	r14, r28
     434:	08 94       	sec
     436:	e1 1c       	adc	r14, r1
     438:	f1 1c       	adc	r15, r1
     43a:	c7 01       	movw	r24, r14
     43c:	0e 94 a9 03 	call	0x752	; 0x752 <crc16>
	buffer[packet.length+1] = crc >> 8;
     440:	6c 8d       	ldd	r22, Y+28	; 0x1c
     442:	e6 2f       	mov	r30, r22
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	0e 0f       	add	r16, r30
     448:	1f 1f       	adc	r17, r31
     44a:	d8 01       	movw	r26, r16
     44c:	9c 93       	st	X, r25
	buffer[packet.length+2] = crc & 0x00FF;
     44e:	ec 0f       	add	r30, r28
     450:	fd 1f       	adc	r31, r29
     452:	83 83       	std	Z+3, r24	; 0x03
	//memcpy(&buffer[packet.length+3], &terminator, PACKETS_TERMINATOR_LEN);
	usart_send_by_length(buffer, packet.length+3);
     454:	6d 5f       	subi	r22, 0xFD	; 253
     456:	c7 01       	movw	r24, r14
     458:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_send_by_length>
}
     45c:	6c 96       	adiw	r28, 0x1c	; 28
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	08 95       	ret

00000476 <Packets_sendError>:
	Packet packet;
	Queue_dequeue(queue, &packet);
	return packet;
}

void Packets_sendError(uint8_t feature, uint8_t error){
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	2c 97       	sbiw	r28, 0x0c	; 12
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61

	// send an error back over the stream
	Packet packet;
	packet.data[0] = PACKETS_ERRORCMD;
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	9a 83       	std	Y+2, r25	; 0x02
	packet.data[1] = feature;
     496:	8b 83       	std	Y+3, r24	; 0x03
	packet.data[2] = error;
     498:	6c 83       	std	Y+4, r22	; 0x04
	packet.length = 3;
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	9c 87       	std	Y+12, r25	; 0x0c
	Packets_send(packet);
     49e:	e9 80       	ldd	r14, Y+1	; 0x01
     4a0:	ff 24       	eor	r15, r15
     4a2:	fa 94       	dec	r15
     4a4:	08 2f       	mov	r16, r24
     4a6:	16 2f       	mov	r17, r22
     4a8:	2d 81       	ldd	r18, Y+5	; 0x05
     4aa:	3e 81       	ldd	r19, Y+6	; 0x06
     4ac:	4f 81       	ldd	r20, Y+7	; 0x07
     4ae:	58 85       	ldd	r21, Y+8	; 0x08
     4b0:	69 85       	ldd	r22, Y+9	; 0x09
     4b2:	7a 85       	ldd	r23, Y+10	; 0x0a
     4b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     4b6:	0e 94 ef 01 	call	0x3de	; 0x3de <Packets_send>
}
     4ba:	2c 96       	adiw	r28, 0x0c	; 12
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	08 95       	ret

000004d4 <Packets_getNext>:
	queue = Packets_getQueue();
	Queue_enqueue(queue, &packet);

}

Packet Packets_getNext(){
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	2c 97       	sbiw	r28, 0x0c	; 12
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	f8 2e       	mov	r15, r24
     4f2:	e9 2e       	mov	r14, r25
	
	static Queue* queue; queue = Packets_getQueue();
     4f4:	0e 94 be 01 	call	0x37c	; 0x37c <Packets_getQueue>
     4f8:	90 93 8f 01 	sts	0x018F, r25
     4fc:	80 93 8e 01 	sts	0x018E, r24
	Packet packet;
	Queue_dequeue(queue, &packet);
     500:	8e 01       	movw	r16, r28
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	b8 01       	movw	r22, r16
     508:	0e 94 23 03 	call	0x646	; 0x646 <Queue_dequeue>
	return packet;
     50c:	2f 2d       	mov	r18, r15
     50e:	3e 2d       	mov	r19, r14
     510:	c9 01       	movw	r24, r18
     512:	dc 01       	movw	r26, r24
     514:	f8 01       	movw	r30, r16
     516:	8c e0       	ldi	r24, 0x0C	; 12
     518:	01 90       	ld	r0, Z+
     51a:	0d 92       	st	X+, r0
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	e1 f7       	brne	.-8      	; 0x518 <Packets_getNext+0x44>
}
     520:	8f 2d       	mov	r24, r15
     522:	9e 2d       	mov	r25, r14
     524:	2c 96       	adiw	r28, 0x0c	; 12
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	cf 91       	pop	r28
     532:	df 91       	pop	r29
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	08 95       	ret

0000053e <Packets_rxCallback>:

// set an error
static void Packets_setError(uint8_t value);

// parse a recieved byte stream for packets
void Packets_rxCallback(char* rx, uint8_t length){
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	2c 97       	sbiw	r28, 0x0c	; 12
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	8c 01       	movw	r16, r24
	
	length -= PACKETS_TERMINATOR_LEN;
     564:	9b ef       	ldi	r25, 0xFB	; 251
     566:	c9 2e       	mov	r12, r25
     568:	c6 0e       	add	r12, r22
	uint8_t crc_high = length-2;
     56a:	36 2f       	mov	r19, r22
     56c:	37 50       	subi	r19, 0x07	; 7
	uint8_t crc_low = length-1;
     56e:	8a ef       	ldi	r24, 0xFA	; 250
     570:	d8 2e       	mov	r13, r24
     572:	d6 0e       	add	r13, r22
	
	Packet packet;
	packet.crc = 0;
     574:	1b 86       	std	Y+11, r1	; 0x0b
     576:	1a 86       	std	Y+10, r1	; 0x0a
	packet.length = length-3;
     578:	68 50       	subi	r22, 0x08	; 8
     57a:	6c 87       	std	Y+12, r22	; 0x0c
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
		else if (i == crc_high){
			packet.crc = rx[i]; 
			packet.crc = packet.crc << 8 ; 
		}
		else if (i == crc_low) packet.crc += rx[i];
		else packet.data[i-1] = rx[i]; 
     580:	5e 01       	movw	r10, r28
     582:	08 94       	sec
     584:	a1 1c       	adc	r10, r1
     586:	b1 1c       	adc	r11, r1
		if (i == 0) packet.address = rx[i]; 
		else if (i == crc_high){
			packet.crc = rx[i]; 
			packet.crc = packet.crc << 8 ; 
		}
		else if (i == crc_low) packet.crc += rx[i];
     588:	78 01       	movw	r14, r16
     58a:	ed 0c       	add	r14, r13
     58c:	f1 1c       	adc	r15, r1
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
		if (i == 0) packet.address = rx[i]; 
		else if (i == crc_high){
			packet.crc = rx[i]; 
     58e:	b8 01       	movw	r22, r16
     590:	63 0f       	add	r22, r19
     592:	71 1d       	adc	r23, r1
     594:	22 c0       	rjmp	.+68     	; 0x5da <Packets_rxCallback+0x9c>
	Packet packet;
	packet.crc = 0;
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
		if (i == 0) packet.address = rx[i]; 
     596:	44 23       	and	r20, r20
     598:	21 f4       	brne	.+8      	; 0x5a2 <Packets_rxCallback+0x64>
     59a:	f8 01       	movw	r30, r16
     59c:	80 81       	ld	r24, Z
     59e:	89 83       	std	Y+1, r24	; 0x01
     5a0:	1a c0       	rjmp	.+52     	; 0x5d6 <Packets_rxCallback+0x98>
		else if (i == crc_high){
     5a2:	83 17       	cp	r24, r19
     5a4:	29 f4       	brne	.+10     	; 0x5b0 <Packets_rxCallback+0x72>
			packet.crc = rx[i]; 
     5a6:	fb 01       	movw	r30, r22
     5a8:	80 81       	ld	r24, Z
			packet.crc = packet.crc << 8 ; 
     5aa:	1a 86       	std	Y+10, r1	; 0x0a
     5ac:	8b 87       	std	Y+11, r24	; 0x0b
     5ae:	13 c0       	rjmp	.+38     	; 0x5d6 <Packets_rxCallback+0x98>
		}
		else if (i == crc_low) packet.crc += rx[i];
     5b0:	8d 15       	cp	r24, r13
     5b2:	49 f4       	brne	.+18     	; 0x5c6 <Packets_rxCallback+0x88>
     5b4:	f7 01       	movw	r30, r14
     5b6:	20 81       	ld	r18, Z
     5b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ba:	9b 85       	ldd	r25, Y+11	; 0x0b
     5bc:	82 0f       	add	r24, r18
     5be:	91 1d       	adc	r25, r1
     5c0:	9b 87       	std	Y+11, r25	; 0x0b
     5c2:	8a 87       	std	Y+10, r24	; 0x0a
     5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <Packets_rxCallback+0x98>
		else packet.data[i-1] = rx[i]; 
     5c6:	f5 01       	movw	r30, r10
     5c8:	e4 0f       	add	r30, r20
     5ca:	f5 1f       	adc	r31, r21
     5cc:	d8 01       	movw	r26, r16
     5ce:	a4 0f       	add	r26, r20
     5d0:	b5 1f       	adc	r27, r21
     5d2:	8c 91       	ld	r24, X
     5d4:	80 83       	st	Z, r24
     5d6:	4f 5f       	subi	r20, 0xFF	; 255
     5d8:	5f 4f       	sbci	r21, 0xFF	; 255
     5da:	84 2f       	mov	r24, r20
	
	Packet packet;
	packet.crc = 0;
	packet.length = length-3;

	for (uint8_t i = 0; i < length; i++){
     5dc:	4c 15       	cp	r20, r12
     5de:	d8 f2       	brcs	.-74     	; 0x596 <Packets_rxCallback+0x58>
		else packet.data[i-1] = rx[i]; 
	}

		
	// check crc
	uint16_t crc = crc16(rx, length-2);
     5e0:	c8 01       	movw	r24, r16
     5e2:	63 2f       	mov	r22, r19
     5e4:	0e 94 a9 03 	call	0x752	; 0x752 <crc16>
	if (crc != packet.crc){
     5e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     5ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     5ec:	82 17       	cp	r24, r18
     5ee:	93 07       	cpc	r25, r19
     5f0:	21 f0       	breq	.+8      	; 0x5fa <Packets_rxCallback+0xbc>
	return value;
}

static void Packets_setError(uint8_t value){
	uint8_t* error = Packets_error();
	*error = value;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 83 01 	sts	0x0183, r24
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <Packets_rxCallback+0xca>
	}
	
	

	Queue* queue; 
	queue = Packets_getQueue();
     5fa:	0e 94 be 01 	call	0x37c	; 0x37c <Packets_getQueue>
	Queue_enqueue(queue, &packet);
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Queue_enqueue>

}
     608:	2c 96       	adiw	r28, 0x0c	; 12
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	08 95       	ret

0000062a <usart_rx_callback>:
	usart_send_by_length(buffer, packet.length+3);
}

void usart_rx_callback(char *buffer, uint8_t length){

	cli();
     62a:	f8 94       	cli
	Packets_rxCallback(buffer, length);
     62c:	0e 94 9f 02 	call	0x53e	; 0x53e <Packets_rxCallback>
	sei();
     630:	78 94       	sei

}
     632:	08 95       	ret

00000634 <Queue_getCount>:
}

// get the current buffer size of the queue
uint8_t Queue_getCount(Queue *instance){
	return instance->count;
}
     634:	fc 01       	movw	r30, r24
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	08 95       	ret

0000063a <Queue_getError>:

// return the queue error and clear the current queue error
uint8_t Queue_getError(Queue *instance){
     63a:	fc 01       	movw	r30, r24
	static uint8_t error;
	error = instance->error;
     63c:	86 81       	ldd	r24, Z+6	; 0x06
     63e:	80 93 90 01 	sts	0x0190, r24
	instance->error = QUEUE_ERROR_NOERROR;
     642:	16 82       	std	Z+6, r1	; 0x06
	return error; 
}
     644:	08 95       	ret

00000646 <Queue_dequeue>:
}



// dequeue and return a value from the queue
void Queue_dequeue(Queue *instance, void* value){
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24

	static uint8_t temp;
	if (instance->count == 0){
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 23       	and	r24, r24
     650:	19 f4       	brne	.+6      	; 0x658 <Queue_dequeue+0x12>
		instance->error = QUEUE_ERROR_QUEUEEMPTY;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	8e 83       	std	Y+6, r24	; 0x06
     656:	25 c0       	rjmp	.+74     	; 0x6a2 <Queue_dequeue+0x5c>
		//static QueueElement element;
		//return NULL;
		value = NULL;
		return;
	}
	temp = instance->out;
     658:	29 81       	ldd	r18, Y+1	; 0x01
     65a:	20 93 91 01 	sts	0x0191, r18
	if (instance->out > (instance->size - 1) ) instance->out = 0;
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	28 17       	cp	r18, r24
     666:	39 07       	cpc	r19, r25
     668:	0c f0       	brlt	.+2      	; 0x66c <Queue_dequeue+0x26>
     66a:	19 82       	std	Y+1, r1	; 0x01
	memcpy(value, instance->queue + instance->out * instance->element_size, instance->element_size);
     66c:	ec 81       	ldd	r30, Y+4	; 0x04
     66e:	fd 81       	ldd	r31, Y+5	; 0x05
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9c 01       	movw	r18, r24
     676:	2e 9f       	mul	r18, r30
     678:	c0 01       	movw	r24, r0
     67a:	2f 9f       	mul	r18, r31
     67c:	90 0d       	add	r25, r0
     67e:	3e 9f       	mul	r19, r30
     680:	90 0d       	add	r25, r0
     682:	11 24       	eor	r1, r1
     684:	2f 81       	ldd	r18, Y+7	; 0x07
     686:	38 85       	ldd	r19, Y+8	; 0x08
     688:	28 0f       	add	r18, r24
     68a:	39 1f       	adc	r19, r25
     68c:	cb 01       	movw	r24, r22
     68e:	b9 01       	movw	r22, r18
     690:	af 01       	movw	r20, r30
     692:	0e 94 db 10 	call	0x21b6	; 0x21b6 <memcpy>
	instance->count--;
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	81 50       	subi	r24, 0x01	; 1
     69a:	8a 83       	std	Y+2, r24	; 0x02
	instance->out++;
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	8f 5f       	subi	r24, 0xFF	; 255
     6a0:	89 83       	std	Y+1, r24	; 0x01
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <Queue_enqueue>:

}


// Enqueue a new value into the queue
void Queue_enqueue(Queue *instance, void* value){
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ec 01       	movw	r28, r24

	// check for overflowed queue
	if (instance->count + 1 > instance->size){
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	8a 81       	ldd	r24, Y+2	; 0x02
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	82 17       	cp	r24, r18
     6ba:	93 07       	cpc	r25, r19
     6bc:	1c f0       	brlt	.+6      	; 0x6c4 <Queue_enqueue+0x1c>
		instance->error = QUEUE_ERROR_QUEUEFULL;
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	8e 83       	std	Y+6, r24	; 0x06
     6c2:	20 c0       	rjmp	.+64     	; 0x704 <Queue_enqueue+0x5c>
		return;
	}

	// assign new queue value
	if (instance->in > (instance->size - 1) ) instance->in = 0;
     6c4:	88 81       	ld	r24, Y
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	82 17       	cp	r24, r18
     6ca:	93 07       	cpc	r25, r19
     6cc:	0c f0       	brlt	.+2      	; 0x6d0 <Queue_enqueue+0x28>
     6ce:	18 82       	st	Y, r1

	memcpy(instance->queue + instance->in * instance->element_size, value, instance->element_size);
     6d0:	ec 81       	ldd	r30, Y+4	; 0x04
     6d2:	fd 81       	ldd	r31, Y+5	; 0x05
     6d4:	88 81       	ld	r24, Y
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9c 01       	movw	r18, r24
     6da:	2e 9f       	mul	r18, r30
     6dc:	c0 01       	movw	r24, r0
     6de:	2f 9f       	mul	r18, r31
     6e0:	90 0d       	add	r25, r0
     6e2:	3e 9f       	mul	r19, r30
     6e4:	90 0d       	add	r25, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 81       	ldd	r18, Y+7	; 0x07
     6ea:	38 85       	ldd	r19, Y+8	; 0x08
     6ec:	28 0f       	add	r18, r24
     6ee:	39 1f       	adc	r19, r25
     6f0:	c9 01       	movw	r24, r18
     6f2:	af 01       	movw	r20, r30
     6f4:	0e 94 db 10 	call	0x21b6	; 0x21b6 <memcpy>
	instance->in ++;	
     6f8:	88 81       	ld	r24, Y
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	88 83       	st	Y, r24
	instance->count ++;
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	8a 83       	std	Y+2, r24	; 0x02

}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <Queue_create>:
#include "../queue.h"

// Create a new queue
Queue Queue_create(uint8_t queue_size, size_t element_size){
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	f6 2e       	mov	r15, r22
     718:	8a 01       	movw	r16, r20
	instance.out = 0;
	instance.count = 0;
	instance.size = queue_size;
	instance.element_size = element_size;
	instance.error = QUEUE_ERROR_NOERROR;
	instance.queue = calloc(queue_size,  element_size);
     71a:	86 2f       	mov	r24, r22
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	ba 01       	movw	r22, r20
     720:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <calloc>


	// check for malloc errors
	if (instance.queue == NULL){ 
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	29 f4       	brne	.+10     	; 0x732 <Queue_create+0x28>
		instance.error =  QUEUE_ERROR_MALLOC;
		return instance;
     728:	18 86       	std	Y+8, r1	; 0x08
     72a:	1f 82       	std	Y+7, r1	; 0x07
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	8e 83       	std	Y+6, r24	; 0x06
     730:	03 c0       	rjmp	.+6      	; 0x738 <Queue_create+0x2e>
	}
	
	return instance;
     732:	98 87       	std	Y+8, r25	; 0x08
     734:	8f 83       	std	Y+7, r24	; 0x07
     736:	1e 82       	std	Y+6, r1	; 0x06
     738:	1d 83       	std	Y+5, r17	; 0x05
     73a:	0c 83       	std	Y+4, r16	; 0x04
     73c:	fb 82       	std	Y+3, r15	; 0x03
     73e:	1a 82       	std	Y+2, r1	; 0x02
     740:	19 82       	std	Y+1, r1	; 0x01
     742:	18 82       	st	Y, r1

}
     744:	ce 01       	movw	r24, r28
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	08 95       	ret

00000752 <crc16>:
	}
	return crc;
	
}

uint16_t crc16(char* s, uint8_t length){	
     752:	dc 01       	movw	r26, r24
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	4f ef       	ldi	r20, 0xFF	; 255
     75a:	5f ef       	ldi	r21, 0xFF	; 255

	uint16_t i;
	uint16_t crc;
	crc = 0xFFFF;
	for (i = 0; i < length; i++){
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	1d c0       	rjmp	.+58     	; 0x79a <crc16+0x48>
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     760:	fd 01       	movw	r30, r26
     762:	e2 0f       	add	r30, r18
     764:	f3 1f       	adc	r31, r19
     766:	80 81       	ld	r24, Z
     768:	48 27       	eor	r20, r24
     76a:	84 2f       	mov	r24, r20
     76c:	82 95       	swap	r24
     76e:	84 27       	eor	r24, r20
     770:	08 2e       	mov	r0, r24
     772:	86 95       	lsr	r24
     774:	86 95       	lsr	r24
     776:	80 25       	eor	r24, r0
     778:	08 2e       	mov	r0, r24
     77a:	86 95       	lsr	r24
     77c:	80 25       	eor	r24, r0
     77e:	87 70       	andi	r24, 0x07	; 7
     780:	04 2e       	mov	r0, r20
     782:	45 2f       	mov	r20, r21
     784:	86 95       	lsr	r24
     786:	07 94       	ror	r0
     788:	87 95       	ror	r24
     78a:	50 2d       	mov	r21, r0
     78c:	48 27       	eor	r20, r24
     78e:	06 94       	lsr	r0
     790:	87 95       	ror	r24
     792:	50 25       	eor	r21, r0
     794:	48 27       	eor	r20, r24
     796:	2f 5f       	subi	r18, 0xFF	; 255
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	26 17       	cp	r18, r22
     79c:	37 07       	cpc	r19, r23
     79e:	00 f3       	brcs	.-64     	; 0x760 <crc16+0xe>
		crc = _crc16_update	(crc, s[i]);
	}
	return crc;
	
}
     7a0:	ca 01       	movw	r24, r20
     7a2:	08 95       	ret

000007a4 <crc16ccitt>:
#include "../crc16.h"


uint16_t crc16ccitt(char* s){	
     7a4:	bc 01       	movw	r22, r24

	static uint16_t i;
	static uint16_t crc = 0xFFFF;
	for (i = 0; i < strlen(s); i++){
     7a6:	10 92 93 01 	sts	0x0193, r1
     7aa:	10 92 92 01 	sts	0x0192, r1
     7ae:	23 c0       	rjmp	.+70     	; 0x7f6 <crc16ccitt+0x52>
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     7b0:	fb 01       	movw	r30, r22
     7b2:	e4 0f       	add	r30, r20
     7b4:	f5 1f       	adc	r31, r21
     7b6:	20 81       	ld	r18, Z
     7b8:	80 91 72 00 	lds	r24, 0x0072
     7bc:	90 91 73 00 	lds	r25, 0x0073
     7c0:	82 27       	eor	r24, r18
     7c2:	08 2e       	mov	r0, r24
     7c4:	82 95       	swap	r24
     7c6:	80 7f       	andi	r24, 0xF0	; 240
     7c8:	80 25       	eor	r24, r0
     7ca:	09 2e       	mov	r0, r25
     7cc:	98 2f       	mov	r25, r24
     7ce:	82 95       	swap	r24
     7d0:	8f 70       	andi	r24, 0x0F	; 15
     7d2:	08 26       	eor	r0, r24
     7d4:	86 95       	lsr	r24
     7d6:	98 27       	eor	r25, r24
     7d8:	89 27       	eor	r24, r25
     7da:	88 0f       	add	r24, r24
     7dc:	88 0f       	add	r24, r24
     7de:	88 0f       	add	r24, r24
     7e0:	80 25       	eor	r24, r0
		crc = _crc_ccitt_update	(crc, s[i]);
     7e2:	90 93 73 00 	sts	0x0073, r25
     7e6:	80 93 72 00 	sts	0x0072, r24

uint16_t crc16ccitt(char* s){	

	static uint16_t i;
	static uint16_t crc = 0xFFFF;
	for (i = 0; i < strlen(s); i++){
     7ea:	4f 5f       	subi	r20, 0xFF	; 255
     7ec:	5f 4f       	sbci	r21, 0xFF	; 255
     7ee:	50 93 93 01 	sts	0x0193, r21
     7f2:	40 93 92 01 	sts	0x0192, r20
     7f6:	40 91 92 01 	lds	r20, 0x0192
     7fa:	50 91 93 01 	lds	r21, 0x0193
     7fe:	fb 01       	movw	r30, r22
     800:	01 90       	ld	r0, Z+
     802:	00 20       	and	r0, r0
     804:	e9 f7       	brne	.-6      	; 0x800 <crc16ccitt+0x5c>
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	e6 1b       	sub	r30, r22
     80a:	f7 0b       	sbc	r31, r23
     80c:	4e 17       	cp	r20, r30
     80e:	5f 07       	cpc	r21, r31
     810:	08 f4       	brcc	.+2      	; 0x814 <crc16ccitt+0x70>
     812:	ce cf       	rjmp	.-100    	; 0x7b0 <crc16ccitt+0xc>
		crc = _crc_ccitt_update	(crc, s[i]);
	}
	return crc;
	
}
     814:	80 91 72 00 	lds	r24, 0x0072
     818:	90 91 73 00 	lds	r25, 0x0073
     81c:	08 95       	ret

0000081e <pwm_init>:

// init PWM
void pwm_init(){
	
	// set  PORTB to output mode
	setbit(DDRD, BIT(DDD4) | BIT(DDD5));
     81e:	81 b3       	in	r24, 0x11	; 17
     820:	80 63       	ori	r24, 0x30	; 48
     822:	81 bb       	out	0x11, r24	; 17
    
    // set initial values
    OCR1A = 0x00; // channel 1
     824:	1b bc       	out	0x2b, r1	; 43
     826:	1a bc       	out	0x2a, r1	; 42
    OCR1B = 0x00; // channel 2
     828:	19 bc       	out	0x29, r1	; 41
     82a:	18 bc       	out	0x28, r1	; 40
    // enable output compare match channel A intterupt
    //setbit(TIMSK, BIT(OCIE1A));
    
    // initialize timer
    // 8 bit PWM non-inverted
	setbit(TCCR1A, BIT(COM1A1) | BIT(COM1B1) | BIT(WGM10) | BIT(WGM11));
     82c:	8f b5       	in	r24, 0x2f	; 47
     82e:	83 6a       	ori	r24, 0xA3	; 163
     830:	8f bd       	out	0x2f, r24	; 47
	
	// TCCR1A = 0xA1;
	
    // set scalar and kick off timer
    setbit(TCCR1B, BIT(CS10));
     832:	8e b5       	in	r24, 0x2e	; 46
     834:	81 60       	ori	r24, 0x01	; 1
     836:	8e bd       	out	0x2e, r24	; 46
	//setbit(TCCR1B, 0x02);  
}
     838:	08 95       	ret

0000083a <pwm_set_scalar>:

// modify the pwn prescalar on the fly
void pwm_set_scalar(char scalar){	
	char temp = (TCCR1B & 0xF8);
     83a:	9e b5       	in	r25, 0x2e	; 46
	TCCR1B =  temp| (scalar &= 0x07);
     83c:	87 70       	andi	r24, 0x07	; 7
     83e:	98 7f       	andi	r25, 0xF8	; 248
     840:	89 2b       	or	r24, r25
     842:	8e bd       	out	0x2e, r24	; 46
} 
     844:	08 95       	ret

00000846 <pwm_set>:

// set a pwm channel to value
void pwm_set(char channel, uint16_t value){
    switch (channel){
     846:	88 23       	and	r24, r24
     848:	19 f0       	breq	.+6      	; 0x850 <pwm_set+0xa>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	31 f4       	brne	.+12     	; 0x85a <pwm_set+0x14>
     84e:	03 c0       	rjmp	.+6      	; 0x856 <pwm_set+0x10>
        case PWM_CHAN_A: OCR1A = value; break;
     850:	7b bd       	out	0x2b, r23	; 43
     852:	6a bd       	out	0x2a, r22	; 42
     854:	08 95       	ret
        case PWM_CHAN_B: OCR1B = value; break;
     856:	79 bd       	out	0x29, r23	; 41
     858:	68 bd       	out	0x28, r22	; 40
     85a:	08 95       	ret

0000085c <time_init>:
/* 
 * initialize and kick off the timer
 */
void time_init(){
    // initialize timer in normal mode with no scalar
    setbit(TIME_CONFIG, 2);
     85c:	85 b5       	in	r24, 0x25	; 37
     85e:	82 60       	ori	r24, 0x02	; 2
     860:	85 bd       	out	0x25, r24	; 37
    
    // set overflow interrupt
    setbit(TIMSK, BIT(TIME_OVFLOW_INTERRUPT));
     862:	89 b7       	in	r24, 0x39	; 57
     864:	80 64       	ori	r24, 0x40	; 64
     866:	89 bf       	out	0x39, r24	; 57
}
     868:	08 95       	ret

0000086a <__vector_5>:
/*
 * Interrupt
 * once ever TIME_TIMER_RESOLUTION clock cycles
 * increment the main timer
 */
ISR(TIME_INTERRUPT_VECT, ISR_NOBLOCK){
     86a:	78 94       	sei
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
	uint32_t* time = time_get_time_counter();
    *time = *time + 1;
     880:	80 91 94 01 	lds	r24, 0x0194
     884:	90 91 95 01 	lds	r25, 0x0195
     888:	a0 91 96 01 	lds	r26, 0x0196
     88c:	b0 91 97 01 	lds	r27, 0x0197
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	a1 1d       	adc	r26, r1
     894:	b1 1d       	adc	r27, r1
     896:	80 93 94 01 	sts	0x0194, r24
     89a:	90 93 95 01 	sts	0x0195, r25
     89e:	a0 93 96 01 	sts	0x0196, r26
     8a2:	b0 93 97 01 	sts	0x0197, r27
    if (*time >= (uint32_t) TIME_MAINTIMEOVERFLOW){
     8a6:	80 54       	subi	r24, 0x40	; 64
     8a8:	92 44       	sbci	r25, 0x42	; 66
     8aa:	af 40       	sbci	r26, 0x0F	; 15
     8ac:	b0 40       	sbci	r27, 0x00	; 0
     8ae:	40 f0       	brcs	.+16     	; 0x8c0 <__vector_5+0x56>
		*time = 0;
     8b0:	10 92 94 01 	sts	0x0194, r1
     8b4:	10 92 95 01 	sts	0x0195, r1
     8b8:	10 92 96 01 	sts	0x0196, r1
     8bc:	10 92 97 01 	sts	0x0197, r1
	}
}
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <time_get_time>:
 * get current time
 */
uint32_t time_get_time(){
    uint32_t* time = time_get_time_counter();
    uint32_t buffer = 0;
    buffer = (*time << 8) + (uint32_t) TIME_PRECISION_TIMER;
     8d4:	84 b5       	in	r24, 0x24	; 36
     8d6:	20 91 94 01 	lds	r18, 0x0194
     8da:	30 91 95 01 	lds	r19, 0x0195
     8de:	40 91 96 01 	lds	r20, 0x0196
     8e2:	50 91 97 01 	lds	r21, 0x0197
     8e6:	54 2f       	mov	r21, r20
     8e8:	43 2f       	mov	r20, r19
     8ea:	32 2f       	mov	r19, r18
     8ec:	22 27       	eor	r18, r18
     8ee:	28 0f       	add	r18, r24
     8f0:	31 1d       	adc	r19, r1
     8f2:	41 1d       	adc	r20, r1
     8f4:	51 1d       	adc	r21, r1
    return buffer;    
}
     8f6:	b9 01       	movw	r22, r18
     8f8:	ca 01       	movw	r24, r20
     8fa:	08 95       	ret

000008fc <time_get_time_delta>:

/* 
 * get a time delta, 
 * also returns current time so to not miss time with a subsequent time_get_time() call
 */
TimeResult time_get_time_delta(uint32_t previous){
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	28 97       	sbiw	r28, 0x08	; 8
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	ab 01       	movw	r20, r22
     91a:	bc 01       	movw	r22, r24
 * get current time
 */
uint32_t time_get_time(){
    uint32_t* time = time_get_time_counter();
    uint32_t buffer = 0;
    buffer = (*time << 8) + (uint32_t) TIME_PRECISION_TIMER;
     91c:	24 b5       	in	r18, 0x24	; 36
     91e:	80 91 94 01 	lds	r24, 0x0194
     922:	90 91 95 01 	lds	r25, 0x0195
     926:	a0 91 96 01 	lds	r26, 0x0196
     92a:	b0 91 97 01 	lds	r27, 0x0197
     92e:	ba 2f       	mov	r27, r26
     930:	a9 2f       	mov	r26, r25
     932:	98 2f       	mov	r25, r24
     934:	88 27       	eor	r24, r24
     936:	82 0f       	add	r24, r18
     938:	91 1d       	adc	r25, r1
     93a:	a1 1d       	adc	r26, r1
     93c:	b1 1d       	adc	r27, r1
 * also returns current time so to not miss time with a subsequent time_get_time() call
 */
TimeResult time_get_time_delta(uint32_t previous){
    TimeResult result;
    uint32_t current = time_get_time();
    if (current > previous) result.delta = current - previous;
     93e:	48 17       	cp	r20, r24
     940:	59 07       	cpc	r21, r25
     942:	6a 07       	cpc	r22, r26
     944:	7b 07       	cpc	r23, r27
     946:	48 f4       	brcc	.+18     	; 0x95a <time_get_time_delta+0x5e>
     948:	7c 01       	movw	r14, r24
     94a:	8d 01       	movw	r16, r26
     94c:	e4 1a       	sub	r14, r20
     94e:	f5 0a       	sbc	r15, r21
     950:	06 0b       	sbc	r16, r22
     952:	17 0b       	sbc	r17, r23
     954:	a8 01       	movw	r20, r16
     956:	97 01       	movw	r18, r14
     958:	10 c0       	rjmp	.+32     	; 0x97a <time_get_time_delta+0x7e>
    else result.delta = (uint32_t) TIME_MAINTIMEOVERFLOW * TIME_TIMER_RESOLUTION - previous + current;
     95a:	80 50       	subi	r24, 0x00	; 0
     95c:	90 4c       	sbci	r25, 0xC0	; 192
     95e:	ad 4b       	sbci	r26, 0xBD	; 189
     960:	b0 4f       	sbci	r27, 0xF0	; 240
     962:	7c 01       	movw	r14, r24
     964:	8d 01       	movw	r16, r26
     966:	e4 1a       	sub	r14, r20
     968:	f5 0a       	sbc	r15, r21
     96a:	06 0b       	sbc	r16, r22
     96c:	17 0b       	sbc	r17, r23
     96e:	a8 01       	movw	r20, r16
     970:	97 01       	movw	r18, r14
     972:	80 50       	subi	r24, 0x00	; 0
     974:	90 44       	sbci	r25, 0x40	; 64
     976:	a2 44       	sbci	r26, 0x42	; 66
     978:	bf 40       	sbci	r27, 0x0F	; 15
    result.previous = current;
    return result;
     97a:	8d 83       	std	Y+5, r24	; 0x05
     97c:	9e 83       	std	Y+6, r25	; 0x06
     97e:	af 83       	std	Y+7, r26	; 0x07
     980:	b8 87       	std	Y+8, r27	; 0x08
     982:	29 83       	std	Y+1, r18	; 0x01
     984:	3a 83       	std	Y+2, r19	; 0x02
     986:	4b 83       	std	Y+3, r20	; 0x03
     988:	5c 83       	std	Y+4, r21	; 0x04
     98a:	3a 81       	ldd	r19, Y+2	; 0x02
     98c:	4b 81       	ldd	r20, Y+3	; 0x03
     98e:	5c 81       	ldd	r21, Y+4	; 0x04
     990:	68 2f       	mov	r22, r24
     992:	7e 81       	ldd	r23, Y+6	; 0x06
}
     994:	8f 81       	ldd	r24, Y+7	; 0x07
     996:	98 85       	ldd	r25, Y+8	; 0x08
     998:	28 96       	adiw	r28, 0x08	; 8
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	cf 91       	pop	r28
     9a6:	df 91       	pop	r29
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <get_time_in_ms>:

/* 
 * view a time in seconds
 */
double get_time_in_ms(uint32_t time){
    if (time == 0) time = time_get_time();
     9b2:	61 15       	cp	r22, r1
     9b4:	71 05       	cpc	r23, r1
     9b6:	81 05       	cpc	r24, r1
     9b8:	91 05       	cpc	r25, r1
     9ba:	89 f4       	brne	.+34     	; 0x9de <get_time_in_ms+0x2c>
 * get current time
 */
uint32_t time_get_time(){
    uint32_t* time = time_get_time_counter();
    uint32_t buffer = 0;
    buffer = (*time << 8) + (uint32_t) TIME_PRECISION_TIMER;
     9bc:	24 b5       	in	r18, 0x24	; 36
     9be:	80 91 94 01 	lds	r24, 0x0194
     9c2:	90 91 95 01 	lds	r25, 0x0195
     9c6:	a0 91 96 01 	lds	r26, 0x0196
     9ca:	b0 91 97 01 	lds	r27, 0x0197
     9ce:	66 27       	eor	r22, r22
     9d0:	78 2f       	mov	r23, r24
     9d2:	89 2f       	mov	r24, r25
     9d4:	9a 2f       	mov	r25, r26
     9d6:	62 0f       	add	r22, r18
     9d8:	71 1d       	adc	r23, r1
     9da:	81 1d       	adc	r24, r1
     9dc:	91 1d       	adc	r25, r1
     9de:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__floatunsisf>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	34 e2       	ldi	r19, 0x24	; 36
     9e6:	44 e7       	ldi	r20, 0x74	; 116
     9e8:	5b e4       	ldi	r21, 0x4B	; 75
     9ea:	0e 94 85 0b 	call	0x170a	; 0x170a <__divsf3>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	51 e4       	ldi	r21, 0x41	; 65
     9f6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	4a e7       	ldi	r20, 0x7A	; 122
     a00:	54 e4       	ldi	r21, 0x44	; 68
     a02:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
 * view a time in seconds
 */
double get_time_in_ms(uint32_t time){
    if (time == 0) time = time_get_time();
    return (double) time / F_CPU * TIME_SCALAR * 1000;
}
     a06:	08 95       	ret

00000a08 <time_get_time_counter>:
 * get main timer address, used internally
 */
uint32_t* time_get_time_counter(){
    static uint32_t time = 0;
    return &time;
}
     a08:	84 e9       	ldi	r24, 0x94	; 148
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	08 95       	ret

00000a0e <get_rpm_handle>:
}

uint16_t* get_rpm_handle(){
	static uint16_t rpm;
	return &rpm;
}
     a0e:	88 e9       	ldi	r24, 0x98	; 152
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	08 95       	ret

00000a14 <cmd_get_rpm>:

void cmd_get_rpm(){



}
     a14:	08 95       	ret

00000a16 <cmd_send_debug16>:
	packet.data[2] = rpm - (packet.data[1] << 8);
	packet.length = 3;
	Packets_send(packet);
}

void cmd_send_debug16(char name, uint16_t debug){
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	2c 97       	sbiw	r28, 0x0c	; 12
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	26 2f       	mov	r18, r22

	Packet packet;
	packet.data[0] = CMD_DEBUG16;
     a34:	90 e3       	ldi	r25, 0x30	; 48
     a36:	9a 83       	std	Y+2, r25	; 0x02
	packet.data[1] = name;
     a38:	8b 83       	std	Y+3, r24	; 0x03
	packet.data[2] = debug >> 8;
     a3a:	7c 83       	std	Y+4, r23	; 0x04
	packet.data[3] = debug - (packet.data[1] << 8);
     a3c:	6d 83       	std	Y+5, r22	; 0x05
	packet.length = 4;
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	9c 87       	std	Y+12, r25	; 0x0c
	Packets_send(packet);
     a42:	e9 80       	ldd	r14, Y+1	; 0x01
     a44:	30 e3       	ldi	r19, 0x30	; 48
     a46:	f3 2e       	mov	r15, r19
     a48:	08 2f       	mov	r16, r24
     a4a:	17 2f       	mov	r17, r23
     a4c:	3e 81       	ldd	r19, Y+6	; 0x06
     a4e:	4f 81       	ldd	r20, Y+7	; 0x07
     a50:	58 85       	ldd	r21, Y+8	; 0x08
     a52:	69 85       	ldd	r22, Y+9	; 0x09
     a54:	7a 85       	ldd	r23, Y+10	; 0x0a
     a56:	8b 85       	ldd	r24, Y+11	; 0x0b
     a58:	0e 94 ef 01 	call	0x3de	; 0x3de <Packets_send>

}
     a5c:	2c 96       	adiw	r28, 0x0c	; 12
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	cf 91       	pop	r28
     a6a:	df 91       	pop	r29
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	08 95       	ret

00000a76 <cmd_send_rpm>:
	static uint16_t rpm;
	return &rpm;
}


void cmd_send_rpm(uint16_t rpm){
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	2c 97       	sbiw	r28, 0x0c	; 12
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
	
	Packet packet;
	packet.data[0] = CMD_RPM;
     a92:	20 e2       	ldi	r18, 0x20	; 32
     a94:	2a 83       	std	Y+2, r18	; 0x02
	packet.data[1] = rpm >> 8;
     a96:	9b 83       	std	Y+3, r25	; 0x03
	packet.data[2] = rpm - (packet.data[1] << 8);
     a98:	8c 83       	std	Y+4, r24	; 0x04
	packet.length = 3;
     a9a:	23 e0       	ldi	r18, 0x03	; 3
     a9c:	2c 87       	std	Y+12, r18	; 0x0c
	Packets_send(packet);
     a9e:	e9 80       	ldd	r14, Y+1	; 0x01
     aa0:	40 e2       	ldi	r20, 0x20	; 32
     aa2:	f4 2e       	mov	r15, r20
     aa4:	09 2f       	mov	r16, r25
     aa6:	18 2f       	mov	r17, r24
     aa8:	2d 81       	ldd	r18, Y+5	; 0x05
     aaa:	3e 81       	ldd	r19, Y+6	; 0x06
     aac:	4f 81       	ldd	r20, Y+7	; 0x07
     aae:	58 85       	ldd	r21, Y+8	; 0x08
     ab0:	69 85       	ldd	r22, Y+9	; 0x09
     ab2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	0e 94 ef 01 	call	0x3de	; 0x3de <Packets_send>
}
     abc:	2c 96       	adiw	r28, 0x0c	; 12
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	cf 91       	pop	r28
     aca:	df 91       	pop	r29
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <cmd_rpmset>:

void cmd_pwm_setscalar(char* params){
	pwm_set_scalar(params[0]);
}

void cmd_rpmset(char* params){
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	fc 01       	movw	r30, r24

	
	uint16_t left = params[0] << 8; left += params[1];
     adc:	50 81       	ld	r21, Z
     ade:	40 e0       	ldi	r20, 0x00	; 0
	uint16_t right = params[2] << 8; right += params[3];
     ae0:	12 81       	ldd	r17, Z+2	; 0x02
     ae2:	00 e0       	ldi	r16, 0x00	; 0
     ae4:	83 81       	ldd	r24, Z+3	; 0x03
     ae6:	08 0f       	add	r16, r24
     ae8:	11 1d       	adc	r17, r1

	motors_set(MOTORS_LEFT , MOTORS_FWD, left);
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	48 0f       	add	r20, r24
     aee:	51 1d       	adc	r21, r1
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	0e 94 9a 06 	call	0xd34	; 0xd34 <motors_set>
	motors_set(MOTORS_RIGHT, MOTORS_FWD, right);
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	a8 01       	movw	r20, r16
     afe:	0e 94 9a 06 	call	0xd34	; 0xd34 <motors_set>
}
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <cmd_pwm_setscalar>:
	uint16_t value = params[1] << 8; value += params[2];	
	pwm_set(chan, value);

}

void cmd_pwm_setscalar(char* params){
     b08:	fc 01       	movw	r30, r24
	pwm_set_scalar(params[0]);
     b0a:	80 81       	ld	r24, Z
     b0c:	0e 94 1d 04 	call	0x83a	; 0x83a <pwm_set_scalar>
}
     b10:	08 95       	ret

00000b12 <cmd_pwm_set>:

	}
	
}

void cmd_pwm_set(char* params){
     b12:	fc 01       	movw	r30, r24
	char chan = params[0];
	uint16_t value = params[1] << 8; value += params[2];	
     b14:	71 81       	ldd	r23, Z+1	; 0x01
     b16:	60 e0       	ldi	r22, 0x00	; 0
	pwm_set(chan, value);
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	68 0f       	add	r22, r24
     b1c:	71 1d       	adc	r23, r1
     b1e:	80 81       	ld	r24, Z
     b20:	0e 94 23 04 	call	0x846	; 0x846 <pwm_set>

}
     b24:	08 95       	ret

00000b26 <handle_packet>:
#include "includes.h"
#include "constants.h"
#include "commands.h"


void handle_packet(Packet packet){
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	df 93       	push	r29
     b30:	cf 93       	push	r28
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	2c 97       	sbiw	r28, 0x0c	; 12
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	e9 82       	std	Y+1, r14	; 0x01
     b44:	ef 2d       	mov	r30, r15
     b46:	fa 82       	std	Y+2, r15	; 0x02
     b48:	0b 83       	std	Y+3, r16	; 0x03
     b4a:	1c 83       	std	Y+4, r17	; 0x04
     b4c:	2d 83       	std	Y+5, r18	; 0x05
     b4e:	3e 83       	std	Y+6, r19	; 0x06
     b50:	4f 83       	std	Y+7, r20	; 0x07
     b52:	58 87       	std	Y+8, r21	; 0x08
     b54:	69 87       	std	Y+9, r22	; 0x09
     b56:	7a 87       	std	Y+10, r23	; 0x0a
     b58:	8b 87       	std	Y+11, r24	; 0x0b
     b5a:	9c 87       	std	Y+12, r25	; 0x0c

	char *params = &packet.data[1];
	
	switch (packet.data[0]){
     b5c:	e1 31       	cpi	r30, 0x11	; 17
     b5e:	49 f0       	breq	.+18     	; 0xb72 <handle_packet+0x4c>
     b60:	e1 32       	cpi	r30, 0x21	; 33
     b62:	59 f0       	breq	.+22     	; 0xb7a <handle_packet+0x54>
     b64:	e0 31       	cpi	r30, 0x10	; 16
     b66:	71 f4       	brne	.+28     	; 0xb84 <handle_packet+0x5e>
		case CMD_PWM_SET:			cmd_pwm_set(params); break;
     b68:	ce 01       	movw	r24, r28
     b6a:	03 96       	adiw	r24, 0x03	; 3
     b6c:	0e 94 89 05 	call	0xb12	; 0xb12 <cmd_pwm_set>
     b70:	0d c0       	rjmp	.+26     	; 0xb8c <handle_packet+0x66>
	pwm_set(chan, value);

}

void cmd_pwm_setscalar(char* params){
	pwm_set_scalar(params[0]);
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	0e 94 1d 04 	call	0x83a	; 0x83a <pwm_set_scalar>
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <handle_packet+0x66>
	char *params = &packet.data[1];
	
	switch (packet.data[0]){
		case CMD_PWM_SET:			cmd_pwm_set(params); break;
		case CMD_PWM_SETSCALAR:		cmd_pwm_setscalar(params); break;
		case CMD_RPMSET		:		cmd_rpmset(params); break;
     b7a:	ce 01       	movw	r24, r28
     b7c:	03 96       	adiw	r24, 0x03	; 3
     b7e:	0e 94 6b 05 	call	0xad6	; 0xad6 <cmd_rpmset>
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <handle_packet+0x66>
		default: 					Packets_sendError(ERROR_INVALIDCMD, 0x00);			
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	0e 94 3b 02 	call	0x476	; 0x476 <Packets_sendError>

	}
	
}
     b8c:	2c 96       	adiw	r28, 0x0c	; 12
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <main>:
InterruptCounterResult interrupt_counter_delta(uint16_t previous);




int main( void ){
     ba6:	2f 92       	push	r2
     ba8:	3f 92       	push	r3
     baa:	4f 92       	push	r4
     bac:	5f 92       	push	r5
     bae:	6f 92       	push	r6
     bb0:	7f 92       	push	r7
     bb2:	8f 92       	push	r8
     bb4:	9f 92       	push	r9
     bb6:	af 92       	push	r10
     bb8:	bf 92       	push	r11
     bba:	cf 92       	push	r12
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	6e 97       	sbiw	r28, 0x1e	; 30
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61

	uint8_t error;
	Packet packet;
	Queue* packets;
	packets = Packets_getQueue();
     bda:	0e 94 be 01 	call	0x37c	; 0x37c <Packets_getQueue>
     bde:	2c 01       	movw	r4, r24

	// initialize Time
	time_init();
     be0:	0e 94 2e 04 	call	0x85c	; 0x85c <time_init>
	TimeResult tr;
	uint32_t previous = 0;

	// initialize usart
	usart_init();
     be4:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_init>

	// initialize motors
	motors_init();
     be8:	0e 94 55 08 	call	0x10aa	; 0x10aa <motors_init>
	motors_set(MOTORS_LEFT , MOTORS_FWD, 2444);
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	4c e8       	ldi	r20, 0x8C	; 140
     bf2:	59 e0       	ldi	r21, 0x09	; 9
     bf4:	0e 94 9a 06 	call	0xd34	; 0xd34 <motors_set>
	motors_set(MOTORS_RIGHT, MOTORS_FWD, 2444);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	4c e8       	ldi	r20, 0x8C	; 140
     bfe:	59 e0       	ldi	r21, 0x09	; 9
     c00:	0e 94 9a 06 	call	0xd34	; 0xd34 <motors_set>

	Motor* motor1 = motors_get_motor(MOTORS_LEFT);
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0e 94 a4 06 	call	0xd48	; 0xd48 <motors_get_motor>
     c0a:	9e 8f       	std	Y+30, r25	; 0x1e
     c0c:	8d 8f       	std	Y+29, r24	; 0x1d
	Motor* motor2 = motors_get_motor(MOTORS_RIGHT);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	0e 94 a4 06 	call	0xd48	; 0xd48 <motors_get_motor>
     c14:	1c 01       	movw	r2, r24

	// enable interrupts
	sei();
     c16:	78 94       	sei
     c18:	66 24       	eor	r6, r6
     c1a:	77 24       	eor	r7, r7
     c1c:	43 01       	movw	r8, r6
     c1e:	0f 2e       	mov	r0, r31
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	af 2e       	mov	r10, r31
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	bf 2e       	mov	r11, r31
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	cf 2e       	mov	r12, r31
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	df 2e       	mov	r13, r31
     c30:	f0 2d       	mov	r31, r0

	float diff = 0;

	// loop forever
	while(1){
		error = Packets_getError();
     c32:	0e 94 b9 01 	call	0x372	; 0x372 <Packets_getError>
     c36:	68 2f       	mov	r22, r24
		if (error){
     c38:	88 23       	and	r24, r24
     c3a:	11 f0       	breq	.+4      	; 0xc40 <main+0x9a>
			Packets_sendError(ERROR_PACKETS, error);
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <main+0xb8>
			continue;
		}
		if (packets->count > 0){
     c40:	f2 01       	movw	r30, r4
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	88 23       	and	r24, r24
     c46:	e1 f0       	breq	.+56     	; 0xc80 <main+0xda>
			error = 0x00;
			packet = Packets_getNext();
     c48:	ce 01       	movw	r24, r28
     c4a:	09 96       	adiw	r24, 0x09	; 9
     c4c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Packets_getNext>
			error = Queue_getError(packets);
     c50:	c2 01       	movw	r24, r4
     c52:	0e 94 1d 03 	call	0x63a	; 0x63a <Queue_getError>
     c56:	68 2f       	mov	r22, r24
			if (error){
     c58:	88 23       	and	r24, r24
     c5a:	21 f0       	breq	.+8      	; 0xc64 <main+0xbe>
				Packets_sendError(ERROR_QUEUE, error);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	0e 94 3b 02 	call	0x476	; 0x476 <Packets_sendError>
     c62:	e7 cf       	rjmp	.-50     	; 0xc32 <main+0x8c>
				continue;
			}

			handle_packet(packet);
     c64:	e9 84       	ldd	r14, Y+9	; 0x09
     c66:	fa 84       	ldd	r15, Y+10	; 0x0a
     c68:	0b 85       	ldd	r16, Y+11	; 0x0b
     c6a:	1c 85       	ldd	r17, Y+12	; 0x0c
     c6c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c6e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c70:	4f 85       	ldd	r20, Y+15	; 0x0f
     c72:	58 89       	ldd	r21, Y+16	; 0x10
     c74:	69 89       	ldd	r22, Y+17	; 0x11
     c76:	7a 89       	ldd	r23, Y+18	; 0x12
     c78:	8b 89       	ldd	r24, Y+19	; 0x13
     c7a:	9c 89       	ldd	r25, Y+20	; 0x14
     c7c:	0e 94 93 05 	call	0xb26	; 0xb26 <handle_packet>
		}
		tr = time_get_time_delta(previous);
     c80:	c4 01       	movw	r24, r8
     c82:	b3 01       	movw	r22, r6
     c84:	0e 94 7e 04 	call	0x8fc	; 0x8fc <time_get_time_delta>
     c88:	2d 8b       	std	Y+21, r18	; 0x15
     c8a:	3e 8b       	std	Y+22, r19	; 0x16
     c8c:	4f 8b       	std	Y+23, r20	; 0x17
     c8e:	58 8f       	std	Y+24, r21	; 0x18
     c90:	69 8f       	std	Y+25, r22	; 0x19
     c92:	7a 8f       	std	Y+26, r23	; 0x1a
     c94:	8b 8f       	std	Y+27, r24	; 0x1b
     c96:	9c 8f       	std	Y+28, r25	; 0x1c
     c98:	de 01       	movw	r26, r28
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	fe 01       	movw	r30, r28
     c9e:	75 96       	adiw	r30, 0x15	; 21
     ca0:	88 e0       	ldi	r24, 0x08	; 8
     ca2:	01 90       	ld	r0, Z+
     ca4:	0d 92       	st	X+, r0
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0xfc>
		
		// every 20ms, calculate rpm
		if (get_time_in_ms(tr.delta) > 20){
     caa:	69 81       	ldd	r22, Y+1	; 0x01
     cac:	7a 81       	ldd	r23, Y+2	; 0x02
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <get_time_in_ms>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 ea       	ldi	r20, 0xA0	; 160
     cbc:	51 e4       	ldi	r21, 0x41	; 65
     cbe:	0e 94 31 0c 	call	0x1862	; 0x1862 <__gtsf2>
     cc2:	18 16       	cp	r1, r24
     cc4:	0c f0       	brlt	.+2      	; 0xcc8 <main+0x122>
     cc6:	b5 cf       	rjmp	.-150    	; 0xc32 <main+0x8c>
			previous = tr.previous;
     cc8:	6d 80       	ldd	r6, Y+5	; 0x05
     cca:	7e 80       	ldd	r7, Y+6	; 0x06
     ccc:	8f 80       	ldd	r8, Y+7	; 0x07
     cce:	98 84       	ldd	r9, Y+8	; 0x08
			motors_tick();
     cd0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <motors_tick>
			
			diff = diff * 0.00 + ((uint16_t) motor1->pwm - motor2->pwm) * 1.00;
     cd4:	c6 01       	movw	r24, r12
     cd6:	b5 01       	movw	r22, r10
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     ce4:	7b 01       	movw	r14, r22
     ce6:	8c 01       	movw	r16, r24
     ce8:	ed 8d       	ldd	r30, Y+29	; 0x1d
     cea:	fe 8d       	ldd	r31, Y+30	; 0x1e
     cec:	66 85       	ldd	r22, Z+14	; 0x0e
     cee:	77 85       	ldd	r23, Z+15	; 0x0f
     cf0:	80 89       	ldd	r24, Z+16	; 0x10
     cf2:	91 89       	ldd	r25, Z+17	; 0x11
     cf4:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixunssfsi>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__floatunsisf>
     d00:	f1 01       	movw	r30, r2
     d02:	26 85       	ldd	r18, Z+14	; 0x0e
     d04:	37 85       	ldd	r19, Z+15	; 0x0f
     d06:	40 89       	ldd	r20, Z+16	; 0x10
     d08:	51 89       	ldd	r21, Z+17	; 0x11
     d0a:	0e 94 2d 0a 	call	0x145a	; 0x145a <__subsf3>
     d0e:	9b 01       	movw	r18, r22
     d10:	ac 01       	movw	r20, r24
     d12:	c8 01       	movw	r24, r16
     d14:	b7 01       	movw	r22, r14
     d16:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3>
     d1a:	5b 01       	movw	r10, r22
     d1c:	6c 01       	movw	r12, r24

			cmd_send_debug16( 'd', (uint16_t) (abs(diff)) );
     d1e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fixsfsi>
     d22:	77 ff       	sbrs	r23, 7
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <main+0x186>
     d26:	70 95       	com	r23
     d28:	61 95       	neg	r22
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	84 e6       	ldi	r24, 0x64	; 100
     d2e:	0e 94 0b 05 	call	0xa16	; 0xa16 <cmd_send_debug16>
     d32:	7f cf       	rjmp	.-258    	; 0xc32 <main+0x8c>

00000d34 <motors_set>:


// get a motor by channel
Motor* motors_get_motor(uint8_t chan){
	static Motor motors[MOTORS_CHANS];
	return &motors[chan];
     d34:	94 e1       	ldi	r25, 0x14	; 20
     d36:	89 9f       	mul	r24, r25
     d38:	f0 01       	movw	r30, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	ea 54       	subi	r30, 0x4A	; 74
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
}

// set a motor speed and direction by channel
void motors_set(uint8_t chan, uint8_t dir, uint16_t rpm){
	Motor* motor = motors_get_motor(chan);
	motor->rpm_target = rpm;
     d40:	51 83       	std	Z+1, r21	; 0x01
     d42:	40 83       	st	Z, r20
	motor->dir_target = dir;
     d44:	62 8b       	std	Z+18, r22	; 0x12
}
     d46:	08 95       	ret

00000d48 <motors_get_motor>:


// get a motor by channel
Motor* motors_get_motor(uint8_t chan){
     d48:	94 e1       	ldi	r25, 0x14	; 20
     d4a:	89 9f       	mul	r24, r25
     d4c:	90 01       	movw	r18, r0
     d4e:	11 24       	eor	r1, r1
     d50:	2a 54       	subi	r18, 0x4A	; 74
     d52:	3e 4f       	sbci	r19, 0xFE	; 254
	static Motor motors[MOTORS_CHANS];
	return &motors[chan];
}
     d54:	c9 01       	movw	r24, r18
     d56:	08 95       	ret

00000d58 <__vector_1>:
/*******************************/
/* INTERNAL ONLY FUNCTIONS     */
/*******************************/

// LEFT motor interrupt
ISR(INT0_vect, ISR_NOBLOCK){	
     d58:	78 94       	sei
     d5a:	1f 92       	push	r1
     d5c:	0f 92       	push	r0
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	0f 92       	push	r0
     d62:	11 24       	eor	r1, r1
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
	uint16_t* counter = motors_get_counter(MOTORS_LEFT);
    *counter = *counter + 1;
     d68:	80 91 9a 01 	lds	r24, 0x019A
     d6c:	90 91 9b 01 	lds	r25, 0x019B
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	90 93 9b 01 	sts	0x019B, r25
     d76:	80 93 9a 01 	sts	0x019A, r24
}
     d7a:	9f 91       	pop	r25
     d7c:	8f 91       	pop	r24
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <__vector_2>:

// RIGHT motor interrupt
ISR(INT1_vect, ISR_NOBLOCK){	
     d88:	78 94       	sei
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
	uint16_t* counter = motors_get_counter(MOTORS_RIGHT);
    *counter = *counter + 1;
     d98:	80 91 9c 01 	lds	r24, 0x019C
     d9c:	90 91 9d 01 	lds	r25, 0x019D
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	90 93 9d 01 	sts	0x019D, r25
     da6:	80 93 9c 01 	sts	0x019C, r24
}
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <motors_get_counter>:

// get an interrupt counter by channel
uint16_t* motors_get_counter(uint8_t chan){
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	22 0f       	add	r18, r18
     dbe:	33 1f       	adc	r19, r19
     dc0:	26 56       	subi	r18, 0x66	; 102
     dc2:	3e 4f       	sbci	r19, 0xFE	; 254
	static uint16_t counters[2];
	return &counters[chan];

}
     dc4:	c9 01       	movw	r24, r18
     dc6:	08 95       	ret

00000dc8 <motors_get_interrupt_counter_result>:
// calculate a counter delta, internal only 
InterruptCounterResult motors_get_interrupt_counter_result(uint8_t chan, uint16_t previous){

    InterruptCounterResult result;
    uint16_t* current = motors_get_counter(chan);
    if (*current >= previous) result.delta = *current - previous;
     dc8:	e8 2f       	mov	r30, r24
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	e6 56       	subi	r30, 0x66	; 102
     dd2:	fe 4f       	sbci	r31, 0xFE	; 254
     dd4:	01 90       	ld	r0, Z+
     dd6:	f0 81       	ld	r31, Z
     dd8:	e0 2d       	mov	r30, r0
     dda:	e6 17       	cp	r30, r22
     ddc:	f7 07       	cpc	r31, r23
     dde:	20 f0       	brcs	.+8      	; 0xde8 <motors_get_interrupt_counter_result+0x20>
     de0:	9f 01       	movw	r18, r30
     de2:	26 1b       	sub	r18, r22
     de4:	37 0b       	sbc	r19, r23
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <motors_get_interrupt_counter_result+0x2a>
    else result.delta = (uint16_t) INTERRUPT_COUNTER_MAX - previous + *current;
     de8:	9b 01       	movw	r18, r22
     dea:	20 95       	com	r18
     dec:	30 95       	com	r19
     dee:	2e 0f       	add	r18, r30
     df0:	3f 1f       	adc	r19, r31
    result.previous = *current;
    return result;
}
     df2:	b9 01       	movw	r22, r18
     df4:	cf 01       	movw	r24, r30
     df6:	08 95       	ret

00000df8 <motors_tick>:
	static Motor motors[MOTORS_CHANS];
	return &motors[chan];
}

// calculate a time frame
void motors_tick(){
     df8:	2f 92       	push	r2
     dfa:	3f 92       	push	r3
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <motors_tick+0x26>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <motors_tick+0x28>
     e20:	0f 92       	push	r0
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	8e e9       	ldi	r24, 0x9E	; 158
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	3e ea       	ldi	r19, 0xAE	; 174
     e30:	23 2e       	mov	r2, r19
     e32:	31 e0       	ldi	r19, 0x01	; 1
     e34:	33 2e       	mov	r3, r19
     e36:	a6 eb       	ldi	r26, 0xB6	; 182
     e38:	b1 e0       	ldi	r27, 0x01	; 1
     e3a:	bd 83       	std	Y+5, r27	; 0x05
     e3c:	ac 83       	std	Y+4, r26	; 0x04
     e3e:	44 24       	eor	r4, r4
     e40:	55 24       	eor	r5, r5
     e42:	4b 82       	std	Y+3, r4	; 0x03
	for (chan = 0; chan < MOTORS_CHANS; chan ++){
		
		motor = motors_get_motor(chan);

		// get time delta
		tr[chan] = time_get_time_delta(tr[chan].previous);
     e44:	82 01       	movw	r16, r4
     e46:	23 e0       	ldi	r18, 0x03	; 3
     e48:	00 0f       	add	r16, r16
     e4a:	11 1f       	adc	r17, r17
     e4c:	2a 95       	dec	r18
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <motors_tick+0x50>
     e50:	02 56       	subi	r16, 0x62	; 98
     e52:	1e 4f       	sbci	r17, 0xFE	; 254
     e54:	e9 81       	ldd	r30, Y+1	; 0x01
     e56:	fa 81       	ldd	r31, Y+2	; 0x02
     e58:	64 81       	ldd	r22, Z+4	; 0x04
     e5a:	75 81       	ldd	r23, Z+5	; 0x05
     e5c:	86 81       	ldd	r24, Z+6	; 0x06
     e5e:	97 81       	ldd	r25, Z+7	; 0x07
     e60:	0e 94 7e 04 	call	0x8fc	; 0x8fc <time_get_time_delta>
     e64:	d8 01       	movw	r26, r16
     e66:	2c 93       	st	X, r18
     e68:	11 96       	adiw	r26, 0x01	; 1
     e6a:	3c 93       	st	X, r19
     e6c:	11 97       	sbiw	r26, 0x01	; 1
     e6e:	12 96       	adiw	r26, 0x02	; 2
     e70:	4c 93       	st	X, r20
     e72:	12 97       	sbiw	r26, 0x02	; 2
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	5c 93       	st	X, r21
     e78:	13 97       	sbiw	r26, 0x03	; 3
     e7a:	14 96       	adiw	r26, 0x04	; 4
     e7c:	6c 93       	st	X, r22
     e7e:	14 97       	sbiw	r26, 0x04	; 4
     e80:	15 96       	adiw	r26, 0x05	; 5
     e82:	7c 93       	st	X, r23
     e84:	15 97       	sbiw	r26, 0x05	; 5
     e86:	16 96       	adiw	r26, 0x06	; 6
     e88:	8c 93       	st	X, r24
     e8a:	16 97       	sbiw	r26, 0x06	; 6
     e8c:	17 96       	adiw	r26, 0x07	; 7
     e8e:	9c 93       	st	X, r25
		
		// get interrupt counter delta
		icr[chan] = motors_get_interrupt_counter_result(chan, icr[chan].previous);
     e90:	f1 01       	movw	r30, r2
     e92:	62 81       	ldd	r22, Z+2	; 0x02
     e94:	73 81       	ldd	r23, Z+3	; 0x03
     e96:	84 2d       	mov	r24, r4
     e98:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <motors_get_interrupt_counter_result>
     e9c:	d1 01       	movw	r26, r2
     e9e:	6d 93       	st	X+, r22
     ea0:	7d 93       	st	X+, r23
     ea2:	8d 93       	st	X+, r24
     ea4:	9c 93       	st	X, r25
     ea6:	13 97       	sbiw	r26, 0x03	; 3
		

		// 60000 is for converting to milliseconds to minutes (for RPM)
        time_ms = get_time_in_ms(tr[chan].delta);
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	60 81       	ld	r22, Z
     eae:	71 81       	ldd	r23, Z+1	; 0x01
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <get_time_in_ms>
     eb8:	7b 01       	movw	r14, r22
     eba:	8c 01       	movw	r16, r24
		rpm =  (float) icr[chan].delta / (float) INTERRUPTS_PER_ROTATION / (float) time_ms * (float) 60000;
     ebc:	d1 01       	movw	r26, r2
     ebe:	6d 91       	ld	r22, X+
     ec0:	7c 91       	ld	r23, X
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__floatunsisf>
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	5d e3       	ldi	r21, 0x3D	; 61
     ed2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     ed6:	a8 01       	movw	r20, r16
     ed8:	97 01       	movw	r18, r14
     eda:	0e 94 85 0b 	call	0x170a	; 0x170a <__divsf3>
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e6       	ldi	r19, 0x60	; 96
     ee2:	4a e6       	ldi	r20, 0x6A	; 106
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     eea:	3b 01       	movw	r6, r22
     eec:	4c 01       	movw	r8, r24
		
		// avg the rpm delta
        motor->rpm_delta = motor->rpm_delta * 0.65 + (rpm - motor->rpm_previous) * 0.35;		
     eee:	ec 81       	ldd	r30, Y+4	; 0x04
     ef0:	fd 81       	ldd	r31, Y+5	; 0x05
     ef2:	62 85       	ldd	r22, Z+10	; 0x0a
     ef4:	73 85       	ldd	r23, Z+11	; 0x0b
     ef6:	84 85       	ldd	r24, Z+12	; 0x0c
     ef8:	95 85       	ldd	r25, Z+13	; 0x0d
     efa:	26 e6       	ldi	r18, 0x66	; 102
     efc:	36 e6       	ldi	r19, 0x66	; 102
     efe:	46 e2       	ldi	r20, 0x26	; 38
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     f06:	7b 01       	movw	r14, r22
     f08:	8c 01       	movw	r16, r24
     f0a:	c4 01       	movw	r24, r8
     f0c:	b3 01       	movw	r22, r6
     f0e:	ac 81       	ldd	r26, Y+4	; 0x04
     f10:	bd 81       	ldd	r27, Y+5	; 0x05
     f12:	16 96       	adiw	r26, 0x06	; 6
     f14:	2d 91       	ld	r18, X+
     f16:	3d 91       	ld	r19, X+
     f18:	4d 91       	ld	r20, X+
     f1a:	5c 91       	ld	r21, X
     f1c:	19 97       	sbiw	r26, 0x09	; 9
     f1e:	0e 94 2d 0a 	call	0x145a	; 0x145a <__subsf3>
     f22:	23 e3       	ldi	r18, 0x33	; 51
     f24:	33 e3       	ldi	r19, 0x33	; 51
     f26:	43 eb       	ldi	r20, 0xB3	; 179
     f28:	5e e3       	ldi	r21, 0x3E	; 62
     f2a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     f2e:	9b 01       	movw	r18, r22
     f30:	ac 01       	movw	r20, r24
     f32:	c8 01       	movw	r24, r16
     f34:	b7 01       	movw	r22, r14
     f36:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3>
     f3a:	5b 01       	movw	r10, r22
     f3c:	6c 01       	movw	r12, r24
     f3e:	ec 81       	ldd	r30, Y+4	; 0x04
     f40:	fd 81       	ldd	r31, Y+5	; 0x05
     f42:	62 87       	std	Z+10, r22	; 0x0a
     f44:	73 87       	std	Z+11, r23	; 0x0b
     f46:	84 87       	std	Z+12, r24	; 0x0c
     f48:	95 87       	std	Z+13, r25	; 0x0d
		
		// determine the pwm acceleration rate
        pwm_acc = ((float) motor->rpm_target - rpm) * 0.015 - motor->rpm_delta * 0.15;
     f4a:	60 81       	ld	r22, Z
     f4c:	71 81       	ldd	r23, Z+1	; 0x01
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__floatunsisf>
     f56:	a4 01       	movw	r20, r8
     f58:	93 01       	movw	r18, r6
     f5a:	0e 94 2d 0a 	call	0x145a	; 0x145a <__subsf3>
     f5e:	2f e8       	ldi	r18, 0x8F	; 143
     f60:	32 ec       	ldi	r19, 0xC2	; 194
     f62:	45 e7       	ldi	r20, 0x75	; 117
     f64:	5c e3       	ldi	r21, 0x3C	; 60
     f66:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     f6a:	7b 01       	movw	r14, r22
     f6c:	8c 01       	movw	r16, r24
     f6e:	c6 01       	movw	r24, r12
     f70:	b5 01       	movw	r22, r10
     f72:	2a e9       	ldi	r18, 0x9A	; 154
     f74:	39 e9       	ldi	r19, 0x99	; 153
     f76:	49 e1       	ldi	r20, 0x19	; 25
     f78:	5e eb       	ldi	r21, 0xBE	; 190
     f7a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     f7e:	9b 01       	movw	r18, r22
     f80:	ac 01       	movw	r20, r24
     f82:	c8 01       	movw	r24, r16
     f84:	b7 01       	movw	r22, r14
     f86:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
		
		if (pwm_acc < - motor->pwm) motor->pwm = 0;
     f8e:	ac 81       	ldd	r26, Y+4	; 0x04
     f90:	bd 81       	ldd	r27, Y+5	; 0x05
     f92:	1e 96       	adiw	r26, 0x0e	; 14
     f94:	ed 90       	ld	r14, X+
     f96:	fd 90       	ld	r15, X+
     f98:	0d 91       	ld	r16, X+
     f9a:	1c 91       	ld	r17, X
     f9c:	51 97       	sbiw	r26, 0x11	; 17
     f9e:	a8 01       	movw	r20, r16
     fa0:	97 01       	movw	r18, r14
     fa2:	50 58       	subi	r21, 0x80	; 128
     fa4:	0e 94 91 0c 	call	0x1922	; 0x1922 <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <motors_tick+0x1be>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a0 e0       	ldi	r26, 0x00	; 0
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	14 c0       	rjmp	.+40     	; 0xfde <motors_tick+0x1e6>
		else if (pwm_acc + motor->pwm > 1023) motor->pwm = 1023;
     fb6:	c6 01       	movw	r24, r12
     fb8:	b5 01       	movw	r22, r10
     fba:	a8 01       	movw	r20, r16
     fbc:	97 01       	movw	r18, r14
     fbe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3>
     fc2:	7b 01       	movw	r14, r22
     fc4:	8c 01       	movw	r16, r24
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 ec       	ldi	r19, 0xC0	; 192
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	54 e4       	ldi	r21, 0x44	; 68
     fce:	0e 94 31 0c 	call	0x1862	; 0x1862 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	5c f4       	brge	.+22     	; 0xfec <motors_tick+0x1f4>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 ec       	ldi	r25, 0xC0	; 192
     fda:	af e7       	ldi	r26, 0x7F	; 127
     fdc:	b4 e4       	ldi	r27, 0x44	; 68
     fde:	ec 81       	ldd	r30, Y+4	; 0x04
     fe0:	fd 81       	ldd	r31, Y+5	; 0x05
     fe2:	86 87       	std	Z+14, r24	; 0x0e
     fe4:	97 87       	std	Z+15, r25	; 0x0f
     fe6:	a0 8b       	std	Z+16, r26	; 0x10
     fe8:	b1 8b       	std	Z+17, r27	; 0x11
     fea:	08 c0       	rjmp	.+16     	; 0xffc <motors_tick+0x204>
		else{
			 motor->pwm =  motor->pwm + pwm_acc;
     fec:	ac 81       	ldd	r26, Y+4	; 0x04
     fee:	bd 81       	ldd	r27, Y+5	; 0x05
     ff0:	1e 96       	adiw	r26, 0x0e	; 14
     ff2:	ed 92       	st	X+, r14
     ff4:	fd 92       	st	X+, r15
     ff6:	0d 93       	st	X+, r16
     ff8:	1c 93       	st	X, r17
     ffa:	51 97       	sbiw	r26, 0x11	; 17
		}

		
		if (motor->rpm_target == 0) motor->pwm = 0;
     ffc:	ec 81       	ldd	r30, Y+4	; 0x04
     ffe:	fd 81       	ldd	r31, Y+5	; 0x05
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	89 2b       	or	r24, r25
    1006:	41 f4       	brne	.+16     	; 0x1018 <motors_tick+0x220>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	86 87       	std	Z+14, r24	; 0x0e
    1012:	97 87       	std	Z+15, r25	; 0x0f
    1014:	a0 8b       	std	Z+16, r26	; 0x10
    1016:	b1 8b       	std	Z+17, r27	; 0x11
		pwm_set(chan,floor(motor->pwm));
    1018:	ac 81       	ldd	r26, Y+4	; 0x04
    101a:	bd 81       	ldd	r27, Y+5	; 0x05
    101c:	1e 96       	adiw	r26, 0x0e	; 14
    101e:	6d 91       	ld	r22, X+
    1020:	7d 91       	ld	r23, X+
    1022:	8d 91       	ld	r24, X+
    1024:	9c 91       	ld	r25, X
    1026:	51 97       	sbiw	r26, 0x11	; 17
    1028:	0e 94 0f 11 	call	0x221e	; 0x221e <floor>
    102c:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixunssfsi>
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 23 04 	call	0x846	; 0x846 <pwm_set>
		motor->rpm_previous = rpm;
    103c:	ec 81       	ldd	r30, Y+4	; 0x04
    103e:	fd 81       	ldd	r31, Y+5	; 0x05
    1040:	66 82       	std	Z+6, r6	; 0x06
    1042:	77 82       	std	Z+7, r7	; 0x07
    1044:	80 86       	std	Z+8, r8	; 0x08
    1046:	91 86       	std	Z+9, r9	; 0x09
		motor->rpm_measured = rpm;
    1048:	df 01       	movw	r26, r30
    104a:	62 82       	std	Z+2, r6	; 0x02
    104c:	73 82       	std	Z+3, r7	; 0x03
    104e:	84 82       	std	Z+4, r8	; 0x04
    1050:	95 82       	std	Z+5, r9	; 0x05
    1052:	08 94       	sec
    1054:	41 1c       	adc	r4, r1
    1056:	51 1c       	adc	r5, r1
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	38 96       	adiw	r30, 0x08	; 8
    105e:	fa 83       	std	Y+2, r31	; 0x02
    1060:	e9 83       	std	Y+1, r30	; 0x01
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	28 0e       	add	r2, r24
    1068:	39 1e       	adc	r3, r25
    106a:	54 96       	adiw	r26, 0x14	; 20
    106c:	bd 83       	std	Y+5, r27	; 0x05
    106e:	ac 83       	std	Y+4, r26	; 0x04
	static InterruptCounterResult icr[MOTORS_CHANS];
    static TimeResult tr[MOTORS_CHANS];
	float time_ms, pwm_acc, rpm;
	uint8_t chan;

	for (chan = 0; chan < MOTORS_CHANS; chan ++){
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	49 16       	cp	r4, r25
    1074:	51 04       	cpc	r5, r1
    1076:	09 f0       	breq	.+2      	; 0x107a <motors_tick+0x282>
    1078:	e4 ce       	rjmp	.-568    	; 0xe42 <motors_tick+0x4a>
		if (motor->rpm_target == 0) motor->pwm = 0;
		pwm_set(chan,floor(motor->pwm));
		motor->rpm_previous = rpm;
		motor->rpm_measured = rpm;
	}    
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	5f 90       	pop	r5
    10a2:	4f 90       	pop	r4
    10a4:	3f 90       	pop	r3
    10a6:	2f 90       	pop	r2
    10a8:	08 95       	ret

000010aa <motors_init>:

// initialize the motor system
void motors_init(){
	
	// configure external interrupts on INT0 and INT1
	setbit(MCUCR,	BIT(ISC00) 	| 	BIT(ISC10));
    10aa:	85 b7       	in	r24, 0x35	; 53
    10ac:	85 60       	ori	r24, 0x05	; 5
    10ae:	85 bf       	out	0x35, r24	; 53
	setbit(GICR, 	BIT(INT0) 	| 	BIT(INT1));
    10b0:	8b b7       	in	r24, 0x3b	; 59
    10b2:	80 6c       	ori	r24, 0xC0	; 192
    10b4:	8b bf       	out	0x3b, r24	; 59

	// initialize hardware PWM
	pwm_init();
    10b6:	0e 94 0f 04 	call	0x81e	; 0x81e <pwm_init>

	// set pwm scalar
	pwm_set_scalar(3);
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	0e 94 1d 04 	call	0x83a	; 0x83a <pwm_set_scalar>
    
    // init all the motor structs
    Motor* motor;
    for (uint8_t chan = 0; chan < MOTORS_CHANS; chan ++){
        motor = motors_get_motor(chan);
        motor->rpm_target = 0;
    10c0:	10 92 b7 01 	sts	0x01B7, r1
    10c4:	10 92 b6 01 	sts	0x01B6, r1
        motor->rpm_measured = 0;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	80 93 b8 01 	sts	0x01B8, r24
    10d4:	90 93 b9 01 	sts	0x01B9, r25
    10d8:	a0 93 ba 01 	sts	0x01BA, r26
    10dc:	b0 93 bb 01 	sts	0x01BB, r27
        motor->rpm_previous = 0;
    10e0:	80 93 bc 01 	sts	0x01BC, r24
    10e4:	90 93 bd 01 	sts	0x01BD, r25
    10e8:	a0 93 be 01 	sts	0x01BE, r26
    10ec:	b0 93 bf 01 	sts	0x01BF, r27
        motor->rpm_delta = 0;
    10f0:	80 93 c0 01 	sts	0x01C0, r24
    10f4:	90 93 c1 01 	sts	0x01C1, r25
    10f8:	a0 93 c2 01 	sts	0x01C2, r26
    10fc:	b0 93 c3 01 	sts	0x01C3, r27
        motor->pwm = 0;
    1100:	80 93 c4 01 	sts	0x01C4, r24
    1104:	90 93 c5 01 	sts	0x01C5, r25
    1108:	a0 93 c6 01 	sts	0x01C6, r26
    110c:	b0 93 c7 01 	sts	0x01C7, r27
        motor->dir_target = 0;
    1110:	10 92 c8 01 	sts	0x01C8, r1
        motor->dir_measured = 0;        
    1114:	10 92 c9 01 	sts	0x01C9, r1
    
    // init all the motor structs
    Motor* motor;
    for (uint8_t chan = 0; chan < MOTORS_CHANS; chan ++){
        motor = motors_get_motor(chan);
        motor->rpm_target = 0;
    1118:	10 92 cb 01 	sts	0x01CB, r1
    111c:	10 92 ca 01 	sts	0x01CA, r1
        motor->rpm_measured = 0;
    1120:	80 93 cc 01 	sts	0x01CC, r24
    1124:	90 93 cd 01 	sts	0x01CD, r25
    1128:	a0 93 ce 01 	sts	0x01CE, r26
    112c:	b0 93 cf 01 	sts	0x01CF, r27
        motor->rpm_previous = 0;
    1130:	80 93 d0 01 	sts	0x01D0, r24
    1134:	90 93 d1 01 	sts	0x01D1, r25
    1138:	a0 93 d2 01 	sts	0x01D2, r26
    113c:	b0 93 d3 01 	sts	0x01D3, r27
        motor->rpm_delta = 0;
    1140:	80 93 d4 01 	sts	0x01D4, r24
    1144:	90 93 d5 01 	sts	0x01D5, r25
    1148:	a0 93 d6 01 	sts	0x01D6, r26
    114c:	b0 93 d7 01 	sts	0x01D7, r27
        motor->pwm = 0;
    1150:	80 93 d8 01 	sts	0x01D8, r24
    1154:	90 93 d9 01 	sts	0x01D9, r25
    1158:	a0 93 da 01 	sts	0x01DA, r26
    115c:	b0 93 db 01 	sts	0x01DB, r27
        motor->dir_target = 0;
    1160:	10 92 dc 01 	sts	0x01DC, r1
        motor->dir_measured = 0;        
    1164:	10 92 dd 01 	sts	0x01DD, r1
    }
}
    1168:	08 95       	ret

0000116a <__fixunssfsi>:
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	7b 01       	movw	r14, r22
    1174:	8c 01       	movw	r16, r24
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	5f e4       	ldi	r21, 0x4F	; 79
    117e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__gesf2>
    1182:	88 23       	and	r24, r24
    1184:	8c f0       	brlt	.+34     	; 0x11a8 <__fixunssfsi+0x3e>
    1186:	c8 01       	movw	r24, r16
    1188:	b7 01       	movw	r22, r14
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	5f e4       	ldi	r21, 0x4F	; 79
    1192:	0e 94 2d 0a 	call	0x145a	; 0x145a <__subsf3>
    1196:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fixsfsi>
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	20 50       	subi	r18, 0x00	; 0
    11a0:	30 40       	sbci	r19, 0x00	; 0
    11a2:	40 40       	sbci	r20, 0x00	; 0
    11a4:	50 48       	sbci	r21, 0x80	; 128
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <__fixunssfsi+0x4a>
    11a8:	c8 01       	movw	r24, r16
    11aa:	b7 01       	movw	r22, r14
    11ac:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fixsfsi>
    11b0:	9b 01       	movw	r18, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	b9 01       	movw	r22, r18
    11b6:	ca 01       	movw	r24, r20
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	08 95       	ret

000011c2 <_fpadd_parts>:
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e7 ee       	ldi	r30, 0xE7	; 231
    11c8:	f8 e0       	ldi	r31, 0x08	; 8
    11ca:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__prologue_saves__>
    11ce:	dc 01       	movw	r26, r24
    11d0:	2b 01       	movw	r4, r22
    11d2:	fa 01       	movw	r30, r20
    11d4:	9c 91       	ld	r25, X
    11d6:	92 30       	cpi	r25, 0x02	; 2
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <_fpadd_parts+0x1a>
    11da:	39 c1       	rjmp	.+626    	; 0x144e <_fpadd_parts+0x28c>
    11dc:	eb 01       	movw	r28, r22
    11de:	88 81       	ld	r24, Y
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <_fpadd_parts+0x24>
    11e4:	33 c1       	rjmp	.+614    	; 0x144c <_fpadd_parts+0x28a>
    11e6:	94 30       	cpi	r25, 0x04	; 4
    11e8:	69 f4       	brne	.+26     	; 0x1204 <_fpadd_parts+0x42>
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <_fpadd_parts+0x2e>
    11ee:	2f c1       	rjmp	.+606    	; 0x144e <_fpadd_parts+0x28c>
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	9c 91       	ld	r25, X
    11f4:	11 97       	sbiw	r26, 0x01	; 1
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	98 17       	cp	r25, r24
    11fa:	09 f4       	brne	.+2      	; 0x11fe <_fpadd_parts+0x3c>
    11fc:	28 c1       	rjmp	.+592    	; 0x144e <_fpadd_parts+0x28c>
    11fe:	a4 e7       	ldi	r26, 0x74	; 116
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	25 c1       	rjmp	.+586    	; 0x144e <_fpadd_parts+0x28c>
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	09 f4       	brne	.+2      	; 0x120a <_fpadd_parts+0x48>
    1208:	21 c1       	rjmp	.+578    	; 0x144c <_fpadd_parts+0x28a>
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	a9 f4       	brne	.+42     	; 0x1238 <_fpadd_parts+0x76>
    120e:	92 30       	cpi	r25, 0x02	; 2
    1210:	09 f0       	breq	.+2      	; 0x1214 <_fpadd_parts+0x52>
    1212:	1d c1       	rjmp	.+570    	; 0x144e <_fpadd_parts+0x28c>
    1214:	9a 01       	movw	r18, r20
    1216:	ad 01       	movw	r20, r26
    1218:	88 e0       	ldi	r24, 0x08	; 8
    121a:	ea 01       	movw	r28, r20
    121c:	09 90       	ld	r0, Y+
    121e:	ae 01       	movw	r20, r28
    1220:	e9 01       	movw	r28, r18
    1222:	09 92       	st	Y+, r0
    1224:	9e 01       	movw	r18, r28
    1226:	81 50       	subi	r24, 0x01	; 1
    1228:	c1 f7       	brne	.-16     	; 0x121a <_fpadd_parts+0x58>
    122a:	e2 01       	movw	r28, r4
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	9c 91       	ld	r25, X
    1232:	89 23       	and	r24, r25
    1234:	81 83       	std	Z+1, r24	; 0x01
    1236:	08 c1       	rjmp	.+528    	; 0x1448 <_fpadd_parts+0x286>
    1238:	92 30       	cpi	r25, 0x02	; 2
    123a:	09 f4       	brne	.+2      	; 0x123e <_fpadd_parts+0x7c>
    123c:	07 c1       	rjmp	.+526    	; 0x144c <_fpadd_parts+0x28a>
    123e:	12 96       	adiw	r26, 0x02	; 2
    1240:	2d 90       	ld	r2, X+
    1242:	3c 90       	ld	r3, X
    1244:	13 97       	sbiw	r26, 0x03	; 3
    1246:	eb 01       	movw	r28, r22
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	14 96       	adiw	r26, 0x04	; 4
    124e:	ad 90       	ld	r10, X+
    1250:	bd 90       	ld	r11, X+
    1252:	cd 90       	ld	r12, X+
    1254:	dc 90       	ld	r13, X
    1256:	17 97       	sbiw	r26, 0x07	; 7
    1258:	ec 80       	ldd	r14, Y+4	; 0x04
    125a:	fd 80       	ldd	r15, Y+5	; 0x05
    125c:	0e 81       	ldd	r16, Y+6	; 0x06
    125e:	1f 81       	ldd	r17, Y+7	; 0x07
    1260:	91 01       	movw	r18, r2
    1262:	28 1b       	sub	r18, r24
    1264:	39 0b       	sbc	r19, r25
    1266:	b9 01       	movw	r22, r18
    1268:	37 ff       	sbrs	r19, 7
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <_fpadd_parts+0xb2>
    126c:	66 27       	eor	r22, r22
    126e:	77 27       	eor	r23, r23
    1270:	62 1b       	sub	r22, r18
    1272:	73 0b       	sbc	r23, r19
    1274:	60 32       	cpi	r22, 0x20	; 32
    1276:	71 05       	cpc	r23, r1
    1278:	0c f0       	brlt	.+2      	; 0x127c <_fpadd_parts+0xba>
    127a:	61 c0       	rjmp	.+194    	; 0x133e <_fpadd_parts+0x17c>
    127c:	12 16       	cp	r1, r18
    127e:	13 06       	cpc	r1, r19
    1280:	6c f5       	brge	.+90     	; 0x12dc <_fpadd_parts+0x11a>
    1282:	37 01       	movw	r6, r14
    1284:	48 01       	movw	r8, r16
    1286:	06 2e       	mov	r0, r22
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <_fpadd_parts+0xd0>
    128a:	96 94       	lsr	r9
    128c:	87 94       	ror	r8
    128e:	77 94       	ror	r7
    1290:	67 94       	ror	r6
    1292:	0a 94       	dec	r0
    1294:	d2 f7       	brpl	.-12     	; 0x128a <_fpadd_parts+0xc8>
    1296:	21 e0       	ldi	r18, 0x01	; 1
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <_fpadd_parts+0xe6>
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	44 1f       	adc	r20, r20
    12a6:	55 1f       	adc	r21, r21
    12a8:	6a 95       	dec	r22
    12aa:	d2 f7       	brpl	.-12     	; 0x12a0 <_fpadd_parts+0xde>
    12ac:	21 50       	subi	r18, 0x01	; 1
    12ae:	30 40       	sbci	r19, 0x00	; 0
    12b0:	40 40       	sbci	r20, 0x00	; 0
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	2e 21       	and	r18, r14
    12b6:	3f 21       	and	r19, r15
    12b8:	40 23       	and	r20, r16
    12ba:	51 23       	and	r21, r17
    12bc:	21 15       	cp	r18, r1
    12be:	31 05       	cpc	r19, r1
    12c0:	41 05       	cpc	r20, r1
    12c2:	51 05       	cpc	r21, r1
    12c4:	21 f0       	breq	.+8      	; 0x12ce <_fpadd_parts+0x10c>
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	79 01       	movw	r14, r18
    12d0:	8a 01       	movw	r16, r20
    12d2:	e6 28       	or	r14, r6
    12d4:	f7 28       	or	r15, r7
    12d6:	08 29       	or	r16, r8
    12d8:	19 29       	or	r17, r9
    12da:	3c c0       	rjmp	.+120    	; 0x1354 <_fpadd_parts+0x192>
    12dc:	23 2b       	or	r18, r19
    12de:	d1 f1       	breq	.+116    	; 0x1354 <_fpadd_parts+0x192>
    12e0:	26 0e       	add	r2, r22
    12e2:	37 1e       	adc	r3, r23
    12e4:	35 01       	movw	r6, r10
    12e6:	46 01       	movw	r8, r12
    12e8:	06 2e       	mov	r0, r22
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <_fpadd_parts+0x132>
    12ec:	96 94       	lsr	r9
    12ee:	87 94       	ror	r8
    12f0:	77 94       	ror	r7
    12f2:	67 94       	ror	r6
    12f4:	0a 94       	dec	r0
    12f6:	d2 f7       	brpl	.-12     	; 0x12ec <_fpadd_parts+0x12a>
    12f8:	21 e0       	ldi	r18, 0x01	; 1
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	04 c0       	rjmp	.+8      	; 0x130a <_fpadd_parts+0x148>
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	44 1f       	adc	r20, r20
    1308:	55 1f       	adc	r21, r21
    130a:	6a 95       	dec	r22
    130c:	d2 f7       	brpl	.-12     	; 0x1302 <_fpadd_parts+0x140>
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	30 40       	sbci	r19, 0x00	; 0
    1312:	40 40       	sbci	r20, 0x00	; 0
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	2a 21       	and	r18, r10
    1318:	3b 21       	and	r19, r11
    131a:	4c 21       	and	r20, r12
    131c:	5d 21       	and	r21, r13
    131e:	21 15       	cp	r18, r1
    1320:	31 05       	cpc	r19, r1
    1322:	41 05       	cpc	r20, r1
    1324:	51 05       	cpc	r21, r1
    1326:	21 f0       	breq	.+8      	; 0x1330 <_fpadd_parts+0x16e>
    1328:	21 e0       	ldi	r18, 0x01	; 1
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	59 01       	movw	r10, r18
    1332:	6a 01       	movw	r12, r20
    1334:	a6 28       	or	r10, r6
    1336:	b7 28       	or	r11, r7
    1338:	c8 28       	or	r12, r8
    133a:	d9 28       	or	r13, r9
    133c:	0b c0       	rjmp	.+22     	; 0x1354 <_fpadd_parts+0x192>
    133e:	82 15       	cp	r24, r2
    1340:	93 05       	cpc	r25, r3
    1342:	2c f0       	brlt	.+10     	; 0x134e <_fpadd_parts+0x18c>
    1344:	1c 01       	movw	r2, r24
    1346:	aa 24       	eor	r10, r10
    1348:	bb 24       	eor	r11, r11
    134a:	65 01       	movw	r12, r10
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <_fpadd_parts+0x192>
    134e:	ee 24       	eor	r14, r14
    1350:	ff 24       	eor	r15, r15
    1352:	87 01       	movw	r16, r14
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	9c 91       	ld	r25, X
    1358:	d2 01       	movw	r26, r4
    135a:	11 96       	adiw	r26, 0x01	; 1
    135c:	8c 91       	ld	r24, X
    135e:	98 17       	cp	r25, r24
    1360:	09 f4       	brne	.+2      	; 0x1364 <_fpadd_parts+0x1a2>
    1362:	45 c0       	rjmp	.+138    	; 0x13ee <_fpadd_parts+0x22c>
    1364:	99 23       	and	r25, r25
    1366:	39 f0       	breq	.+14     	; 0x1376 <_fpadd_parts+0x1b4>
    1368:	a8 01       	movw	r20, r16
    136a:	97 01       	movw	r18, r14
    136c:	2a 19       	sub	r18, r10
    136e:	3b 09       	sbc	r19, r11
    1370:	4c 09       	sbc	r20, r12
    1372:	5d 09       	sbc	r21, r13
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <_fpadd_parts+0x1c0>
    1376:	a6 01       	movw	r20, r12
    1378:	95 01       	movw	r18, r10
    137a:	2e 19       	sub	r18, r14
    137c:	3f 09       	sbc	r19, r15
    137e:	40 0b       	sbc	r20, r16
    1380:	51 0b       	sbc	r21, r17
    1382:	57 fd       	sbrc	r21, 7
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <_fpadd_parts+0x1d4>
    1386:	11 82       	std	Z+1, r1	; 0x01
    1388:	33 82       	std	Z+3, r3	; 0x03
    138a:	22 82       	std	Z+2, r2	; 0x02
    138c:	24 83       	std	Z+4, r18	; 0x04
    138e:	35 83       	std	Z+5, r19	; 0x05
    1390:	46 83       	std	Z+6, r20	; 0x06
    1392:	57 83       	std	Z+7, r21	; 0x07
    1394:	1d c0       	rjmp	.+58     	; 0x13d0 <_fpadd_parts+0x20e>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	81 83       	std	Z+1, r24	; 0x01
    139a:	33 82       	std	Z+3, r3	; 0x03
    139c:	22 82       	std	Z+2, r2	; 0x02
    139e:	88 27       	eor	r24, r24
    13a0:	99 27       	eor	r25, r25
    13a2:	dc 01       	movw	r26, r24
    13a4:	82 1b       	sub	r24, r18
    13a6:	93 0b       	sbc	r25, r19
    13a8:	a4 0b       	sbc	r26, r20
    13aa:	b5 0b       	sbc	r27, r21
    13ac:	84 83       	std	Z+4, r24	; 0x04
    13ae:	95 83       	std	Z+5, r25	; 0x05
    13b0:	a6 83       	std	Z+6, r26	; 0x06
    13b2:	b7 83       	std	Z+7, r27	; 0x07
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <_fpadd_parts+0x20e>
    13b6:	22 0f       	add	r18, r18
    13b8:	33 1f       	adc	r19, r19
    13ba:	44 1f       	adc	r20, r20
    13bc:	55 1f       	adc	r21, r21
    13be:	24 83       	std	Z+4, r18	; 0x04
    13c0:	35 83       	std	Z+5, r19	; 0x05
    13c2:	46 83       	std	Z+6, r20	; 0x06
    13c4:	57 83       	std	Z+7, r21	; 0x07
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	93 83       	std	Z+3, r25	; 0x03
    13ce:	82 83       	std	Z+2, r24	; 0x02
    13d0:	24 81       	ldd	r18, Z+4	; 0x04
    13d2:	35 81       	ldd	r19, Z+5	; 0x05
    13d4:	46 81       	ldd	r20, Z+6	; 0x06
    13d6:	57 81       	ldd	r21, Z+7	; 0x07
    13d8:	da 01       	movw	r26, r20
    13da:	c9 01       	movw	r24, r18
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	a1 09       	sbc	r26, r1
    13e0:	b1 09       	sbc	r27, r1
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	af 4f       	sbci	r26, 0xFF	; 255
    13e8:	bf 43       	sbci	r27, 0x3F	; 63
    13ea:	28 f3       	brcs	.-54     	; 0x13b6 <_fpadd_parts+0x1f4>
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <_fpadd_parts+0x242>
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	33 82       	std	Z+3, r3	; 0x03
    13f2:	22 82       	std	Z+2, r2	; 0x02
    13f4:	ea 0c       	add	r14, r10
    13f6:	fb 1c       	adc	r15, r11
    13f8:	0c 1d       	adc	r16, r12
    13fa:	1d 1d       	adc	r17, r13
    13fc:	e4 82       	std	Z+4, r14	; 0x04
    13fe:	f5 82       	std	Z+5, r15	; 0x05
    1400:	06 83       	std	Z+6, r16	; 0x06
    1402:	17 83       	std	Z+7, r17	; 0x07
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	80 83       	st	Z, r24
    1408:	24 81       	ldd	r18, Z+4	; 0x04
    140a:	35 81       	ldd	r19, Z+5	; 0x05
    140c:	46 81       	ldd	r20, Z+6	; 0x06
    140e:	57 81       	ldd	r21, Z+7	; 0x07
    1410:	57 ff       	sbrs	r21, 7
    1412:	1a c0       	rjmp	.+52     	; 0x1448 <_fpadd_parts+0x286>
    1414:	c9 01       	movw	r24, r18
    1416:	aa 27       	eor	r26, r26
    1418:	97 fd       	sbrc	r25, 7
    141a:	a0 95       	com	r26
    141c:	ba 2f       	mov	r27, r26
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	90 70       	andi	r25, 0x00	; 0
    1422:	a0 70       	andi	r26, 0x00	; 0
    1424:	b0 70       	andi	r27, 0x00	; 0
    1426:	56 95       	lsr	r21
    1428:	47 95       	ror	r20
    142a:	37 95       	ror	r19
    142c:	27 95       	ror	r18
    142e:	82 2b       	or	r24, r18
    1430:	93 2b       	or	r25, r19
    1432:	a4 2b       	or	r26, r20
    1434:	b5 2b       	or	r27, r21
    1436:	84 83       	std	Z+4, r24	; 0x04
    1438:	95 83       	std	Z+5, r25	; 0x05
    143a:	a6 83       	std	Z+6, r26	; 0x06
    143c:	b7 83       	std	Z+7, r27	; 0x07
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	93 83       	std	Z+3, r25	; 0x03
    1446:	82 83       	std	Z+2, r24	; 0x02
    1448:	df 01       	movw	r26, r30
    144a:	01 c0       	rjmp	.+2      	; 0x144e <_fpadd_parts+0x28c>
    144c:	d2 01       	movw	r26, r4
    144e:	cd 01       	movw	r24, r26
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	e2 e1       	ldi	r30, 0x12	; 18
    1456:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__epilogue_restores__>

0000145a <__subsf3>:
    145a:	a0 e2       	ldi	r26, 0x20	; 32
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e3 e3       	ldi	r30, 0x33	; 51
    1460:	fa e0       	ldi	r31, 0x0A	; 10
    1462:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x18>
    1466:	69 83       	std	Y+1, r22	; 0x01
    1468:	7a 83       	std	Y+2, r23	; 0x02
    146a:	8b 83       	std	Y+3, r24	; 0x03
    146c:	9c 83       	std	Y+4, r25	; 0x04
    146e:	2d 83       	std	Y+5, r18	; 0x05
    1470:	3e 83       	std	Y+6, r19	; 0x06
    1472:	4f 83       	std	Y+7, r20	; 0x07
    1474:	58 87       	std	Y+8, r21	; 0x08
    1476:	e9 e0       	ldi	r30, 0x09	; 9
    1478:	ee 2e       	mov	r14, r30
    147a:	f1 2c       	mov	r15, r1
    147c:	ec 0e       	add	r14, r28
    147e:	fd 1e       	adc	r15, r29
    1480:	ce 01       	movw	r24, r28
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	b7 01       	movw	r22, r14
    1486:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    148a:	8e 01       	movw	r16, r28
    148c:	0f 5e       	subi	r16, 0xEF	; 239
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	ce 01       	movw	r24, r28
    1492:	05 96       	adiw	r24, 0x05	; 5
    1494:	b8 01       	movw	r22, r16
    1496:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    149a:	8a 89       	ldd	r24, Y+18	; 0x12
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	89 27       	eor	r24, r25
    14a0:	8a 8b       	std	Y+18, r24	; 0x12
    14a2:	c7 01       	movw	r24, r14
    14a4:	b8 01       	movw	r22, r16
    14a6:	ae 01       	movw	r20, r28
    14a8:	47 5e       	subi	r20, 0xE7	; 231
    14aa:	5f 4f       	sbci	r21, 0xFF	; 255
    14ac:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_fpadd_parts>
    14b0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__pack_f>
    14b4:	a0 96       	adiw	r28, 0x20	; 32
    14b6:	e6 e0       	ldi	r30, 0x06	; 6
    14b8:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x18>

000014bc <__addsf3>:
    14bc:	a0 e2       	ldi	r26, 0x20	; 32
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e4 e6       	ldi	r30, 0x64	; 100
    14c2:	fa e0       	ldi	r31, 0x0A	; 10
    14c4:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x18>
    14c8:	69 83       	std	Y+1, r22	; 0x01
    14ca:	7a 83       	std	Y+2, r23	; 0x02
    14cc:	8b 83       	std	Y+3, r24	; 0x03
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	2d 83       	std	Y+5, r18	; 0x05
    14d2:	3e 83       	std	Y+6, r19	; 0x06
    14d4:	4f 83       	std	Y+7, r20	; 0x07
    14d6:	58 87       	std	Y+8, r21	; 0x08
    14d8:	f9 e0       	ldi	r31, 0x09	; 9
    14da:	ef 2e       	mov	r14, r31
    14dc:	f1 2c       	mov	r15, r1
    14de:	ec 0e       	add	r14, r28
    14e0:	fd 1e       	adc	r15, r29
    14e2:	ce 01       	movw	r24, r28
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	b7 01       	movw	r22, r14
    14e8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    14ec:	8e 01       	movw	r16, r28
    14ee:	0f 5e       	subi	r16, 0xEF	; 239
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	ce 01       	movw	r24, r28
    14f4:	05 96       	adiw	r24, 0x05	; 5
    14f6:	b8 01       	movw	r22, r16
    14f8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    14fc:	c7 01       	movw	r24, r14
    14fe:	b8 01       	movw	r22, r16
    1500:	ae 01       	movw	r20, r28
    1502:	47 5e       	subi	r20, 0xE7	; 231
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_fpadd_parts>
    150a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__pack_f>
    150e:	a0 96       	adiw	r28, 0x20	; 32
    1510:	e6 e0       	ldi	r30, 0x06	; 6
    1512:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x18>

00001516 <__mulsf3>:
    1516:	a0 e2       	ldi	r26, 0x20	; 32
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e1 e9       	ldi	r30, 0x91	; 145
    151c:	fa e0       	ldi	r31, 0x0A	; 10
    151e:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__prologue_saves__>
    1522:	69 83       	std	Y+1, r22	; 0x01
    1524:	7a 83       	std	Y+2, r23	; 0x02
    1526:	8b 83       	std	Y+3, r24	; 0x03
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	2d 83       	std	Y+5, r18	; 0x05
    152c:	3e 83       	std	Y+6, r19	; 0x06
    152e:	4f 83       	std	Y+7, r20	; 0x07
    1530:	58 87       	std	Y+8, r21	; 0x08
    1532:	ce 01       	movw	r24, r28
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	be 01       	movw	r22, r28
    1538:	67 5f       	subi	r22, 0xF7	; 247
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    1540:	ce 01       	movw	r24, r28
    1542:	05 96       	adiw	r24, 0x05	; 5
    1544:	be 01       	movw	r22, r28
    1546:	6f 5e       	subi	r22, 0xEF	; 239
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    154e:	99 85       	ldd	r25, Y+9	; 0x09
    1550:	92 30       	cpi	r25, 0x02	; 2
    1552:	88 f0       	brcs	.+34     	; 0x1576 <__mulsf3+0x60>
    1554:	89 89       	ldd	r24, Y+17	; 0x11
    1556:	82 30       	cpi	r24, 0x02	; 2
    1558:	c8 f0       	brcs	.+50     	; 0x158c <__mulsf3+0x76>
    155a:	94 30       	cpi	r25, 0x04	; 4
    155c:	19 f4       	brne	.+6      	; 0x1564 <__mulsf3+0x4e>
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	51 f4       	brne	.+20     	; 0x1576 <__mulsf3+0x60>
    1562:	04 c0       	rjmp	.+8      	; 0x156c <__mulsf3+0x56>
    1564:	84 30       	cpi	r24, 0x04	; 4
    1566:	29 f4       	brne	.+10     	; 0x1572 <__mulsf3+0x5c>
    1568:	92 30       	cpi	r25, 0x02	; 2
    156a:	81 f4       	brne	.+32     	; 0x158c <__mulsf3+0x76>
    156c:	84 e7       	ldi	r24, 0x74	; 116
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	c6 c0       	rjmp	.+396    	; 0x16fe <__mulsf3+0x1e8>
    1572:	92 30       	cpi	r25, 0x02	; 2
    1574:	49 f4       	brne	.+18     	; 0x1588 <__mulsf3+0x72>
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	9a 85       	ldd	r25, Y+10	; 0x0a
    157a:	8a 89       	ldd	r24, Y+18	; 0x12
    157c:	98 13       	cpse	r25, r24
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	2a 87       	std	Y+10, r18	; 0x0a
    1582:	ce 01       	movw	r24, r28
    1584:	09 96       	adiw	r24, 0x09	; 9
    1586:	bb c0       	rjmp	.+374    	; 0x16fe <__mulsf3+0x1e8>
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	49 f4       	brne	.+18     	; 0x159e <__mulsf3+0x88>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	8a 89       	ldd	r24, Y+18	; 0x12
    1592:	98 13       	cpse	r25, r24
    1594:	21 e0       	ldi	r18, 0x01	; 1
    1596:	2a 8b       	std	Y+18, r18	; 0x12
    1598:	ce 01       	movw	r24, r28
    159a:	41 96       	adiw	r24, 0x11	; 17
    159c:	b0 c0       	rjmp	.+352    	; 0x16fe <__mulsf3+0x1e8>
    159e:	2d 84       	ldd	r2, Y+13	; 0x0d
    15a0:	3e 84       	ldd	r3, Y+14	; 0x0e
    15a2:	4f 84       	ldd	r4, Y+15	; 0x0f
    15a4:	58 88       	ldd	r5, Y+16	; 0x10
    15a6:	6d 88       	ldd	r6, Y+21	; 0x15
    15a8:	7e 88       	ldd	r7, Y+22	; 0x16
    15aa:	8f 88       	ldd	r8, Y+23	; 0x17
    15ac:	98 8c       	ldd	r9, Y+24	; 0x18
    15ae:	ee 24       	eor	r14, r14
    15b0:	ff 24       	eor	r15, r15
    15b2:	87 01       	movw	r16, r14
    15b4:	aa 24       	eor	r10, r10
    15b6:	bb 24       	eor	r11, r11
    15b8:	65 01       	movw	r12, r10
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	e0 e0       	ldi	r30, 0x00	; 0
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	c1 01       	movw	r24, r2
    15c8:	81 70       	andi	r24, 0x01	; 1
    15ca:	90 70       	andi	r25, 0x00	; 0
    15cc:	89 2b       	or	r24, r25
    15ce:	e9 f0       	breq	.+58     	; 0x160a <__mulsf3+0xf4>
    15d0:	e6 0c       	add	r14, r6
    15d2:	f7 1c       	adc	r15, r7
    15d4:	08 1d       	adc	r16, r8
    15d6:	19 1d       	adc	r17, r9
    15d8:	9a 01       	movw	r18, r20
    15da:	ab 01       	movw	r20, r22
    15dc:	2a 0d       	add	r18, r10
    15de:	3b 1d       	adc	r19, r11
    15e0:	4c 1d       	adc	r20, r12
    15e2:	5d 1d       	adc	r21, r13
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e6 14       	cp	r14, r6
    15ee:	f7 04       	cpc	r15, r7
    15f0:	08 05       	cpc	r16, r8
    15f2:	19 05       	cpc	r17, r9
    15f4:	20 f4       	brcc	.+8      	; 0x15fe <__mulsf3+0xe8>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ba 01       	movw	r22, r20
    1600:	a9 01       	movw	r20, r18
    1602:	48 0f       	add	r20, r24
    1604:	59 1f       	adc	r21, r25
    1606:	6a 1f       	adc	r22, r26
    1608:	7b 1f       	adc	r23, r27
    160a:	aa 0c       	add	r10, r10
    160c:	bb 1c       	adc	r11, r11
    160e:	cc 1c       	adc	r12, r12
    1610:	dd 1c       	adc	r13, r13
    1612:	97 fe       	sbrs	r9, 7
    1614:	08 c0       	rjmp	.+16     	; 0x1626 <__mulsf3+0x110>
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e0       	ldi	r26, 0x00	; 0
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	a8 2a       	or	r10, r24
    1620:	b9 2a       	or	r11, r25
    1622:	ca 2a       	or	r12, r26
    1624:	db 2a       	or	r13, r27
    1626:	31 96       	adiw	r30, 0x01	; 1
    1628:	e0 32       	cpi	r30, 0x20	; 32
    162a:	f1 05       	cpc	r31, r1
    162c:	49 f0       	breq	.+18     	; 0x1640 <__mulsf3+0x12a>
    162e:	66 0c       	add	r6, r6
    1630:	77 1c       	adc	r7, r7
    1632:	88 1c       	adc	r8, r8
    1634:	99 1c       	adc	r9, r9
    1636:	56 94       	lsr	r5
    1638:	47 94       	ror	r4
    163a:	37 94       	ror	r3
    163c:	27 94       	ror	r2
    163e:	c3 cf       	rjmp	.-122    	; 0x15c6 <__mulsf3+0xb0>
    1640:	fa 85       	ldd	r31, Y+10	; 0x0a
    1642:	ea 89       	ldd	r30, Y+18	; 0x12
    1644:	2b 89       	ldd	r18, Y+19	; 0x13
    1646:	3c 89       	ldd	r19, Y+20	; 0x14
    1648:	8b 85       	ldd	r24, Y+11	; 0x0b
    164a:	9c 85       	ldd	r25, Y+12	; 0x0c
    164c:	28 0f       	add	r18, r24
    164e:	39 1f       	adc	r19, r25
    1650:	2e 5f       	subi	r18, 0xFE	; 254
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	17 c0       	rjmp	.+46     	; 0x1684 <__mulsf3+0x16e>
    1656:	ca 01       	movw	r24, r20
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	89 2b       	or	r24, r25
    165e:	61 f0       	breq	.+24     	; 0x1678 <__mulsf3+0x162>
    1660:	16 95       	lsr	r17
    1662:	07 95       	ror	r16
    1664:	f7 94       	ror	r15
    1666:	e7 94       	ror	r14
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e0       	ldi	r26, 0x00	; 0
    166e:	b0 e8       	ldi	r27, 0x80	; 128
    1670:	e8 2a       	or	r14, r24
    1672:	f9 2a       	or	r15, r25
    1674:	0a 2b       	or	r16, r26
    1676:	1b 2b       	or	r17, r27
    1678:	76 95       	lsr	r23
    167a:	67 95       	ror	r22
    167c:	57 95       	ror	r21
    167e:	47 95       	ror	r20
    1680:	2f 5f       	subi	r18, 0xFF	; 255
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	77 fd       	sbrc	r23, 7
    1686:	e7 cf       	rjmp	.-50     	; 0x1656 <__mulsf3+0x140>
    1688:	0c c0       	rjmp	.+24     	; 0x16a2 <__mulsf3+0x18c>
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	66 1f       	adc	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	17 fd       	sbrc	r17, 7
    1694:	41 60       	ori	r20, 0x01	; 1
    1696:	ee 0c       	add	r14, r14
    1698:	ff 1c       	adc	r15, r15
    169a:	00 1f       	adc	r16, r16
    169c:	11 1f       	adc	r17, r17
    169e:	21 50       	subi	r18, 0x01	; 1
    16a0:	30 40       	sbci	r19, 0x00	; 0
    16a2:	40 30       	cpi	r20, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	59 07       	cpc	r21, r25
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	69 07       	cpc	r22, r25
    16ac:	90 e4       	ldi	r25, 0x40	; 64
    16ae:	79 07       	cpc	r23, r25
    16b0:	60 f3       	brcs	.-40     	; 0x168a <__mulsf3+0x174>
    16b2:	2b 8f       	std	Y+27, r18	; 0x1b
    16b4:	3c 8f       	std	Y+28, r19	; 0x1c
    16b6:	db 01       	movw	r26, r22
    16b8:	ca 01       	movw	r24, r20
    16ba:	8f 77       	andi	r24, 0x7F	; 127
    16bc:	90 70       	andi	r25, 0x00	; 0
    16be:	a0 70       	andi	r26, 0x00	; 0
    16c0:	b0 70       	andi	r27, 0x00	; 0
    16c2:	80 34       	cpi	r24, 0x40	; 64
    16c4:	91 05       	cpc	r25, r1
    16c6:	a1 05       	cpc	r26, r1
    16c8:	b1 05       	cpc	r27, r1
    16ca:	61 f4       	brne	.+24     	; 0x16e4 <__mulsf3+0x1ce>
    16cc:	47 fd       	sbrc	r20, 7
    16ce:	0a c0       	rjmp	.+20     	; 0x16e4 <__mulsf3+0x1ce>
    16d0:	e1 14       	cp	r14, r1
    16d2:	f1 04       	cpc	r15, r1
    16d4:	01 05       	cpc	r16, r1
    16d6:	11 05       	cpc	r17, r1
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <__mulsf3+0x1ce>
    16da:	40 5c       	subi	r20, 0xC0	; 192
    16dc:	5f 4f       	sbci	r21, 0xFF	; 255
    16de:	6f 4f       	sbci	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	40 78       	andi	r20, 0x80	; 128
    16e4:	1a 8e       	std	Y+26, r1	; 0x1a
    16e6:	fe 17       	cp	r31, r30
    16e8:	11 f0       	breq	.+4      	; 0x16ee <__mulsf3+0x1d8>
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	8a 8f       	std	Y+26, r24	; 0x1a
    16ee:	4d 8f       	std	Y+29, r20	; 0x1d
    16f0:	5e 8f       	std	Y+30, r21	; 0x1e
    16f2:	6f 8f       	std	Y+31, r22	; 0x1f
    16f4:	78 a3       	std	Y+32, r23	; 0x20
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	89 8f       	std	Y+25, r24	; 0x19
    16fa:	ce 01       	movw	r24, r28
    16fc:	49 96       	adiw	r24, 0x19	; 25
    16fe:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__pack_f>
    1702:	a0 96       	adiw	r28, 0x20	; 32
    1704:	e2 e1       	ldi	r30, 0x12	; 18
    1706:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__epilogue_restores__>

0000170a <__divsf3>:
    170a:	a8 e1       	ldi	r26, 0x18	; 24
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	eb e8       	ldi	r30, 0x8B	; 139
    1710:	fb e0       	ldi	r31, 0x0B	; 11
    1712:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__prologue_saves__+0x10>
    1716:	69 83       	std	Y+1, r22	; 0x01
    1718:	7a 83       	std	Y+2, r23	; 0x02
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	2d 83       	std	Y+5, r18	; 0x05
    1720:	3e 83       	std	Y+6, r19	; 0x06
    1722:	4f 83       	std	Y+7, r20	; 0x07
    1724:	58 87       	std	Y+8, r21	; 0x08
    1726:	b9 e0       	ldi	r27, 0x09	; 9
    1728:	eb 2e       	mov	r14, r27
    172a:	f1 2c       	mov	r15, r1
    172c:	ec 0e       	add	r14, r28
    172e:	fd 1e       	adc	r15, r29
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	b7 01       	movw	r22, r14
    1736:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    173a:	8e 01       	movw	r16, r28
    173c:	0f 5e       	subi	r16, 0xEF	; 239
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	ce 01       	movw	r24, r28
    1742:	05 96       	adiw	r24, 0x05	; 5
    1744:	b8 01       	movw	r22, r16
    1746:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    174a:	29 85       	ldd	r18, Y+9	; 0x09
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	08 f4       	brcc	.+2      	; 0x1752 <__divsf3+0x48>
    1750:	7e c0       	rjmp	.+252    	; 0x184e <__divsf3+0x144>
    1752:	39 89       	ldd	r19, Y+17	; 0x11
    1754:	32 30       	cpi	r19, 0x02	; 2
    1756:	10 f4       	brcc	.+4      	; 0x175c <__divsf3+0x52>
    1758:	b8 01       	movw	r22, r16
    175a:	7c c0       	rjmp	.+248    	; 0x1854 <__divsf3+0x14a>
    175c:	8a 85       	ldd	r24, Y+10	; 0x0a
    175e:	9a 89       	ldd	r25, Y+18	; 0x12
    1760:	89 27       	eor	r24, r25
    1762:	8a 87       	std	Y+10, r24	; 0x0a
    1764:	24 30       	cpi	r18, 0x04	; 4
    1766:	11 f0       	breq	.+4      	; 0x176c <__divsf3+0x62>
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 f4       	brne	.+12     	; 0x1778 <__divsf3+0x6e>
    176c:	23 17       	cp	r18, r19
    176e:	09 f0       	breq	.+2      	; 0x1772 <__divsf3+0x68>
    1770:	6e c0       	rjmp	.+220    	; 0x184e <__divsf3+0x144>
    1772:	64 e7       	ldi	r22, 0x74	; 116
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	6e c0       	rjmp	.+220    	; 0x1854 <__divsf3+0x14a>
    1778:	34 30       	cpi	r19, 0x04	; 4
    177a:	39 f4       	brne	.+14     	; 0x178a <__divsf3+0x80>
    177c:	1d 86       	std	Y+13, r1	; 0x0d
    177e:	1e 86       	std	Y+14, r1	; 0x0e
    1780:	1f 86       	std	Y+15, r1	; 0x0f
    1782:	18 8a       	std	Y+16, r1	; 0x10
    1784:	1c 86       	std	Y+12, r1	; 0x0c
    1786:	1b 86       	std	Y+11, r1	; 0x0b
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <__divsf3+0x88>
    178a:	32 30       	cpi	r19, 0x02	; 2
    178c:	21 f4       	brne	.+8      	; 0x1796 <__divsf3+0x8c>
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	89 87       	std	Y+9, r24	; 0x09
    1792:	b7 01       	movw	r22, r14
    1794:	5f c0       	rjmp	.+190    	; 0x1854 <__divsf3+0x14a>
    1796:	2b 85       	ldd	r18, Y+11	; 0x0b
    1798:	3c 85       	ldd	r19, Y+12	; 0x0c
    179a:	8b 89       	ldd	r24, Y+19	; 0x13
    179c:	9c 89       	ldd	r25, Y+20	; 0x14
    179e:	28 1b       	sub	r18, r24
    17a0:	39 0b       	sbc	r19, r25
    17a2:	3c 87       	std	Y+12, r19	; 0x0c
    17a4:	2b 87       	std	Y+11, r18	; 0x0b
    17a6:	ed 84       	ldd	r14, Y+13	; 0x0d
    17a8:	fe 84       	ldd	r15, Y+14	; 0x0e
    17aa:	0f 85       	ldd	r16, Y+15	; 0x0f
    17ac:	18 89       	ldd	r17, Y+16	; 0x10
    17ae:	ad 88       	ldd	r10, Y+21	; 0x15
    17b0:	be 88       	ldd	r11, Y+22	; 0x16
    17b2:	cf 88       	ldd	r12, Y+23	; 0x17
    17b4:	d8 8c       	ldd	r13, Y+24	; 0x18
    17b6:	ea 14       	cp	r14, r10
    17b8:	fb 04       	cpc	r15, r11
    17ba:	0c 05       	cpc	r16, r12
    17bc:	1d 05       	cpc	r17, r13
    17be:	40 f4       	brcc	.+16     	; 0x17d0 <__divsf3+0xc6>
    17c0:	ee 0c       	add	r14, r14
    17c2:	ff 1c       	adc	r15, r15
    17c4:	00 1f       	adc	r16, r16
    17c6:	11 1f       	adc	r17, r17
    17c8:	21 50       	subi	r18, 0x01	; 1
    17ca:	30 40       	sbci	r19, 0x00	; 0
    17cc:	3c 87       	std	Y+12, r19	; 0x0c
    17ce:	2b 87       	std	Y+11, r18	; 0x0b
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b0 e4       	ldi	r27, 0x40	; 64
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	ea 14       	cp	r14, r10
    17e6:	fb 04       	cpc	r15, r11
    17e8:	0c 05       	cpc	r16, r12
    17ea:	1d 05       	cpc	r17, r13
    17ec:	40 f0       	brcs	.+16     	; 0x17fe <__divsf3+0xf4>
    17ee:	28 2b       	or	r18, r24
    17f0:	39 2b       	or	r19, r25
    17f2:	4a 2b       	or	r20, r26
    17f4:	5b 2b       	or	r21, r27
    17f6:	ea 18       	sub	r14, r10
    17f8:	fb 08       	sbc	r15, r11
    17fa:	0c 09       	sbc	r16, r12
    17fc:	1d 09       	sbc	r17, r13
    17fe:	b6 95       	lsr	r27
    1800:	a7 95       	ror	r26
    1802:	97 95       	ror	r25
    1804:	87 95       	ror	r24
    1806:	ee 0c       	add	r14, r14
    1808:	ff 1c       	adc	r15, r15
    180a:	00 1f       	adc	r16, r16
    180c:	11 1f       	adc	r17, r17
    180e:	6f 5f       	subi	r22, 0xFF	; 255
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	6f 31       	cpi	r22, 0x1F	; 31
    1814:	71 05       	cpc	r23, r1
    1816:	31 f7       	brne	.-52     	; 0x17e4 <__divsf3+0xda>
    1818:	da 01       	movw	r26, r20
    181a:	c9 01       	movw	r24, r18
    181c:	8f 77       	andi	r24, 0x7F	; 127
    181e:	90 70       	andi	r25, 0x00	; 0
    1820:	a0 70       	andi	r26, 0x00	; 0
    1822:	b0 70       	andi	r27, 0x00	; 0
    1824:	80 34       	cpi	r24, 0x40	; 64
    1826:	91 05       	cpc	r25, r1
    1828:	a1 05       	cpc	r26, r1
    182a:	b1 05       	cpc	r27, r1
    182c:	61 f4       	brne	.+24     	; 0x1846 <__divsf3+0x13c>
    182e:	27 fd       	sbrc	r18, 7
    1830:	0a c0       	rjmp	.+20     	; 0x1846 <__divsf3+0x13c>
    1832:	e1 14       	cp	r14, r1
    1834:	f1 04       	cpc	r15, r1
    1836:	01 05       	cpc	r16, r1
    1838:	11 05       	cpc	r17, r1
    183a:	29 f0       	breq	.+10     	; 0x1846 <__divsf3+0x13c>
    183c:	20 5c       	subi	r18, 0xC0	; 192
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	4f 4f       	sbci	r20, 0xFF	; 255
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	20 78       	andi	r18, 0x80	; 128
    1846:	2d 87       	std	Y+13, r18	; 0x0d
    1848:	3e 87       	std	Y+14, r19	; 0x0e
    184a:	4f 87       	std	Y+15, r20	; 0x0f
    184c:	58 8b       	std	Y+16, r21	; 0x10
    184e:	be 01       	movw	r22, r28
    1850:	67 5f       	subi	r22, 0xF7	; 247
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	cb 01       	movw	r24, r22
    1856:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__pack_f>
    185a:	68 96       	adiw	r28, 0x18	; 24
    185c:	ea e0       	ldi	r30, 0x0A	; 10
    185e:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__epilogue_restores__+0x10>

00001862 <__gtsf2>:
    1862:	a8 e1       	ldi	r26, 0x18	; 24
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e3       	ldi	r30, 0x37	; 55
    1868:	fc e0       	ldi	r31, 0x0C	; 12
    186a:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x18>
    186e:	69 83       	std	Y+1, r22	; 0x01
    1870:	7a 83       	std	Y+2, r23	; 0x02
    1872:	8b 83       	std	Y+3, r24	; 0x03
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	2d 83       	std	Y+5, r18	; 0x05
    1878:	3e 83       	std	Y+6, r19	; 0x06
    187a:	4f 83       	std	Y+7, r20	; 0x07
    187c:	58 87       	std	Y+8, r21	; 0x08
    187e:	89 e0       	ldi	r24, 0x09	; 9
    1880:	e8 2e       	mov	r14, r24
    1882:	f1 2c       	mov	r15, r1
    1884:	ec 0e       	add	r14, r28
    1886:	fd 1e       	adc	r15, r29
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	b7 01       	movw	r22, r14
    188e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    1892:	8e 01       	movw	r16, r28
    1894:	0f 5e       	subi	r16, 0xEF	; 239
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	ce 01       	movw	r24, r28
    189a:	05 96       	adiw	r24, 0x05	; 5
    189c:	b8 01       	movw	r22, r16
    189e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	82 30       	cpi	r24, 0x02	; 2
    18a6:	40 f0       	brcs	.+16     	; 0x18b8 <__gtsf2+0x56>
    18a8:	89 89       	ldd	r24, Y+17	; 0x11
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	28 f0       	brcs	.+10     	; 0x18b8 <__gtsf2+0x56>
    18ae:	c7 01       	movw	r24, r14
    18b0:	b8 01       	movw	r22, r16
    18b2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__fpcmp_parts_f>
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <__gtsf2+0x58>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	68 96       	adiw	r28, 0x18	; 24
    18bc:	e6 e0       	ldi	r30, 0x06	; 6
    18be:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x18>

000018c2 <__gesf2>:
    18c2:	a8 e1       	ldi	r26, 0x18	; 24
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e7 e6       	ldi	r30, 0x67	; 103
    18c8:	fc e0       	ldi	r31, 0x0C	; 12
    18ca:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x18>
    18ce:	69 83       	std	Y+1, r22	; 0x01
    18d0:	7a 83       	std	Y+2, r23	; 0x02
    18d2:	8b 83       	std	Y+3, r24	; 0x03
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	2d 83       	std	Y+5, r18	; 0x05
    18d8:	3e 83       	std	Y+6, r19	; 0x06
    18da:	4f 83       	std	Y+7, r20	; 0x07
    18dc:	58 87       	std	Y+8, r21	; 0x08
    18de:	89 e0       	ldi	r24, 0x09	; 9
    18e0:	e8 2e       	mov	r14, r24
    18e2:	f1 2c       	mov	r15, r1
    18e4:	ec 0e       	add	r14, r28
    18e6:	fd 1e       	adc	r15, r29
    18e8:	ce 01       	movw	r24, r28
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	b7 01       	movw	r22, r14
    18ee:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    18f2:	8e 01       	movw	r16, r28
    18f4:	0f 5e       	subi	r16, 0xEF	; 239
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	ce 01       	movw	r24, r28
    18fa:	05 96       	adiw	r24, 0x05	; 5
    18fc:	b8 01       	movw	r22, r16
    18fe:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	40 f0       	brcs	.+16     	; 0x1918 <__gesf2+0x56>
    1908:	89 89       	ldd	r24, Y+17	; 0x11
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	28 f0       	brcs	.+10     	; 0x1918 <__gesf2+0x56>
    190e:	c7 01       	movw	r24, r14
    1910:	b8 01       	movw	r22, r16
    1912:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__fpcmp_parts_f>
    1916:	01 c0       	rjmp	.+2      	; 0x191a <__gesf2+0x58>
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	68 96       	adiw	r28, 0x18	; 24
    191c:	e6 e0       	ldi	r30, 0x06	; 6
    191e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x18>

00001922 <__ltsf2>:
    1922:	a8 e1       	ldi	r26, 0x18	; 24
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e9       	ldi	r30, 0x97	; 151
    1928:	fc e0       	ldi	r31, 0x0C	; 12
    192a:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x18>
    192e:	69 83       	std	Y+1, r22	; 0x01
    1930:	7a 83       	std	Y+2, r23	; 0x02
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	2d 83       	std	Y+5, r18	; 0x05
    1938:	3e 83       	std	Y+6, r19	; 0x06
    193a:	4f 83       	std	Y+7, r20	; 0x07
    193c:	58 87       	std	Y+8, r21	; 0x08
    193e:	89 e0       	ldi	r24, 0x09	; 9
    1940:	e8 2e       	mov	r14, r24
    1942:	f1 2c       	mov	r15, r1
    1944:	ec 0e       	add	r14, r28
    1946:	fd 1e       	adc	r15, r29
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	b7 01       	movw	r22, r14
    194e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    1952:	8e 01       	movw	r16, r28
    1954:	0f 5e       	subi	r16, 0xEF	; 239
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	ce 01       	movw	r24, r28
    195a:	05 96       	adiw	r24, 0x05	; 5
    195c:	b8 01       	movw	r22, r16
    195e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	40 f0       	brcs	.+16     	; 0x1978 <__ltsf2+0x56>
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	28 f0       	brcs	.+10     	; 0x1978 <__ltsf2+0x56>
    196e:	c7 01       	movw	r24, r14
    1970:	b8 01       	movw	r22, r16
    1972:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__fpcmp_parts_f>
    1976:	01 c0       	rjmp	.+2      	; 0x197a <__ltsf2+0x58>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	68 96       	adiw	r28, 0x18	; 24
    197c:	e6 e0       	ldi	r30, 0x06	; 6
    197e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x18>

00001982 <__fixsfsi>:
    1982:	ac e0       	ldi	r26, 0x0C	; 12
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e7 ec       	ldi	r30, 0xC7	; 199
    1988:	fc e0       	ldi	r31, 0x0C	; 12
    198a:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__prologue_saves__+0x20>
    198e:	69 83       	std	Y+1, r22	; 0x01
    1990:	7a 83       	std	Y+2, r23	; 0x02
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	be 01       	movw	r22, r28
    199c:	6b 5f       	subi	r22, 0xFB	; 251
    199e:	7f 4f       	sbci	r23, 0xFF	; 255
    19a0:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__unpack_f>
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	61 f1       	breq	.+88     	; 0x1a02 <__fixsfsi+0x80>
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	50 f1       	brcs	.+84     	; 0x1a02 <__fixsfsi+0x80>
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	21 f4       	brne	.+8      	; 0x19ba <__fixsfsi+0x38>
    19b2:	8e 81       	ldd	r24, Y+6	; 0x06
    19b4:	88 23       	and	r24, r24
    19b6:	51 f1       	breq	.+84     	; 0x1a0c <__fixsfsi+0x8a>
    19b8:	2e c0       	rjmp	.+92     	; 0x1a16 <__fixsfsi+0x94>
    19ba:	2f 81       	ldd	r18, Y+7	; 0x07
    19bc:	38 85       	ldd	r19, Y+8	; 0x08
    19be:	37 fd       	sbrc	r19, 7
    19c0:	20 c0       	rjmp	.+64     	; 0x1a02 <__fixsfsi+0x80>
    19c2:	6e 81       	ldd	r22, Y+6	; 0x06
    19c4:	2f 31       	cpi	r18, 0x1F	; 31
    19c6:	31 05       	cpc	r19, r1
    19c8:	1c f0       	brlt	.+6      	; 0x19d0 <__fixsfsi+0x4e>
    19ca:	66 23       	and	r22, r22
    19cc:	f9 f0       	breq	.+62     	; 0x1a0c <__fixsfsi+0x8a>
    19ce:	23 c0       	rjmp	.+70     	; 0x1a16 <__fixsfsi+0x94>
    19d0:	8e e1       	ldi	r24, 0x1E	; 30
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	82 1b       	sub	r24, r18
    19d6:	93 0b       	sbc	r25, r19
    19d8:	29 85       	ldd	r18, Y+9	; 0x09
    19da:	3a 85       	ldd	r19, Y+10	; 0x0a
    19dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    19de:	5c 85       	ldd	r21, Y+12	; 0x0c
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <__fixsfsi+0x68>
    19e2:	56 95       	lsr	r21
    19e4:	47 95       	ror	r20
    19e6:	37 95       	ror	r19
    19e8:	27 95       	ror	r18
    19ea:	8a 95       	dec	r24
    19ec:	d2 f7       	brpl	.-12     	; 0x19e2 <__fixsfsi+0x60>
    19ee:	66 23       	and	r22, r22
    19f0:	b1 f0       	breq	.+44     	; 0x1a1e <__fixsfsi+0x9c>
    19f2:	50 95       	com	r21
    19f4:	40 95       	com	r20
    19f6:	30 95       	com	r19
    19f8:	21 95       	neg	r18
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	4f 4f       	sbci	r20, 0xFF	; 255
    19fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1a00:	0e c0       	rjmp	.+28     	; 0x1a1e <__fixsfsi+0x9c>
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <__fixsfsi+0x9c>
    1a0c:	2f ef       	ldi	r18, 0xFF	; 255
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f ef       	ldi	r20, 0xFF	; 255
    1a12:	5f e7       	ldi	r21, 0x7F	; 127
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <__fixsfsi+0x9c>
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	50 e8       	ldi	r21, 0x80	; 128
    1a1e:	b9 01       	movw	r22, r18
    1a20:	ca 01       	movw	r24, r20
    1a22:	2c 96       	adiw	r28, 0x0c	; 12
    1a24:	e2 e0       	ldi	r30, 0x02	; 2
    1a26:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__epilogue_restores__+0x20>

00001a2a <__floatunsisf>:
    1a2a:	a8 e0       	ldi	r26, 0x08	; 8
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	eb e1       	ldi	r30, 0x1B	; 27
    1a30:	fd e0       	ldi	r31, 0x0D	; 13
    1a32:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__prologue_saves__+0x10>
    1a36:	7b 01       	movw	r14, r22
    1a38:	8c 01       	movw	r16, r24
    1a3a:	61 15       	cp	r22, r1
    1a3c:	71 05       	cpc	r23, r1
    1a3e:	81 05       	cpc	r24, r1
    1a40:	91 05       	cpc	r25, r1
    1a42:	19 f4       	brne	.+6      	; 0x1a4a <__floatunsisf+0x20>
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	60 c0       	rjmp	.+192    	; 0x1b0a <__floatunsisf+0xe0>
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	8e e1       	ldi	r24, 0x1E	; 30
    1a50:	c8 2e       	mov	r12, r24
    1a52:	d1 2c       	mov	r13, r1
    1a54:	dc 82       	std	Y+4, r13	; 0x04
    1a56:	cb 82       	std	Y+3, r12	; 0x03
    1a58:	ed 82       	std	Y+5, r14	; 0x05
    1a5a:	fe 82       	std	Y+6, r15	; 0x06
    1a5c:	0f 83       	std	Y+7, r16	; 0x07
    1a5e:	18 87       	std	Y+8, r17	; 0x08
    1a60:	c8 01       	movw	r24, r16
    1a62:	b7 01       	movw	r22, r14
    1a64:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__clzsi2>
    1a68:	fc 01       	movw	r30, r24
    1a6a:	31 97       	sbiw	r30, 0x01	; 1
    1a6c:	f7 ff       	sbrs	r31, 7
    1a6e:	3b c0       	rjmp	.+118    	; 0x1ae6 <__floatunsisf+0xbc>
    1a70:	22 27       	eor	r18, r18
    1a72:	33 27       	eor	r19, r19
    1a74:	2e 1b       	sub	r18, r30
    1a76:	3f 0b       	sbc	r19, r31
    1a78:	57 01       	movw	r10, r14
    1a7a:	68 01       	movw	r12, r16
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <__floatunsisf+0x5e>
    1a80:	d6 94       	lsr	r13
    1a82:	c7 94       	ror	r12
    1a84:	b7 94       	ror	r11
    1a86:	a7 94       	ror	r10
    1a88:	0a 94       	dec	r0
    1a8a:	d2 f7       	brpl	.-12     	; 0x1a80 <__floatunsisf+0x56>
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <__floatunsisf+0x7c>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	aa 1f       	adc	r26, r26
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	2a 95       	dec	r18
    1aa8:	d2 f7       	brpl	.-12     	; 0x1a9e <__floatunsisf+0x74>
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	a1 09       	sbc	r26, r1
    1aae:	b1 09       	sbc	r27, r1
    1ab0:	8e 21       	and	r24, r14
    1ab2:	9f 21       	and	r25, r15
    1ab4:	a0 23       	and	r26, r16
    1ab6:	b1 23       	and	r27, r17
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	a1 05       	cpc	r26, r1
    1abc:	b1 05       	cpc	r27, r1
    1abe:	21 f0       	breq	.+8      	; 0x1ac8 <__floatunsisf+0x9e>
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	4a 29       	or	r20, r10
    1aca:	5b 29       	or	r21, r11
    1acc:	6c 29       	or	r22, r12
    1ace:	7d 29       	or	r23, r13
    1ad0:	4d 83       	std	Y+5, r20	; 0x05
    1ad2:	5e 83       	std	Y+6, r21	; 0x06
    1ad4:	6f 83       	std	Y+7, r22	; 0x07
    1ad6:	78 87       	std	Y+8, r23	; 0x08
    1ad8:	8e e1       	ldi	r24, 0x1E	; 30
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	8e 1b       	sub	r24, r30
    1ade:	9f 0b       	sbc	r25, r31
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	12 c0       	rjmp	.+36     	; 0x1b0a <__floatunsisf+0xe0>
    1ae6:	30 97       	sbiw	r30, 0x00	; 0
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <__floatunsisf+0xe0>
    1aea:	0e 2e       	mov	r0, r30
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <__floatunsisf+0xcc>
    1aee:	ee 0c       	add	r14, r14
    1af0:	ff 1c       	adc	r15, r15
    1af2:	00 1f       	adc	r16, r16
    1af4:	11 1f       	adc	r17, r17
    1af6:	0a 94       	dec	r0
    1af8:	d2 f7       	brpl	.-12     	; 0x1aee <__floatunsisf+0xc4>
    1afa:	ed 82       	std	Y+5, r14	; 0x05
    1afc:	fe 82       	std	Y+6, r15	; 0x06
    1afe:	0f 83       	std	Y+7, r16	; 0x07
    1b00:	18 87       	std	Y+8, r17	; 0x08
    1b02:	ce 1a       	sub	r12, r30
    1b04:	df 0a       	sbc	r13, r31
    1b06:	dc 82       	std	Y+4, r13	; 0x04
    1b08:	cb 82       	std	Y+3, r12	; 0x03
    1b0a:	1a 82       	std	Y+2, r1	; 0x02
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__pack_f>
    1b14:	28 96       	adiw	r28, 0x08	; 8
    1b16:	ea e0       	ldi	r30, 0x0A	; 10
    1b18:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__epilogue_restores__+0x10>

00001b1c <__clzsi2>:
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	7b 01       	movw	r14, r22
    1b26:	8c 01       	movw	r16, r24
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	e8 16       	cp	r14, r24
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	f8 06       	cpc	r15, r24
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	08 07       	cpc	r16, r24
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	18 07       	cpc	r17, r24
    1b38:	88 f4       	brcc	.+34     	; 0x1b5c <__clzsi2+0x40>
    1b3a:	8f ef       	ldi	r24, 0xFF	; 255
    1b3c:	e8 16       	cp	r14, r24
    1b3e:	f1 04       	cpc	r15, r1
    1b40:	01 05       	cpc	r16, r1
    1b42:	11 05       	cpc	r17, r1
    1b44:	31 f0       	breq	.+12     	; 0x1b52 <__clzsi2+0x36>
    1b46:	28 f0       	brcs	.+10     	; 0x1b52 <__clzsi2+0x36>
    1b48:	88 e0       	ldi	r24, 0x08	; 8
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	17 c0       	rjmp	.+46     	; 0x1b80 <__clzsi2+0x64>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	12 c0       	rjmp	.+36     	; 0x1b80 <__clzsi2+0x64>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	e8 16       	cp	r14, r24
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	f8 06       	cpc	r15, r24
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	08 07       	cpc	r16, r24
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	18 07       	cpc	r17, r24
    1b6c:	28 f0       	brcs	.+10     	; 0x1b78 <__clzsi2+0x5c>
    1b6e:	88 e1       	ldi	r24, 0x18	; 24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 e0       	ldi	r26, 0x00	; 0
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <__clzsi2+0x64>
    1b78:	80 e1       	ldi	r24, 0x10	; 16
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	20 e2       	ldi	r18, 0x20	; 32
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	28 1b       	sub	r18, r24
    1b8a:	39 0b       	sbc	r19, r25
    1b8c:	4a 0b       	sbc	r20, r26
    1b8e:	5b 0b       	sbc	r21, r27
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <__clzsi2+0x7e>
    1b92:	16 95       	lsr	r17
    1b94:	07 95       	ror	r16
    1b96:	f7 94       	ror	r15
    1b98:	e7 94       	ror	r14
    1b9a:	8a 95       	dec	r24
    1b9c:	d2 f7       	brpl	.-12     	; 0x1b92 <__clzsi2+0x76>
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	e4 58       	subi	r30, 0x84	; 132
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	28 1b       	sub	r18, r24
    1ba8:	31 09       	sbc	r19, r1
    1baa:	41 09       	sbc	r20, r1
    1bac:	51 09       	sbc	r21, r1
    1bae:	c9 01       	movw	r24, r18
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	08 95       	ret

00001bba <__pack_f>:
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	e4 80       	ldd	r14, Z+4	; 0x04
    1bc8:	f5 80       	ldd	r15, Z+5	; 0x05
    1bca:	06 81       	ldd	r16, Z+6	; 0x06
    1bcc:	17 81       	ldd	r17, Z+7	; 0x07
    1bce:	d1 80       	ldd	r13, Z+1	; 0x01
    1bd0:	80 81       	ld	r24, Z
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	48 f4       	brcc	.+18     	; 0x1be8 <__pack_f+0x2e>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e1       	ldi	r26, 0x10	; 16
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 2a       	or	r14, r24
    1be0:	f9 2a       	or	r15, r25
    1be2:	0a 2b       	or	r16, r26
    1be4:	1b 2b       	or	r17, r27
    1be6:	a5 c0       	rjmp	.+330    	; 0x1d32 <__pack_f+0x178>
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	09 f4       	brne	.+2      	; 0x1bee <__pack_f+0x34>
    1bec:	9f c0       	rjmp	.+318    	; 0x1d2c <__pack_f+0x172>
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <__pack_f+0x40>
    1bf2:	ee 24       	eor	r14, r14
    1bf4:	ff 24       	eor	r15, r15
    1bf6:	87 01       	movw	r16, r14
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <__pack_f+0x4a>
    1bfa:	e1 14       	cp	r14, r1
    1bfc:	f1 04       	cpc	r15, r1
    1bfe:	01 05       	cpc	r16, r1
    1c00:	11 05       	cpc	r17, r1
    1c02:	19 f4       	brne	.+6      	; 0x1c0a <__pack_f+0x50>
    1c04:	e0 e0       	ldi	r30, 0x00	; 0
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	96 c0       	rjmp	.+300    	; 0x1d36 <__pack_f+0x17c>
    1c0a:	62 81       	ldd	r22, Z+2	; 0x02
    1c0c:	73 81       	ldd	r23, Z+3	; 0x03
    1c0e:	9f ef       	ldi	r25, 0xFF	; 255
    1c10:	62 38       	cpi	r22, 0x82	; 130
    1c12:	79 07       	cpc	r23, r25
    1c14:	0c f0       	brlt	.+2      	; 0x1c18 <__pack_f+0x5e>
    1c16:	5b c0       	rjmp	.+182    	; 0x1cce <__pack_f+0x114>
    1c18:	22 e8       	ldi	r18, 0x82	; 130
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	26 1b       	sub	r18, r22
    1c1e:	37 0b       	sbc	r19, r23
    1c20:	2a 31       	cpi	r18, 0x1A	; 26
    1c22:	31 05       	cpc	r19, r1
    1c24:	2c f0       	brlt	.+10     	; 0x1c30 <__pack_f+0x76>
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	2a c0       	rjmp	.+84     	; 0x1c84 <__pack_f+0xca>
    1c30:	b8 01       	movw	r22, r16
    1c32:	a7 01       	movw	r20, r14
    1c34:	02 2e       	mov	r0, r18
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <__pack_f+0x86>
    1c38:	76 95       	lsr	r23
    1c3a:	67 95       	ror	r22
    1c3c:	57 95       	ror	r21
    1c3e:	47 95       	ror	r20
    1c40:	0a 94       	dec	r0
    1c42:	d2 f7       	brpl	.-12     	; 0x1c38 <__pack_f+0x7e>
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e0       	ldi	r26, 0x00	; 0
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <__pack_f+0x9c>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	aa 1f       	adc	r26, r26
    1c54:	bb 1f       	adc	r27, r27
    1c56:	2a 95       	dec	r18
    1c58:	d2 f7       	brpl	.-12     	; 0x1c4e <__pack_f+0x94>
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	a1 09       	sbc	r26, r1
    1c5e:	b1 09       	sbc	r27, r1
    1c60:	8e 21       	and	r24, r14
    1c62:	9f 21       	and	r25, r15
    1c64:	a0 23       	and	r26, r16
    1c66:	b1 23       	and	r27, r17
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	a1 05       	cpc	r26, r1
    1c6c:	b1 05       	cpc	r27, r1
    1c6e:	21 f0       	breq	.+8      	; 0x1c78 <__pack_f+0xbe>
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a0 e0       	ldi	r26, 0x00	; 0
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	9a 01       	movw	r18, r20
    1c7a:	ab 01       	movw	r20, r22
    1c7c:	28 2b       	or	r18, r24
    1c7e:	39 2b       	or	r19, r25
    1c80:	4a 2b       	or	r20, r26
    1c82:	5b 2b       	or	r21, r27
    1c84:	da 01       	movw	r26, r20
    1c86:	c9 01       	movw	r24, r18
    1c88:	8f 77       	andi	r24, 0x7F	; 127
    1c8a:	90 70       	andi	r25, 0x00	; 0
    1c8c:	a0 70       	andi	r26, 0x00	; 0
    1c8e:	b0 70       	andi	r27, 0x00	; 0
    1c90:	80 34       	cpi	r24, 0x40	; 64
    1c92:	91 05       	cpc	r25, r1
    1c94:	a1 05       	cpc	r26, r1
    1c96:	b1 05       	cpc	r27, r1
    1c98:	39 f4       	brne	.+14     	; 0x1ca8 <__pack_f+0xee>
    1c9a:	27 ff       	sbrs	r18, 7
    1c9c:	09 c0       	rjmp	.+18     	; 0x1cb0 <__pack_f+0xf6>
    1c9e:	20 5c       	subi	r18, 0xC0	; 192
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <__pack_f+0xf6>
    1ca8:	21 5c       	subi	r18, 0xC1	; 193
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	4f 4f       	sbci	r20, 0xFF	; 255
    1cae:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb0:	e0 e0       	ldi	r30, 0x00	; 0
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	20 30       	cpi	r18, 0x00	; 0
    1cb6:	a0 e0       	ldi	r26, 0x00	; 0
    1cb8:	3a 07       	cpc	r19, r26
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	4a 07       	cpc	r20, r26
    1cbe:	a0 e4       	ldi	r26, 0x40	; 64
    1cc0:	5a 07       	cpc	r21, r26
    1cc2:	10 f0       	brcs	.+4      	; 0x1cc8 <__pack_f+0x10e>
    1cc4:	e1 e0       	ldi	r30, 0x01	; 1
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	79 01       	movw	r14, r18
    1cca:	8a 01       	movw	r16, r20
    1ccc:	27 c0       	rjmp	.+78     	; 0x1d1c <__pack_f+0x162>
    1cce:	60 38       	cpi	r22, 0x80	; 128
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	64 f5       	brge	.+88     	; 0x1d2c <__pack_f+0x172>
    1cd4:	fb 01       	movw	r30, r22
    1cd6:	e1 58       	subi	r30, 0x81	; 129
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	d8 01       	movw	r26, r16
    1cdc:	c7 01       	movw	r24, r14
    1cde:	8f 77       	andi	r24, 0x7F	; 127
    1ce0:	90 70       	andi	r25, 0x00	; 0
    1ce2:	a0 70       	andi	r26, 0x00	; 0
    1ce4:	b0 70       	andi	r27, 0x00	; 0
    1ce6:	80 34       	cpi	r24, 0x40	; 64
    1ce8:	91 05       	cpc	r25, r1
    1cea:	a1 05       	cpc	r26, r1
    1cec:	b1 05       	cpc	r27, r1
    1cee:	39 f4       	brne	.+14     	; 0x1cfe <__pack_f+0x144>
    1cf0:	e7 fe       	sbrs	r14, 7
    1cf2:	0d c0       	rjmp	.+26     	; 0x1d0e <__pack_f+0x154>
    1cf4:	80 e4       	ldi	r24, 0x40	; 64
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e0       	ldi	r26, 0x00	; 0
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <__pack_f+0x14c>
    1cfe:	8f e3       	ldi	r24, 0x3F	; 63
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e8 0e       	add	r14, r24
    1d08:	f9 1e       	adc	r15, r25
    1d0a:	0a 1f       	adc	r16, r26
    1d0c:	1b 1f       	adc	r17, r27
    1d0e:	17 ff       	sbrs	r17, 7
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <__pack_f+0x162>
    1d12:	16 95       	lsr	r17
    1d14:	07 95       	ror	r16
    1d16:	f7 94       	ror	r15
    1d18:	e7 94       	ror	r14
    1d1a:	31 96       	adiw	r30, 0x01	; 1
    1d1c:	87 e0       	ldi	r24, 0x07	; 7
    1d1e:	16 95       	lsr	r17
    1d20:	07 95       	ror	r16
    1d22:	f7 94       	ror	r15
    1d24:	e7 94       	ror	r14
    1d26:	8a 95       	dec	r24
    1d28:	d1 f7       	brne	.-12     	; 0x1d1e <__pack_f+0x164>
    1d2a:	05 c0       	rjmp	.+10     	; 0x1d36 <__pack_f+0x17c>
    1d2c:	ee 24       	eor	r14, r14
    1d2e:	ff 24       	eor	r15, r15
    1d30:	87 01       	movw	r16, r14
    1d32:	ef ef       	ldi	r30, 0xFF	; 255
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	6e 2f       	mov	r22, r30
    1d38:	67 95       	ror	r22
    1d3a:	66 27       	eor	r22, r22
    1d3c:	67 95       	ror	r22
    1d3e:	90 2f       	mov	r25, r16
    1d40:	9f 77       	andi	r25, 0x7F	; 127
    1d42:	d7 94       	ror	r13
    1d44:	dd 24       	eor	r13, r13
    1d46:	d7 94       	ror	r13
    1d48:	8e 2f       	mov	r24, r30
    1d4a:	86 95       	lsr	r24
    1d4c:	49 2f       	mov	r20, r25
    1d4e:	46 2b       	or	r20, r22
    1d50:	58 2f       	mov	r21, r24
    1d52:	5d 29       	or	r21, r13
    1d54:	b7 01       	movw	r22, r14
    1d56:	ca 01       	movw	r24, r20
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	08 95       	ret

00001d64 <__unpack_f>:
    1d64:	fc 01       	movw	r30, r24
    1d66:	db 01       	movw	r26, r22
    1d68:	40 81       	ld	r20, Z
    1d6a:	51 81       	ldd	r21, Z+1	; 0x01
    1d6c:	22 81       	ldd	r18, Z+2	; 0x02
    1d6e:	62 2f       	mov	r22, r18
    1d70:	6f 77       	andi	r22, 0x7F	; 127
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	22 1f       	adc	r18, r18
    1d76:	22 27       	eor	r18, r18
    1d78:	22 1f       	adc	r18, r18
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	89 2f       	mov	r24, r25
    1d7e:	88 0f       	add	r24, r24
    1d80:	82 2b       	or	r24, r18
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	99 1f       	adc	r25, r25
    1d88:	99 27       	eor	r25, r25
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	11 96       	adiw	r26, 0x01	; 1
    1d8e:	9c 93       	st	X, r25
    1d90:	11 97       	sbiw	r26, 0x01	; 1
    1d92:	21 15       	cp	r18, r1
    1d94:	31 05       	cpc	r19, r1
    1d96:	a9 f5       	brne	.+106    	; 0x1e02 <__unpack_f+0x9e>
    1d98:	41 15       	cp	r20, r1
    1d9a:	51 05       	cpc	r21, r1
    1d9c:	61 05       	cpc	r22, r1
    1d9e:	71 05       	cpc	r23, r1
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <__unpack_f+0x42>
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	37 c0       	rjmp	.+110    	; 0x1e14 <__unpack_f+0xb0>
    1da6:	82 e8       	ldi	r24, 0x82	; 130
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	13 96       	adiw	r26, 0x03	; 3
    1dac:	9c 93       	st	X, r25
    1dae:	8e 93       	st	-X, r24
    1db0:	12 97       	sbiw	r26, 0x02	; 2
    1db2:	9a 01       	movw	r18, r20
    1db4:	ab 01       	movw	r20, r22
    1db6:	67 e0       	ldi	r22, 0x07	; 7
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	44 1f       	adc	r20, r20
    1dbe:	55 1f       	adc	r21, r21
    1dc0:	6a 95       	dec	r22
    1dc2:	d1 f7       	brne	.-12     	; 0x1db8 <__unpack_f+0x54>
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	8c 93       	st	X, r24
    1dc8:	0d c0       	rjmp	.+26     	; 0x1de4 <__unpack_f+0x80>
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	44 1f       	adc	r20, r20
    1dd0:	55 1f       	adc	r21, r21
    1dd2:	12 96       	adiw	r26, 0x02	; 2
    1dd4:	8d 91       	ld	r24, X+
    1dd6:	9c 91       	ld	r25, X
    1dd8:	13 97       	sbiw	r26, 0x03	; 3
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	13 96       	adiw	r26, 0x03	; 3
    1dde:	9c 93       	st	X, r25
    1de0:	8e 93       	st	-X, r24
    1de2:	12 97       	sbiw	r26, 0x02	; 2
    1de4:	20 30       	cpi	r18, 0x00	; 0
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	38 07       	cpc	r19, r24
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	48 07       	cpc	r20, r24
    1dee:	80 e4       	ldi	r24, 0x40	; 64
    1df0:	58 07       	cpc	r21, r24
    1df2:	58 f3       	brcs	.-42     	; 0x1dca <__unpack_f+0x66>
    1df4:	14 96       	adiw	r26, 0x04	; 4
    1df6:	2d 93       	st	X+, r18
    1df8:	3d 93       	st	X+, r19
    1dfa:	4d 93       	st	X+, r20
    1dfc:	5c 93       	st	X, r21
    1dfe:	17 97       	sbiw	r26, 0x07	; 7
    1e00:	08 95       	ret
    1e02:	2f 3f       	cpi	r18, 0xFF	; 255
    1e04:	31 05       	cpc	r19, r1
    1e06:	79 f4       	brne	.+30     	; 0x1e26 <__unpack_f+0xc2>
    1e08:	41 15       	cp	r20, r1
    1e0a:	51 05       	cpc	r21, r1
    1e0c:	61 05       	cpc	r22, r1
    1e0e:	71 05       	cpc	r23, r1
    1e10:	19 f4       	brne	.+6      	; 0x1e18 <__unpack_f+0xb4>
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	8c 93       	st	X, r24
    1e16:	08 95       	ret
    1e18:	64 ff       	sbrs	r22, 4
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <__unpack_f+0xbe>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	8c 93       	st	X, r24
    1e20:	12 c0       	rjmp	.+36     	; 0x1e46 <__unpack_f+0xe2>
    1e22:	1c 92       	st	X, r1
    1e24:	10 c0       	rjmp	.+32     	; 0x1e46 <__unpack_f+0xe2>
    1e26:	2f 57       	subi	r18, 0x7F	; 127
    1e28:	30 40       	sbci	r19, 0x00	; 0
    1e2a:	13 96       	adiw	r26, 0x03	; 3
    1e2c:	3c 93       	st	X, r19
    1e2e:	2e 93       	st	-X, r18
    1e30:	12 97       	sbiw	r26, 0x02	; 2
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	8c 93       	st	X, r24
    1e36:	87 e0       	ldi	r24, 0x07	; 7
    1e38:	44 0f       	add	r20, r20
    1e3a:	55 1f       	adc	r21, r21
    1e3c:	66 1f       	adc	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	8a 95       	dec	r24
    1e42:	d1 f7       	brne	.-12     	; 0x1e38 <__unpack_f+0xd4>
    1e44:	70 64       	ori	r23, 0x40	; 64
    1e46:	14 96       	adiw	r26, 0x04	; 4
    1e48:	4d 93       	st	X+, r20
    1e4a:	5d 93       	st	X+, r21
    1e4c:	6d 93       	st	X+, r22
    1e4e:	7c 93       	st	X, r23
    1e50:	17 97       	sbiw	r26, 0x07	; 7
    1e52:	08 95       	ret

00001e54 <__fpcmp_parts_f>:
    1e54:	1f 93       	push	r17
    1e56:	dc 01       	movw	r26, r24
    1e58:	fb 01       	movw	r30, r22
    1e5a:	9c 91       	ld	r25, X
    1e5c:	92 30       	cpi	r25, 0x02	; 2
    1e5e:	08 f4       	brcc	.+2      	; 0x1e62 <__fpcmp_parts_f+0xe>
    1e60:	47 c0       	rjmp	.+142    	; 0x1ef0 <__fpcmp_parts_f+0x9c>
    1e62:	80 81       	ld	r24, Z
    1e64:	82 30       	cpi	r24, 0x02	; 2
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <__fpcmp_parts_f+0x16>
    1e68:	43 c0       	rjmp	.+134    	; 0x1ef0 <__fpcmp_parts_f+0x9c>
    1e6a:	94 30       	cpi	r25, 0x04	; 4
    1e6c:	51 f4       	brne	.+20     	; 0x1e82 <__fpcmp_parts_f+0x2e>
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	1c 91       	ld	r17, X
    1e72:	84 30       	cpi	r24, 0x04	; 4
    1e74:	99 f5       	brne	.+102    	; 0x1edc <__fpcmp_parts_f+0x88>
    1e76:	81 81       	ldd	r24, Z+1	; 0x01
    1e78:	68 2f       	mov	r22, r24
    1e7a:	70 e0       	ldi	r23, 0x00	; 0
    1e7c:	61 1b       	sub	r22, r17
    1e7e:	71 09       	sbc	r23, r1
    1e80:	3f c0       	rjmp	.+126    	; 0x1f00 <__fpcmp_parts_f+0xac>
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	21 f0       	breq	.+8      	; 0x1e8e <__fpcmp_parts_f+0x3a>
    1e86:	92 30       	cpi	r25, 0x02	; 2
    1e88:	31 f4       	brne	.+12     	; 0x1e96 <__fpcmp_parts_f+0x42>
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	b9 f1       	breq	.+110    	; 0x1efc <__fpcmp_parts_f+0xa8>
    1e8e:	81 81       	ldd	r24, Z+1	; 0x01
    1e90:	88 23       	and	r24, r24
    1e92:	89 f1       	breq	.+98     	; 0x1ef6 <__fpcmp_parts_f+0xa2>
    1e94:	2d c0       	rjmp	.+90     	; 0x1ef0 <__fpcmp_parts_f+0x9c>
    1e96:	11 96       	adiw	r26, 0x01	; 1
    1e98:	1c 91       	ld	r17, X
    1e9a:	11 97       	sbiw	r26, 0x01	; 1
    1e9c:	82 30       	cpi	r24, 0x02	; 2
    1e9e:	f1 f0       	breq	.+60     	; 0x1edc <__fpcmp_parts_f+0x88>
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	18 17       	cp	r17, r24
    1ea4:	d9 f4       	brne	.+54     	; 0x1edc <__fpcmp_parts_f+0x88>
    1ea6:	12 96       	adiw	r26, 0x02	; 2
    1ea8:	2d 91       	ld	r18, X+
    1eaa:	3c 91       	ld	r19, X
    1eac:	13 97       	sbiw	r26, 0x03	; 3
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	82 17       	cp	r24, r18
    1eb4:	93 07       	cpc	r25, r19
    1eb6:	94 f0       	brlt	.+36     	; 0x1edc <__fpcmp_parts_f+0x88>
    1eb8:	28 17       	cp	r18, r24
    1eba:	39 07       	cpc	r19, r25
    1ebc:	bc f0       	brlt	.+46     	; 0x1eec <__fpcmp_parts_f+0x98>
    1ebe:	14 96       	adiw	r26, 0x04	; 4
    1ec0:	8d 91       	ld	r24, X+
    1ec2:	9d 91       	ld	r25, X+
    1ec4:	0d 90       	ld	r0, X+
    1ec6:	bc 91       	ld	r27, X
    1ec8:	a0 2d       	mov	r26, r0
    1eca:	24 81       	ldd	r18, Z+4	; 0x04
    1ecc:	35 81       	ldd	r19, Z+5	; 0x05
    1ece:	46 81       	ldd	r20, Z+6	; 0x06
    1ed0:	57 81       	ldd	r21, Z+7	; 0x07
    1ed2:	28 17       	cp	r18, r24
    1ed4:	39 07       	cpc	r19, r25
    1ed6:	4a 07       	cpc	r20, r26
    1ed8:	5b 07       	cpc	r21, r27
    1eda:	18 f4       	brcc	.+6      	; 0x1ee2 <__fpcmp_parts_f+0x8e>
    1edc:	11 23       	and	r17, r17
    1ede:	41 f0       	breq	.+16     	; 0x1ef0 <__fpcmp_parts_f+0x9c>
    1ee0:	0a c0       	rjmp	.+20     	; 0x1ef6 <__fpcmp_parts_f+0xa2>
    1ee2:	82 17       	cp	r24, r18
    1ee4:	93 07       	cpc	r25, r19
    1ee6:	a4 07       	cpc	r26, r20
    1ee8:	b5 07       	cpc	r27, r21
    1eea:	40 f4       	brcc	.+16     	; 0x1efc <__fpcmp_parts_f+0xa8>
    1eec:	11 23       	and	r17, r17
    1eee:	19 f0       	breq	.+6      	; 0x1ef6 <__fpcmp_parts_f+0xa2>
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <__fpcmp_parts_f+0xac>
    1ef6:	6f ef       	ldi	r22, 0xFF	; 255
    1ef8:	7f ef       	ldi	r23, 0xFF	; 255
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <__fpcmp_parts_f+0xac>
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	cb 01       	movw	r24, r22
    1f02:	1f 91       	pop	r17
    1f04:	08 95       	ret

00001f06 <__prologue_saves__>:
    1f06:	2f 92       	push	r2
    1f08:	3f 92       	push	r3
    1f0a:	4f 92       	push	r4
    1f0c:	5f 92       	push	r5
    1f0e:	6f 92       	push	r6
    1f10:	7f 92       	push	r7
    1f12:	8f 92       	push	r8
    1f14:	9f 92       	push	r9
    1f16:	af 92       	push	r10
    1f18:	bf 92       	push	r11
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	ca 1b       	sub	r28, r26
    1f30:	db 0b       	sbc	r29, r27
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	09 94       	ijmp

00001f3e <__epilogue_restores__>:
    1f3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f40:	39 88       	ldd	r3, Y+17	; 0x11
    1f42:	48 88       	ldd	r4, Y+16	; 0x10
    1f44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f50:	b9 84       	ldd	r11, Y+9	; 0x09
    1f52:	c8 84       	ldd	r12, Y+8	; 0x08
    1f54:	df 80       	ldd	r13, Y+7	; 0x07
    1f56:	ee 80       	ldd	r14, Y+6	; 0x06
    1f58:	fd 80       	ldd	r15, Y+5	; 0x05
    1f5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f60:	b9 81       	ldd	r27, Y+1	; 0x01
    1f62:	ce 0f       	add	r28, r30
    1f64:	d1 1d       	adc	r29, r1
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	ed 01       	movw	r28, r26
    1f72:	08 95       	ret

00001f74 <calloc>:
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	68 9f       	mul	r22, r24
    1f7e:	80 01       	movw	r16, r0
    1f80:	69 9f       	mul	r22, r25
    1f82:	10 0d       	add	r17, r0
    1f84:	78 9f       	mul	r23, r24
    1f86:	10 0d       	add	r17, r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	c8 01       	movw	r24, r16
    1f8c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <malloc>
    1f90:	ec 01       	movw	r28, r24
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	29 f0       	breq	.+10     	; 0x1fa0 <calloc+0x2c>
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	a8 01       	movw	r20, r16
    1f9c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <memset>
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	08 95       	ret

00001fac <malloc>:
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	10 f4       	brcc	.+4      	; 0x1fbc <malloc+0x10>
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	a0 91 01 02 	lds	r26, 0x0201
    1fc0:	b0 91 02 02 	lds	r27, 0x0202
    1fc4:	ed 01       	movw	r28, r26
    1fc6:	e0 e0       	ldi	r30, 0x00	; 0
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	21 c0       	rjmp	.+66     	; 0x2012 <malloc+0x66>
    1fd0:	88 81       	ld	r24, Y
    1fd2:	99 81       	ldd	r25, Y+1	; 0x01
    1fd4:	86 17       	cp	r24, r22
    1fd6:	97 07       	cpc	r25, r23
    1fd8:	69 f4       	brne	.+26     	; 0x1ff4 <malloc+0x48>
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	30 97       	sbiw	r30, 0x00	; 0
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <malloc+0x3c>
    1fe2:	93 83       	std	Z+3, r25	; 0x03
    1fe4:	82 83       	std	Z+2, r24	; 0x02
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <malloc+0x44>
    1fe8:	90 93 02 02 	sts	0x0202, r25
    1fec:	80 93 01 02 	sts	0x0201, r24
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	34 c0       	rjmp	.+104    	; 0x205c <malloc+0xb0>
    1ff4:	68 17       	cp	r22, r24
    1ff6:	79 07       	cpc	r23, r25
    1ff8:	38 f4       	brcc	.+14     	; 0x2008 <malloc+0x5c>
    1ffa:	41 15       	cp	r20, r1
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <malloc+0x5a>
    2000:	84 17       	cp	r24, r20
    2002:	95 07       	cpc	r25, r21
    2004:	08 f4       	brcc	.+2      	; 0x2008 <malloc+0x5c>
    2006:	ac 01       	movw	r20, r24
    2008:	fe 01       	movw	r30, r28
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	9c 01       	movw	r18, r24
    2010:	e9 01       	movw	r28, r18
    2012:	20 97       	sbiw	r28, 0x00	; 0
    2014:	e9 f6       	brne	.-70     	; 0x1fd0 <malloc+0x24>
    2016:	41 15       	cp	r20, r1
    2018:	51 05       	cpc	r21, r1
    201a:	a9 f1       	breq	.+106    	; 0x2086 <malloc+0xda>
    201c:	ca 01       	movw	r24, r20
    201e:	86 1b       	sub	r24, r22
    2020:	97 0b       	sbc	r25, r23
    2022:	04 97       	sbiw	r24, 0x04	; 4
    2024:	08 f4       	brcc	.+2      	; 0x2028 <malloc+0x7c>
    2026:	ba 01       	movw	r22, r20
    2028:	e0 e0       	ldi	r30, 0x00	; 0
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	2a c0       	rjmp	.+84     	; 0x2082 <malloc+0xd6>
    202e:	8d 91       	ld	r24, X+
    2030:	9c 91       	ld	r25, X
    2032:	11 97       	sbiw	r26, 0x01	; 1
    2034:	84 17       	cp	r24, r20
    2036:	95 07       	cpc	r25, r21
    2038:	f9 f4       	brne	.+62     	; 0x2078 <malloc+0xcc>
    203a:	64 17       	cp	r22, r20
    203c:	75 07       	cpc	r23, r21
    203e:	81 f4       	brne	.+32     	; 0x2060 <malloc+0xb4>
    2040:	12 96       	adiw	r26, 0x02	; 2
    2042:	8d 91       	ld	r24, X+
    2044:	9c 91       	ld	r25, X
    2046:	13 97       	sbiw	r26, 0x03	; 3
    2048:	30 97       	sbiw	r30, 0x00	; 0
    204a:	19 f0       	breq	.+6      	; 0x2052 <malloc+0xa6>
    204c:	93 83       	std	Z+3, r25	; 0x03
    204e:	82 83       	std	Z+2, r24	; 0x02
    2050:	04 c0       	rjmp	.+8      	; 0x205a <malloc+0xae>
    2052:	90 93 02 02 	sts	0x0202, r25
    2056:	80 93 01 02 	sts	0x0201, r24
    205a:	fd 01       	movw	r30, r26
    205c:	32 96       	adiw	r30, 0x02	; 2
    205e:	4f c0       	rjmp	.+158    	; 0x20fe <malloc+0x152>
    2060:	ca 01       	movw	r24, r20
    2062:	86 1b       	sub	r24, r22
    2064:	97 0b       	sbc	r25, r23
    2066:	fd 01       	movw	r30, r26
    2068:	e8 0f       	add	r30, r24
    206a:	f9 1f       	adc	r31, r25
    206c:	61 93       	st	Z+, r22
    206e:	71 93       	st	Z+, r23
    2070:	02 97       	sbiw	r24, 0x02	; 2
    2072:	8d 93       	st	X+, r24
    2074:	9c 93       	st	X, r25
    2076:	43 c0       	rjmp	.+134    	; 0x20fe <malloc+0x152>
    2078:	fd 01       	movw	r30, r26
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	9c 01       	movw	r18, r24
    2080:	d9 01       	movw	r26, r18
    2082:	10 97       	sbiw	r26, 0x00	; 0
    2084:	a1 f6       	brne	.-88     	; 0x202e <malloc+0x82>
    2086:	80 91 ff 01 	lds	r24, 0x01FF
    208a:	90 91 00 02 	lds	r25, 0x0200
    208e:	89 2b       	or	r24, r25
    2090:	41 f4       	brne	.+16     	; 0x20a2 <malloc+0xf6>
    2092:	80 91 7e 01 	lds	r24, 0x017E
    2096:	90 91 7f 01 	lds	r25, 0x017F
    209a:	90 93 00 02 	sts	0x0200, r25
    209e:	80 93 ff 01 	sts	0x01FF, r24
    20a2:	40 91 80 01 	lds	r20, 0x0180
    20a6:	50 91 81 01 	lds	r21, 0x0181
    20aa:	41 15       	cp	r20, r1
    20ac:	51 05       	cpc	r21, r1
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <malloc+0x114>
    20b0:	4d b7       	in	r20, 0x3d	; 61
    20b2:	5e b7       	in	r21, 0x3e	; 62
    20b4:	80 91 7c 01 	lds	r24, 0x017C
    20b8:	90 91 7d 01 	lds	r25, 0x017D
    20bc:	48 1b       	sub	r20, r24
    20be:	59 0b       	sbc	r21, r25
    20c0:	20 91 ff 01 	lds	r18, 0x01FF
    20c4:	30 91 00 02 	lds	r19, 0x0200
    20c8:	24 17       	cp	r18, r20
    20ca:	35 07       	cpc	r19, r21
    20cc:	b0 f4       	brcc	.+44     	; 0x20fa <malloc+0x14e>
    20ce:	ca 01       	movw	r24, r20
    20d0:	82 1b       	sub	r24, r18
    20d2:	93 0b       	sbc	r25, r19
    20d4:	86 17       	cp	r24, r22
    20d6:	97 07       	cpc	r25, r23
    20d8:	80 f0       	brcs	.+32     	; 0x20fa <malloc+0x14e>
    20da:	ab 01       	movw	r20, r22
    20dc:	4e 5f       	subi	r20, 0xFE	; 254
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	84 17       	cp	r24, r20
    20e2:	95 07       	cpc	r25, r21
    20e4:	50 f0       	brcs	.+20     	; 0x20fa <malloc+0x14e>
    20e6:	42 0f       	add	r20, r18
    20e8:	53 1f       	adc	r21, r19
    20ea:	50 93 00 02 	sts	0x0200, r21
    20ee:	40 93 ff 01 	sts	0x01FF, r20
    20f2:	f9 01       	movw	r30, r18
    20f4:	61 93       	st	Z+, r22
    20f6:	71 93       	st	Z+, r23
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <malloc+0x152>
    20fa:	e0 e0       	ldi	r30, 0x00	; 0
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	cf 01       	movw	r24, r30
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <free>:
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	09 f4       	brne	.+2      	; 0x2110 <free+0xa>
    210e:	50 c0       	rjmp	.+160    	; 0x21b0 <free+0xaa>
    2110:	ec 01       	movw	r28, r24
    2112:	22 97       	sbiw	r28, 0x02	; 2
    2114:	1b 82       	std	Y+3, r1	; 0x03
    2116:	1a 82       	std	Y+2, r1	; 0x02
    2118:	a0 91 01 02 	lds	r26, 0x0201
    211c:	b0 91 02 02 	lds	r27, 0x0202
    2120:	10 97       	sbiw	r26, 0x00	; 0
    2122:	09 f1       	breq	.+66     	; 0x2166 <free+0x60>
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	ac 17       	cp	r26, r28
    212a:	bd 07       	cpc	r27, r29
    212c:	08 f1       	brcs	.+66     	; 0x2170 <free+0x6a>
    212e:	bb 83       	std	Y+3, r27	; 0x03
    2130:	aa 83       	std	Y+2, r26	; 0x02
    2132:	fe 01       	movw	r30, r28
    2134:	21 91       	ld	r18, Z+
    2136:	31 91       	ld	r19, Z+
    2138:	e2 0f       	add	r30, r18
    213a:	f3 1f       	adc	r31, r19
    213c:	ae 17       	cp	r26, r30
    213e:	bf 07       	cpc	r27, r31
    2140:	79 f4       	brne	.+30     	; 0x2160 <free+0x5a>
    2142:	8d 91       	ld	r24, X+
    2144:	9c 91       	ld	r25, X
    2146:	11 97       	sbiw	r26, 0x01	; 1
    2148:	28 0f       	add	r18, r24
    214a:	39 1f       	adc	r19, r25
    214c:	2e 5f       	subi	r18, 0xFE	; 254
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	39 83       	std	Y+1, r19	; 0x01
    2152:	28 83       	st	Y, r18
    2154:	12 96       	adiw	r26, 0x02	; 2
    2156:	8d 91       	ld	r24, X+
    2158:	9c 91       	ld	r25, X
    215a:	13 97       	sbiw	r26, 0x03	; 3
    215c:	9b 83       	std	Y+3, r25	; 0x03
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	41 15       	cp	r20, r1
    2162:	51 05       	cpc	r21, r1
    2164:	71 f4       	brne	.+28     	; 0x2182 <free+0x7c>
    2166:	d0 93 02 02 	sts	0x0202, r29
    216a:	c0 93 01 02 	sts	0x0201, r28
    216e:	20 c0       	rjmp	.+64     	; 0x21b0 <free+0xaa>
    2170:	12 96       	adiw	r26, 0x02	; 2
    2172:	8d 91       	ld	r24, X+
    2174:	9c 91       	ld	r25, X
    2176:	13 97       	sbiw	r26, 0x03	; 3
    2178:	ad 01       	movw	r20, r26
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	11 f0       	breq	.+4      	; 0x2182 <free+0x7c>
    217e:	dc 01       	movw	r26, r24
    2180:	d3 cf       	rjmp	.-90     	; 0x2128 <free+0x22>
    2182:	fa 01       	movw	r30, r20
    2184:	d3 83       	std	Z+3, r29	; 0x03
    2186:	c2 83       	std	Z+2, r28	; 0x02
    2188:	21 91       	ld	r18, Z+
    218a:	31 91       	ld	r19, Z+
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	ce 17       	cp	r28, r30
    2192:	df 07       	cpc	r29, r31
    2194:	69 f4       	brne	.+26     	; 0x21b0 <free+0xaa>
    2196:	88 81       	ld	r24, Y
    2198:	99 81       	ldd	r25, Y+1	; 0x01
    219a:	28 0f       	add	r18, r24
    219c:	39 1f       	adc	r19, r25
    219e:	2e 5f       	subi	r18, 0xFE	; 254
    21a0:	3f 4f       	sbci	r19, 0xFF	; 255
    21a2:	fa 01       	movw	r30, r20
    21a4:	31 83       	std	Z+1, r19	; 0x01
    21a6:	20 83       	st	Z, r18
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	93 83       	std	Z+3, r25	; 0x03
    21ae:	82 83       	std	Z+2, r24	; 0x02
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <memcpy>:
    21b6:	fb 01       	movw	r30, r22
    21b8:	dc 01       	movw	r26, r24
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <memcpy+0xa>
    21bc:	01 90       	ld	r0, Z+
    21be:	0d 92       	st	X+, r0
    21c0:	41 50       	subi	r20, 0x01	; 1
    21c2:	50 40       	sbci	r21, 0x00	; 0
    21c4:	d8 f7       	brcc	.-10     	; 0x21bc <memcpy+0x6>
    21c6:	08 95       	ret

000021c8 <memset>:
    21c8:	dc 01       	movw	r26, r24
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <memset+0x6>
    21cc:	6d 93       	st	X+, r22
    21ce:	41 50       	subi	r20, 0x01	; 1
    21d0:	50 40       	sbci	r21, 0x00	; 0
    21d2:	e0 f7       	brcc	.-8      	; 0x21cc <memset+0x4>
    21d4:	08 95       	ret

000021d6 <sprintf>:
    21d6:	ae e0       	ldi	r26, 0x0E	; 14
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e1 ef       	ldi	r30, 0xF1	; 241
    21dc:	f0 e1       	ldi	r31, 0x10	; 16
    21de:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__prologue_saves__+0x1c>
    21e2:	0d 89       	ldd	r16, Y+21	; 0x15
    21e4:	1e 89       	ldd	r17, Y+22	; 0x16
    21e6:	86 e0       	ldi	r24, 0x06	; 6
    21e8:	8c 83       	std	Y+4, r24	; 0x04
    21ea:	1a 83       	std	Y+2, r17	; 0x02
    21ec:	09 83       	std	Y+1, r16	; 0x01
    21ee:	8f ef       	ldi	r24, 0xFF	; 255
    21f0:	9f e7       	ldi	r25, 0x7F	; 127
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	9e 01       	movw	r18, r28
    21f8:	27 5e       	subi	r18, 0xE7	; 231
    21fa:	3f 4f       	sbci	r19, 0xFF	; 255
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	6f 89       	ldd	r22, Y+23	; 0x17
    2202:	78 8d       	ldd	r23, Y+24	; 0x18
    2204:	a9 01       	movw	r20, r18
    2206:	0e 94 69 11 	call	0x22d2	; 0x22d2 <vfprintf>
    220a:	2f 81       	ldd	r18, Y+7	; 0x07
    220c:	38 85       	ldd	r19, Y+8	; 0x08
    220e:	02 0f       	add	r16, r18
    2210:	13 1f       	adc	r17, r19
    2212:	f8 01       	movw	r30, r16
    2214:	10 82       	st	Z, r1
    2216:	2e 96       	adiw	r28, 0x0e	; 14
    2218:	e4 e0       	ldi	r30, 0x04	; 4
    221a:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__epilogue_restores__+0x1c>

0000221e <floor>:
    221e:	3b d0       	rcall	.+118    	; 0x2296 <__fp_trunc>
    2220:	80 f0       	brcs	.+32     	; 0x2242 <floor+0x24>
    2222:	9f 37       	cpi	r25, 0x7F	; 127
    2224:	40 f4       	brcc	.+16     	; 0x2236 <floor+0x18>
    2226:	91 11       	cpse	r25, r1
    2228:	0e f0       	brts	.+2      	; 0x222c <floor+0xe>
    222a:	4d c0       	rjmp	.+154    	; 0x22c6 <__fp_szero>
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	80 e8       	ldi	r24, 0x80	; 128
    2232:	9f eb       	ldi	r25, 0xBF	; 191
    2234:	08 95       	ret
    2236:	26 f4       	brtc	.+8      	; 0x2240 <floor+0x22>
    2238:	1b 16       	cp	r1, r27
    223a:	61 1d       	adc	r22, r1
    223c:	71 1d       	adc	r23, r1
    223e:	81 1d       	adc	r24, r1
    2240:	01 c0       	rjmp	.+2      	; 0x2244 <__fp_mintl>
    2242:	1b c0       	rjmp	.+54     	; 0x227a <__fp_mpack>

00002244 <__fp_mintl>:
    2244:	88 23       	and	r24, r24
    2246:	71 f4       	brne	.+28     	; 0x2264 <__fp_mintl+0x20>
    2248:	77 23       	and	r23, r23
    224a:	21 f0       	breq	.+8      	; 0x2254 <__fp_mintl+0x10>
    224c:	98 50       	subi	r25, 0x08	; 8
    224e:	87 2b       	or	r24, r23
    2250:	76 2f       	mov	r23, r22
    2252:	07 c0       	rjmp	.+14     	; 0x2262 <__fp_mintl+0x1e>
    2254:	66 23       	and	r22, r22
    2256:	11 f4       	brne	.+4      	; 0x225c <__fp_mintl+0x18>
    2258:	99 27       	eor	r25, r25
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <__fp_mintl+0x32>
    225c:	90 51       	subi	r25, 0x10	; 16
    225e:	86 2b       	or	r24, r22
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	2a f0       	brmi	.+10     	; 0x2270 <__fp_mintl+0x2c>
    2266:	9a 95       	dec	r25
    2268:	66 0f       	add	r22, r22
    226a:	77 1f       	adc	r23, r23
    226c:	88 1f       	adc	r24, r24
    226e:	da f7       	brpl	.-10     	; 0x2266 <__fp_mintl+0x22>
    2270:	88 0f       	add	r24, r24
    2272:	96 95       	lsr	r25
    2274:	87 95       	ror	r24
    2276:	97 f9       	bld	r25, 7
    2278:	08 95       	ret

0000227a <__fp_mpack>:
    227a:	9f 3f       	cpi	r25, 0xFF	; 255
    227c:	31 f0       	breq	.+12     	; 0x228a <__fp_mpack_finite+0xc>

0000227e <__fp_mpack_finite>:
    227e:	91 50       	subi	r25, 0x01	; 1
    2280:	20 f4       	brcc	.+8      	; 0x228a <__fp_mpack_finite+0xc>
    2282:	87 95       	ror	r24
    2284:	77 95       	ror	r23
    2286:	67 95       	ror	r22
    2288:	b7 95       	ror	r27
    228a:	88 0f       	add	r24, r24
    228c:	91 1d       	adc	r25, r1
    228e:	96 95       	lsr	r25
    2290:	87 95       	ror	r24
    2292:	97 f9       	bld	r25, 7
    2294:	08 95       	ret

00002296 <__fp_trunc>:
    2296:	a2 d2       	rcall	.+1348   	; 0x27dc <__fp_splitA>
    2298:	a0 f0       	brcs	.+40     	; 0x22c2 <__fp_trunc+0x2c>
    229a:	be e7       	ldi	r27, 0x7E	; 126
    229c:	b9 17       	cp	r27, r25
    229e:	88 f4       	brcc	.+34     	; 0x22c2 <__fp_trunc+0x2c>
    22a0:	bb 27       	eor	r27, r27
    22a2:	9f 38       	cpi	r25, 0x8F	; 143
    22a4:	60 f4       	brcc	.+24     	; 0x22be <__fp_trunc+0x28>
    22a6:	16 16       	cp	r1, r22
    22a8:	b1 1d       	adc	r27, r1
    22aa:	67 2f       	mov	r22, r23
    22ac:	78 2f       	mov	r23, r24
    22ae:	88 27       	eor	r24, r24
    22b0:	98 5f       	subi	r25, 0xF8	; 248
    22b2:	f7 cf       	rjmp	.-18     	; 0x22a2 <__fp_trunc+0xc>
    22b4:	86 95       	lsr	r24
    22b6:	77 95       	ror	r23
    22b8:	67 95       	ror	r22
    22ba:	b1 1d       	adc	r27, r1
    22bc:	93 95       	inc	r25
    22be:	96 39       	cpi	r25, 0x96	; 150
    22c0:	c8 f3       	brcs	.-14     	; 0x22b4 <__fp_trunc+0x1e>
    22c2:	08 95       	ret

000022c4 <__fp_zero>:
    22c4:	e8 94       	clt

000022c6 <__fp_szero>:
    22c6:	bb 27       	eor	r27, r27
    22c8:	66 27       	eor	r22, r22
    22ca:	77 27       	eor	r23, r23
    22cc:	cb 01       	movw	r24, r22
    22ce:	97 f9       	bld	r25, 7
    22d0:	08 95       	ret

000022d2 <vfprintf>:
    22d2:	ab e0       	ldi	r26, 0x0B	; 11
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	ef e6       	ldi	r30, 0x6F	; 111
    22d8:	f1 e1       	ldi	r31, 0x11	; 17
    22da:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__prologue_saves__>
    22de:	3c 01       	movw	r6, r24
    22e0:	2b 01       	movw	r4, r22
    22e2:	5a 01       	movw	r10, r20
    22e4:	fc 01       	movw	r30, r24
    22e6:	17 82       	std	Z+7, r1	; 0x07
    22e8:	16 82       	std	Z+6, r1	; 0x06
    22ea:	83 81       	ldd	r24, Z+3	; 0x03
    22ec:	81 fd       	sbrc	r24, 1
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <vfprintf+0x24>
    22f0:	6f ef       	ldi	r22, 0xFF	; 255
    22f2:	7f ef       	ldi	r23, 0xFF	; 255
    22f4:	c6 c1       	rjmp	.+908    	; 0x2682 <vfprintf+0x3b0>
    22f6:	9a e0       	ldi	r25, 0x0A	; 10
    22f8:	89 2e       	mov	r8, r25
    22fa:	1e 01       	movw	r2, r28
    22fc:	08 94       	sec
    22fe:	21 1c       	adc	r2, r1
    2300:	31 1c       	adc	r3, r1
    2302:	f3 01       	movw	r30, r6
    2304:	23 81       	ldd	r18, Z+3	; 0x03
    2306:	f2 01       	movw	r30, r4
    2308:	23 fd       	sbrc	r18, 3
    230a:	85 91       	lpm	r24, Z+
    230c:	23 ff       	sbrs	r18, 3
    230e:	81 91       	ld	r24, Z+
    2310:	2f 01       	movw	r4, r30
    2312:	88 23       	and	r24, r24
    2314:	09 f4       	brne	.+2      	; 0x2318 <vfprintf+0x46>
    2316:	b2 c1       	rjmp	.+868    	; 0x267c <vfprintf+0x3aa>
    2318:	85 32       	cpi	r24, 0x25	; 37
    231a:	39 f4       	brne	.+14     	; 0x232a <vfprintf+0x58>
    231c:	23 fd       	sbrc	r18, 3
    231e:	85 91       	lpm	r24, Z+
    2320:	23 ff       	sbrs	r18, 3
    2322:	81 91       	ld	r24, Z+
    2324:	2f 01       	movw	r4, r30
    2326:	85 32       	cpi	r24, 0x25	; 37
    2328:	29 f4       	brne	.+10     	; 0x2334 <vfprintf+0x62>
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	b3 01       	movw	r22, r6
    232e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    2332:	e7 cf       	rjmp	.-50     	; 0x2302 <vfprintf+0x30>
    2334:	98 2f       	mov	r25, r24
    2336:	ff 24       	eor	r15, r15
    2338:	ee 24       	eor	r14, r14
    233a:	99 24       	eor	r9, r9
    233c:	ff e1       	ldi	r31, 0x1F	; 31
    233e:	ff 15       	cp	r31, r15
    2340:	d0 f0       	brcs	.+52     	; 0x2376 <vfprintf+0xa4>
    2342:	9b 32       	cpi	r25, 0x2B	; 43
    2344:	69 f0       	breq	.+26     	; 0x2360 <vfprintf+0x8e>
    2346:	9c 32       	cpi	r25, 0x2C	; 44
    2348:	28 f4       	brcc	.+10     	; 0x2354 <vfprintf+0x82>
    234a:	90 32       	cpi	r25, 0x20	; 32
    234c:	59 f0       	breq	.+22     	; 0x2364 <vfprintf+0x92>
    234e:	93 32       	cpi	r25, 0x23	; 35
    2350:	91 f4       	brne	.+36     	; 0x2376 <vfprintf+0xa4>
    2352:	0e c0       	rjmp	.+28     	; 0x2370 <vfprintf+0x9e>
    2354:	9d 32       	cpi	r25, 0x2D	; 45
    2356:	49 f0       	breq	.+18     	; 0x236a <vfprintf+0x98>
    2358:	90 33       	cpi	r25, 0x30	; 48
    235a:	69 f4       	brne	.+26     	; 0x2376 <vfprintf+0xa4>
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	24 c0       	rjmp	.+72     	; 0x23a8 <vfprintf+0xd6>
    2360:	52 e0       	ldi	r21, 0x02	; 2
    2362:	f5 2a       	or	r15, r21
    2364:	84 e0       	ldi	r24, 0x04	; 4
    2366:	f8 2a       	or	r15, r24
    2368:	28 c0       	rjmp	.+80     	; 0x23ba <vfprintf+0xe8>
    236a:	98 e0       	ldi	r25, 0x08	; 8
    236c:	f9 2a       	or	r15, r25
    236e:	25 c0       	rjmp	.+74     	; 0x23ba <vfprintf+0xe8>
    2370:	e0 e1       	ldi	r30, 0x10	; 16
    2372:	fe 2a       	or	r15, r30
    2374:	22 c0       	rjmp	.+68     	; 0x23ba <vfprintf+0xe8>
    2376:	f7 fc       	sbrc	r15, 7
    2378:	29 c0       	rjmp	.+82     	; 0x23cc <vfprintf+0xfa>
    237a:	89 2f       	mov	r24, r25
    237c:	80 53       	subi	r24, 0x30	; 48
    237e:	8a 30       	cpi	r24, 0x0A	; 10
    2380:	70 f4       	brcc	.+28     	; 0x239e <vfprintf+0xcc>
    2382:	f6 fe       	sbrs	r15, 6
    2384:	05 c0       	rjmp	.+10     	; 0x2390 <vfprintf+0xbe>
    2386:	98 9c       	mul	r9, r8
    2388:	90 2c       	mov	r9, r0
    238a:	11 24       	eor	r1, r1
    238c:	98 0e       	add	r9, r24
    238e:	15 c0       	rjmp	.+42     	; 0x23ba <vfprintf+0xe8>
    2390:	e8 9c       	mul	r14, r8
    2392:	e0 2c       	mov	r14, r0
    2394:	11 24       	eor	r1, r1
    2396:	e8 0e       	add	r14, r24
    2398:	f0 e2       	ldi	r31, 0x20	; 32
    239a:	ff 2a       	or	r15, r31
    239c:	0e c0       	rjmp	.+28     	; 0x23ba <vfprintf+0xe8>
    239e:	9e 32       	cpi	r25, 0x2E	; 46
    23a0:	29 f4       	brne	.+10     	; 0x23ac <vfprintf+0xda>
    23a2:	f6 fc       	sbrc	r15, 6
    23a4:	6b c1       	rjmp	.+726    	; 0x267c <vfprintf+0x3aa>
    23a6:	40 e4       	ldi	r20, 0x40	; 64
    23a8:	f4 2a       	or	r15, r20
    23aa:	07 c0       	rjmp	.+14     	; 0x23ba <vfprintf+0xe8>
    23ac:	9c 36       	cpi	r25, 0x6C	; 108
    23ae:	19 f4       	brne	.+6      	; 0x23b6 <vfprintf+0xe4>
    23b0:	50 e8       	ldi	r21, 0x80	; 128
    23b2:	f5 2a       	or	r15, r21
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <vfprintf+0xe8>
    23b6:	98 36       	cpi	r25, 0x68	; 104
    23b8:	49 f4       	brne	.+18     	; 0x23cc <vfprintf+0xfa>
    23ba:	f2 01       	movw	r30, r4
    23bc:	23 fd       	sbrc	r18, 3
    23be:	95 91       	lpm	r25, Z+
    23c0:	23 ff       	sbrs	r18, 3
    23c2:	91 91       	ld	r25, Z+
    23c4:	2f 01       	movw	r4, r30
    23c6:	99 23       	and	r25, r25
    23c8:	09 f0       	breq	.+2      	; 0x23cc <vfprintf+0xfa>
    23ca:	b8 cf       	rjmp	.-144    	; 0x233c <vfprintf+0x6a>
    23cc:	89 2f       	mov	r24, r25
    23ce:	85 54       	subi	r24, 0x45	; 69
    23d0:	83 30       	cpi	r24, 0x03	; 3
    23d2:	18 f0       	brcs	.+6      	; 0x23da <vfprintf+0x108>
    23d4:	80 52       	subi	r24, 0x20	; 32
    23d6:	83 30       	cpi	r24, 0x03	; 3
    23d8:	38 f4       	brcc	.+14     	; 0x23e8 <vfprintf+0x116>
    23da:	44 e0       	ldi	r20, 0x04	; 4
    23dc:	50 e0       	ldi	r21, 0x00	; 0
    23de:	a4 0e       	add	r10, r20
    23e0:	b5 1e       	adc	r11, r21
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	59 83       	std	Y+1, r21	; 0x01
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <vfprintf+0x134>
    23e8:	93 36       	cpi	r25, 0x63	; 99
    23ea:	31 f0       	breq	.+12     	; 0x23f8 <vfprintf+0x126>
    23ec:	93 37       	cpi	r25, 0x73	; 115
    23ee:	79 f0       	breq	.+30     	; 0x240e <vfprintf+0x13c>
    23f0:	93 35       	cpi	r25, 0x53	; 83
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <vfprintf+0x124>
    23f4:	56 c0       	rjmp	.+172    	; 0x24a2 <vfprintf+0x1d0>
    23f6:	20 c0       	rjmp	.+64     	; 0x2438 <vfprintf+0x166>
    23f8:	f5 01       	movw	r30, r10
    23fa:	80 81       	ld	r24, Z
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	42 e0       	ldi	r20, 0x02	; 2
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	a4 0e       	add	r10, r20
    2404:	b5 1e       	adc	r11, r21
    2406:	61 01       	movw	r12, r2
    2408:	01 e0       	ldi	r16, 0x01	; 1
    240a:	10 e0       	ldi	r17, 0x00	; 0
    240c:	12 c0       	rjmp	.+36     	; 0x2432 <vfprintf+0x160>
    240e:	f5 01       	movw	r30, r10
    2410:	c0 80       	ld	r12, Z
    2412:	d1 80       	ldd	r13, Z+1	; 0x01
    2414:	f6 fc       	sbrc	r15, 6
    2416:	03 c0       	rjmp	.+6      	; 0x241e <vfprintf+0x14c>
    2418:	6f ef       	ldi	r22, 0xFF	; 255
    241a:	7f ef       	ldi	r23, 0xFF	; 255
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <vfprintf+0x150>
    241e:	69 2d       	mov	r22, r9
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	42 e0       	ldi	r20, 0x02	; 2
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	a4 0e       	add	r10, r20
    2428:	b5 1e       	adc	r11, r21
    242a:	c6 01       	movw	r24, r12
    242c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <strnlen>
    2430:	8c 01       	movw	r16, r24
    2432:	5f e7       	ldi	r21, 0x7F	; 127
    2434:	f5 22       	and	r15, r21
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <vfprintf+0x18e>
    2438:	f5 01       	movw	r30, r10
    243a:	c0 80       	ld	r12, Z
    243c:	d1 80       	ldd	r13, Z+1	; 0x01
    243e:	f6 fc       	sbrc	r15, 6
    2440:	03 c0       	rjmp	.+6      	; 0x2448 <vfprintf+0x176>
    2442:	6f ef       	ldi	r22, 0xFF	; 255
    2444:	7f ef       	ldi	r23, 0xFF	; 255
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0x17a>
    2448:	69 2d       	mov	r22, r9
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	42 e0       	ldi	r20, 0x02	; 2
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	a4 0e       	add	r10, r20
    2452:	b5 1e       	adc	r11, r21
    2454:	c6 01       	movw	r24, r12
    2456:	0e 94 46 13 	call	0x268c	; 0x268c <strnlen_P>
    245a:	8c 01       	movw	r16, r24
    245c:	50 e8       	ldi	r21, 0x80	; 128
    245e:	f5 2a       	or	r15, r21
    2460:	f3 fe       	sbrs	r15, 3
    2462:	07 c0       	rjmp	.+14     	; 0x2472 <vfprintf+0x1a0>
    2464:	1a c0       	rjmp	.+52     	; 0x249a <vfprintf+0x1c8>
    2466:	80 e2       	ldi	r24, 0x20	; 32
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	b3 01       	movw	r22, r6
    246c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    2470:	ea 94       	dec	r14
    2472:	8e 2d       	mov	r24, r14
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	08 17       	cp	r16, r24
    2478:	19 07       	cpc	r17, r25
    247a:	a8 f3       	brcs	.-22     	; 0x2466 <vfprintf+0x194>
    247c:	0e c0       	rjmp	.+28     	; 0x249a <vfprintf+0x1c8>
    247e:	f6 01       	movw	r30, r12
    2480:	f7 fc       	sbrc	r15, 7
    2482:	85 91       	lpm	r24, Z+
    2484:	f7 fe       	sbrs	r15, 7
    2486:	81 91       	ld	r24, Z+
    2488:	6f 01       	movw	r12, r30
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	b3 01       	movw	r22, r6
    248e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    2492:	e1 10       	cpse	r14, r1
    2494:	ea 94       	dec	r14
    2496:	01 50       	subi	r16, 0x01	; 1
    2498:	10 40       	sbci	r17, 0x00	; 0
    249a:	01 15       	cp	r16, r1
    249c:	11 05       	cpc	r17, r1
    249e:	79 f7       	brne	.-34     	; 0x247e <vfprintf+0x1ac>
    24a0:	ea c0       	rjmp	.+468    	; 0x2676 <vfprintf+0x3a4>
    24a2:	94 36       	cpi	r25, 0x64	; 100
    24a4:	11 f0       	breq	.+4      	; 0x24aa <vfprintf+0x1d8>
    24a6:	99 36       	cpi	r25, 0x69	; 105
    24a8:	69 f5       	brne	.+90     	; 0x2504 <vfprintf+0x232>
    24aa:	f7 fe       	sbrs	r15, 7
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <vfprintf+0x1ec>
    24ae:	f5 01       	movw	r30, r10
    24b0:	20 81       	ld	r18, Z
    24b2:	31 81       	ldd	r19, Z+1	; 0x01
    24b4:	42 81       	ldd	r20, Z+2	; 0x02
    24b6:	53 81       	ldd	r21, Z+3	; 0x03
    24b8:	84 e0       	ldi	r24, 0x04	; 4
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0a c0       	rjmp	.+20     	; 0x24d2 <vfprintf+0x200>
    24be:	f5 01       	movw	r30, r10
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	9c 01       	movw	r18, r24
    24c6:	44 27       	eor	r20, r20
    24c8:	37 fd       	sbrc	r19, 7
    24ca:	40 95       	com	r20
    24cc:	54 2f       	mov	r21, r20
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a8 0e       	add	r10, r24
    24d4:	b9 1e       	adc	r11, r25
    24d6:	9f e6       	ldi	r25, 0x6F	; 111
    24d8:	f9 22       	and	r15, r25
    24da:	57 ff       	sbrs	r21, 7
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <vfprintf+0x21e>
    24de:	50 95       	com	r21
    24e0:	40 95       	com	r20
    24e2:	30 95       	com	r19
    24e4:	21 95       	neg	r18
    24e6:	3f 4f       	sbci	r19, 0xFF	; 255
    24e8:	4f 4f       	sbci	r20, 0xFF	; 255
    24ea:	5f 4f       	sbci	r21, 0xFF	; 255
    24ec:	e0 e8       	ldi	r30, 0x80	; 128
    24ee:	fe 2a       	or	r15, r30
    24f0:	ca 01       	movw	r24, r20
    24f2:	b9 01       	movw	r22, r18
    24f4:	a1 01       	movw	r20, r2
    24f6:	2a e0       	ldi	r18, 0x0A	; 10
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	0e 94 88 13 	call	0x2710	; 0x2710 <__ultoa_invert>
    24fe:	d8 2e       	mov	r13, r24
    2500:	d2 18       	sub	r13, r2
    2502:	40 c0       	rjmp	.+128    	; 0x2584 <vfprintf+0x2b2>
    2504:	95 37       	cpi	r25, 0x75	; 117
    2506:	29 f4       	brne	.+10     	; 0x2512 <vfprintf+0x240>
    2508:	1f 2d       	mov	r17, r15
    250a:	1f 7e       	andi	r17, 0xEF	; 239
    250c:	2a e0       	ldi	r18, 0x0A	; 10
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	1d c0       	rjmp	.+58     	; 0x254c <vfprintf+0x27a>
    2512:	1f 2d       	mov	r17, r15
    2514:	19 7f       	andi	r17, 0xF9	; 249
    2516:	9f 36       	cpi	r25, 0x6F	; 111
    2518:	61 f0       	breq	.+24     	; 0x2532 <vfprintf+0x260>
    251a:	90 37       	cpi	r25, 0x70	; 112
    251c:	20 f4       	brcc	.+8      	; 0x2526 <vfprintf+0x254>
    251e:	98 35       	cpi	r25, 0x58	; 88
    2520:	09 f0       	breq	.+2      	; 0x2524 <vfprintf+0x252>
    2522:	ac c0       	rjmp	.+344    	; 0x267c <vfprintf+0x3aa>
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <vfprintf+0x272>
    2526:	90 37       	cpi	r25, 0x70	; 112
    2528:	39 f0       	breq	.+14     	; 0x2538 <vfprintf+0x266>
    252a:	98 37       	cpi	r25, 0x78	; 120
    252c:	09 f0       	breq	.+2      	; 0x2530 <vfprintf+0x25e>
    252e:	a6 c0       	rjmp	.+332    	; 0x267c <vfprintf+0x3aa>
    2530:	04 c0       	rjmp	.+8      	; 0x253a <vfprintf+0x268>
    2532:	28 e0       	ldi	r18, 0x08	; 8
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	0a c0       	rjmp	.+20     	; 0x254c <vfprintf+0x27a>
    2538:	10 61       	ori	r17, 0x10	; 16
    253a:	14 fd       	sbrc	r17, 4
    253c:	14 60       	ori	r17, 0x04	; 4
    253e:	20 e1       	ldi	r18, 0x10	; 16
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	04 c0       	rjmp	.+8      	; 0x254c <vfprintf+0x27a>
    2544:	14 fd       	sbrc	r17, 4
    2546:	16 60       	ori	r17, 0x06	; 6
    2548:	20 e1       	ldi	r18, 0x10	; 16
    254a:	32 e0       	ldi	r19, 0x02	; 2
    254c:	17 ff       	sbrs	r17, 7
    254e:	08 c0       	rjmp	.+16     	; 0x2560 <vfprintf+0x28e>
    2550:	f5 01       	movw	r30, r10
    2552:	60 81       	ld	r22, Z
    2554:	71 81       	ldd	r23, Z+1	; 0x01
    2556:	82 81       	ldd	r24, Z+2	; 0x02
    2558:	93 81       	ldd	r25, Z+3	; 0x03
    255a:	44 e0       	ldi	r20, 0x04	; 4
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	08 c0       	rjmp	.+16     	; 0x2570 <vfprintf+0x29e>
    2560:	f5 01       	movw	r30, r10
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	bc 01       	movw	r22, r24
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	42 e0       	ldi	r20, 0x02	; 2
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	a4 0e       	add	r10, r20
    2572:	b5 1e       	adc	r11, r21
    2574:	a1 01       	movw	r20, r2
    2576:	0e 94 88 13 	call	0x2710	; 0x2710 <__ultoa_invert>
    257a:	d8 2e       	mov	r13, r24
    257c:	d2 18       	sub	r13, r2
    257e:	8f e7       	ldi	r24, 0x7F	; 127
    2580:	f8 2e       	mov	r15, r24
    2582:	f1 22       	and	r15, r17
    2584:	f6 fe       	sbrs	r15, 6
    2586:	0b c0       	rjmp	.+22     	; 0x259e <vfprintf+0x2cc>
    2588:	5e ef       	ldi	r21, 0xFE	; 254
    258a:	f5 22       	and	r15, r21
    258c:	d9 14       	cp	r13, r9
    258e:	38 f4       	brcc	.+14     	; 0x259e <vfprintf+0x2cc>
    2590:	f4 fe       	sbrs	r15, 4
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <vfprintf+0x2d0>
    2594:	f2 fc       	sbrc	r15, 2
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <vfprintf+0x2d0>
    2598:	8f ee       	ldi	r24, 0xEF	; 239
    259a:	f8 22       	and	r15, r24
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfprintf+0x2d0>
    259e:	1d 2d       	mov	r17, r13
    25a0:	01 c0       	rjmp	.+2      	; 0x25a4 <vfprintf+0x2d2>
    25a2:	19 2d       	mov	r17, r9
    25a4:	f4 fe       	sbrs	r15, 4
    25a6:	0d c0       	rjmp	.+26     	; 0x25c2 <vfprintf+0x2f0>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ed 0d       	add	r30, r13
    25ac:	f1 1d       	adc	r31, r1
    25ae:	80 81       	ld	r24, Z
    25b0:	80 33       	cpi	r24, 0x30	; 48
    25b2:	19 f4       	brne	.+6      	; 0x25ba <vfprintf+0x2e8>
    25b4:	99 ee       	ldi	r25, 0xE9	; 233
    25b6:	f9 22       	and	r15, r25
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <vfprintf+0x2f8>
    25ba:	1f 5f       	subi	r17, 0xFF	; 255
    25bc:	f2 fe       	sbrs	r15, 2
    25be:	05 c0       	rjmp	.+10     	; 0x25ca <vfprintf+0x2f8>
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <vfprintf+0x2f6>
    25c2:	8f 2d       	mov	r24, r15
    25c4:	86 78       	andi	r24, 0x86	; 134
    25c6:	09 f0       	breq	.+2      	; 0x25ca <vfprintf+0x2f8>
    25c8:	1f 5f       	subi	r17, 0xFF	; 255
    25ca:	0f 2d       	mov	r16, r15
    25cc:	f3 fc       	sbrc	r15, 3
    25ce:	14 c0       	rjmp	.+40     	; 0x25f8 <vfprintf+0x326>
    25d0:	f0 fe       	sbrs	r15, 0
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <vfprintf+0x320>
    25d4:	1e 15       	cp	r17, r14
    25d6:	10 f0       	brcs	.+4      	; 0x25dc <vfprintf+0x30a>
    25d8:	9d 2c       	mov	r9, r13
    25da:	0b c0       	rjmp	.+22     	; 0x25f2 <vfprintf+0x320>
    25dc:	9d 2c       	mov	r9, r13
    25de:	9e 0c       	add	r9, r14
    25e0:	91 1a       	sub	r9, r17
    25e2:	1e 2d       	mov	r17, r14
    25e4:	06 c0       	rjmp	.+12     	; 0x25f2 <vfprintf+0x320>
    25e6:	80 e2       	ldi	r24, 0x20	; 32
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	b3 01       	movw	r22, r6
    25ec:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    25f0:	1f 5f       	subi	r17, 0xFF	; 255
    25f2:	1e 15       	cp	r17, r14
    25f4:	c0 f3       	brcs	.-16     	; 0x25e6 <vfprintf+0x314>
    25f6:	04 c0       	rjmp	.+8      	; 0x2600 <vfprintf+0x32e>
    25f8:	1e 15       	cp	r17, r14
    25fa:	10 f4       	brcc	.+4      	; 0x2600 <vfprintf+0x32e>
    25fc:	e1 1a       	sub	r14, r17
    25fe:	01 c0       	rjmp	.+2      	; 0x2602 <vfprintf+0x330>
    2600:	ee 24       	eor	r14, r14
    2602:	04 ff       	sbrs	r16, 4
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <vfprintf+0x352>
    2606:	80 e3       	ldi	r24, 0x30	; 48
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	b3 01       	movw	r22, r6
    260c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    2610:	02 ff       	sbrs	r16, 2
    2612:	1d c0       	rjmp	.+58     	; 0x264e <vfprintf+0x37c>
    2614:	01 fd       	sbrc	r16, 1
    2616:	03 c0       	rjmp	.+6      	; 0x261e <vfprintf+0x34c>
    2618:	88 e7       	ldi	r24, 0x78	; 120
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e c0       	rjmp	.+28     	; 0x263a <vfprintf+0x368>
    261e:	88 e5       	ldi	r24, 0x58	; 88
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0b c0       	rjmp	.+22     	; 0x263a <vfprintf+0x368>
    2624:	80 2f       	mov	r24, r16
    2626:	86 78       	andi	r24, 0x86	; 134
    2628:	91 f0       	breq	.+36     	; 0x264e <vfprintf+0x37c>
    262a:	01 ff       	sbrs	r16, 1
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <vfprintf+0x360>
    262e:	8b e2       	ldi	r24, 0x2B	; 43
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <vfprintf+0x362>
    2632:	80 e2       	ldi	r24, 0x20	; 32
    2634:	f7 fc       	sbrc	r15, 7
    2636:	8d e2       	ldi	r24, 0x2D	; 45
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	b3 01       	movw	r22, r6
    263c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    2640:	06 c0       	rjmp	.+12     	; 0x264e <vfprintf+0x37c>
    2642:	80 e3       	ldi	r24, 0x30	; 48
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	b3 01       	movw	r22, r6
    2648:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    264c:	9a 94       	dec	r9
    264e:	d9 14       	cp	r13, r9
    2650:	c0 f3       	brcs	.-16     	; 0x2642 <vfprintf+0x370>
    2652:	da 94       	dec	r13
    2654:	f1 01       	movw	r30, r2
    2656:	ed 0d       	add	r30, r13
    2658:	f1 1d       	adc	r31, r1
    265a:	80 81       	ld	r24, Z
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	b3 01       	movw	r22, r6
    2660:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    2664:	dd 20       	and	r13, r13
    2666:	a9 f7       	brne	.-22     	; 0x2652 <vfprintf+0x380>
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <vfprintf+0x3a4>
    266a:	80 e2       	ldi	r24, 0x20	; 32
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	b3 01       	movw	r22, r6
    2670:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <fputc>
    2674:	ea 94       	dec	r14
    2676:	ee 20       	and	r14, r14
    2678:	c1 f7       	brne	.-16     	; 0x266a <vfprintf+0x398>
    267a:	43 ce       	rjmp	.-890    	; 0x2302 <vfprintf+0x30>
    267c:	f3 01       	movw	r30, r6
    267e:	66 81       	ldd	r22, Z+6	; 0x06
    2680:	77 81       	ldd	r23, Z+7	; 0x07
    2682:	cb 01       	movw	r24, r22
    2684:	2b 96       	adiw	r28, 0x0b	; 11
    2686:	e2 e1       	ldi	r30, 0x12	; 18
    2688:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__epilogue_restores__>

0000268c <strnlen_P>:
    268c:	fc 01       	movw	r30, r24
    268e:	05 90       	lpm	r0, Z+
    2690:	61 50       	subi	r22, 0x01	; 1
    2692:	70 40       	sbci	r23, 0x00	; 0
    2694:	01 10       	cpse	r0, r1
    2696:	d8 f7       	brcc	.-10     	; 0x268e <strnlen_P+0x2>
    2698:	80 95       	com	r24
    269a:	90 95       	com	r25
    269c:	8e 0f       	add	r24, r30
    269e:	9f 1f       	adc	r25, r31
    26a0:	08 95       	ret

000026a2 <strnlen>:
    26a2:	fc 01       	movw	r30, r24
    26a4:	61 50       	subi	r22, 0x01	; 1
    26a6:	70 40       	sbci	r23, 0x00	; 0
    26a8:	01 90       	ld	r0, Z+
    26aa:	01 10       	cpse	r0, r1
    26ac:	d8 f7       	brcc	.-10     	; 0x26a4 <strnlen+0x2>
    26ae:	80 95       	com	r24
    26b0:	90 95       	com	r25
    26b2:	8e 0f       	add	r24, r30
    26b4:	9f 1f       	adc	r25, r31
    26b6:	08 95       	ret

000026b8 <fputc>:
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	8c 01       	movw	r16, r24
    26c2:	eb 01       	movw	r28, r22
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	81 ff       	sbrs	r24, 1
    26c8:	1b c0       	rjmp	.+54     	; 0x2700 <fputc+0x48>
    26ca:	82 ff       	sbrs	r24, 2
    26cc:	0d c0       	rjmp	.+26     	; 0x26e8 <fputc+0x30>
    26ce:	2e 81       	ldd	r18, Y+6	; 0x06
    26d0:	3f 81       	ldd	r19, Y+7	; 0x07
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	28 17       	cp	r18, r24
    26d8:	39 07       	cpc	r19, r25
    26da:	64 f4       	brge	.+24     	; 0x26f4 <fputc+0x3c>
    26dc:	e8 81       	ld	r30, Y
    26de:	f9 81       	ldd	r31, Y+1	; 0x01
    26e0:	01 93       	st	Z+, r16
    26e2:	f9 83       	std	Y+1, r31	; 0x01
    26e4:	e8 83       	st	Y, r30
    26e6:	06 c0       	rjmp	.+12     	; 0x26f4 <fputc+0x3c>
    26e8:	e8 85       	ldd	r30, Y+8	; 0x08
    26ea:	f9 85       	ldd	r31, Y+9	; 0x09
    26ec:	80 2f       	mov	r24, r16
    26ee:	09 95       	icall
    26f0:	89 2b       	or	r24, r25
    26f2:	31 f4       	brne	.+12     	; 0x2700 <fputc+0x48>
    26f4:	8e 81       	ldd	r24, Y+6	; 0x06
    26f6:	9f 81       	ldd	r25, Y+7	; 0x07
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	9f 83       	std	Y+7, r25	; 0x07
    26fc:	8e 83       	std	Y+6, r24	; 0x06
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <fputc+0x4c>
    2700:	0f ef       	ldi	r16, 0xFF	; 255
    2702:	1f ef       	ldi	r17, 0xFF	; 255
    2704:	c8 01       	movw	r24, r16
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	08 95       	ret

00002710 <__ultoa_invert>:
    2710:	fa 01       	movw	r30, r20
    2712:	aa 27       	eor	r26, r26
    2714:	28 30       	cpi	r18, 0x08	; 8
    2716:	51 f1       	breq	.+84     	; 0x276c <__ultoa_invert+0x5c>
    2718:	20 31       	cpi	r18, 0x10	; 16
    271a:	81 f1       	breq	.+96     	; 0x277c <__ultoa_invert+0x6c>
    271c:	e8 94       	clt
    271e:	6f 93       	push	r22
    2720:	6e 7f       	andi	r22, 0xFE	; 254
    2722:	6e 5f       	subi	r22, 0xFE	; 254
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	8f 4f       	sbci	r24, 0xFF	; 255
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	af 4f       	sbci	r26, 0xFF	; 255
    272c:	b1 e0       	ldi	r27, 0x01	; 1
    272e:	3e d0       	rcall	.+124    	; 0x27ac <__ultoa_invert+0x9c>
    2730:	b4 e0       	ldi	r27, 0x04	; 4
    2732:	3c d0       	rcall	.+120    	; 0x27ac <__ultoa_invert+0x9c>
    2734:	67 0f       	add	r22, r23
    2736:	78 1f       	adc	r23, r24
    2738:	89 1f       	adc	r24, r25
    273a:	9a 1f       	adc	r25, r26
    273c:	a1 1d       	adc	r26, r1
    273e:	68 0f       	add	r22, r24
    2740:	79 1f       	adc	r23, r25
    2742:	8a 1f       	adc	r24, r26
    2744:	91 1d       	adc	r25, r1
    2746:	a1 1d       	adc	r26, r1
    2748:	6a 0f       	add	r22, r26
    274a:	71 1d       	adc	r23, r1
    274c:	81 1d       	adc	r24, r1
    274e:	91 1d       	adc	r25, r1
    2750:	a1 1d       	adc	r26, r1
    2752:	20 d0       	rcall	.+64     	; 0x2794 <__ultoa_invert+0x84>
    2754:	09 f4       	brne	.+2      	; 0x2758 <__ultoa_invert+0x48>
    2756:	68 94       	set
    2758:	3f 91       	pop	r19
    275a:	2a e0       	ldi	r18, 0x0A	; 10
    275c:	26 9f       	mul	r18, r22
    275e:	11 24       	eor	r1, r1
    2760:	30 19       	sub	r19, r0
    2762:	30 5d       	subi	r19, 0xD0	; 208
    2764:	31 93       	st	Z+, r19
    2766:	de f6       	brtc	.-74     	; 0x271e <__ultoa_invert+0xe>
    2768:	cf 01       	movw	r24, r30
    276a:	08 95       	ret
    276c:	46 2f       	mov	r20, r22
    276e:	47 70       	andi	r20, 0x07	; 7
    2770:	40 5d       	subi	r20, 0xD0	; 208
    2772:	41 93       	st	Z+, r20
    2774:	b3 e0       	ldi	r27, 0x03	; 3
    2776:	0f d0       	rcall	.+30     	; 0x2796 <__ultoa_invert+0x86>
    2778:	c9 f7       	brne	.-14     	; 0x276c <__ultoa_invert+0x5c>
    277a:	f6 cf       	rjmp	.-20     	; 0x2768 <__ultoa_invert+0x58>
    277c:	46 2f       	mov	r20, r22
    277e:	4f 70       	andi	r20, 0x0F	; 15
    2780:	40 5d       	subi	r20, 0xD0	; 208
    2782:	4a 33       	cpi	r20, 0x3A	; 58
    2784:	18 f0       	brcs	.+6      	; 0x278c <__ultoa_invert+0x7c>
    2786:	49 5d       	subi	r20, 0xD9	; 217
    2788:	31 fd       	sbrc	r19, 1
    278a:	40 52       	subi	r20, 0x20	; 32
    278c:	41 93       	st	Z+, r20
    278e:	02 d0       	rcall	.+4      	; 0x2794 <__ultoa_invert+0x84>
    2790:	a9 f7       	brne	.-22     	; 0x277c <__ultoa_invert+0x6c>
    2792:	ea cf       	rjmp	.-44     	; 0x2768 <__ultoa_invert+0x58>
    2794:	b4 e0       	ldi	r27, 0x04	; 4
    2796:	a6 95       	lsr	r26
    2798:	97 95       	ror	r25
    279a:	87 95       	ror	r24
    279c:	77 95       	ror	r23
    279e:	67 95       	ror	r22
    27a0:	ba 95       	dec	r27
    27a2:	c9 f7       	brne	.-14     	; 0x2796 <__ultoa_invert+0x86>
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	61 05       	cpc	r22, r1
    27a8:	71 05       	cpc	r23, r1
    27aa:	08 95       	ret
    27ac:	9b 01       	movw	r18, r22
    27ae:	ac 01       	movw	r20, r24
    27b0:	0a 2e       	mov	r0, r26
    27b2:	06 94       	lsr	r0
    27b4:	57 95       	ror	r21
    27b6:	47 95       	ror	r20
    27b8:	37 95       	ror	r19
    27ba:	27 95       	ror	r18
    27bc:	ba 95       	dec	r27
    27be:	c9 f7       	brne	.-14     	; 0x27b2 <__ultoa_invert+0xa2>
    27c0:	62 0f       	add	r22, r18
    27c2:	73 1f       	adc	r23, r19
    27c4:	84 1f       	adc	r24, r20
    27c6:	95 1f       	adc	r25, r21
    27c8:	a0 1d       	adc	r26, r0
    27ca:	08 95       	ret

000027cc <__fp_split3>:
    27cc:	57 fd       	sbrc	r21, 7
    27ce:	90 58       	subi	r25, 0x80	; 128
    27d0:	44 0f       	add	r20, r20
    27d2:	55 1f       	adc	r21, r21
    27d4:	59 f0       	breq	.+22     	; 0x27ec <__fp_splitA+0x10>
    27d6:	5f 3f       	cpi	r21, 0xFF	; 255
    27d8:	71 f0       	breq	.+28     	; 0x27f6 <__fp_splitA+0x1a>
    27da:	47 95       	ror	r20

000027dc <__fp_splitA>:
    27dc:	88 0f       	add	r24, r24
    27de:	97 fb       	bst	r25, 7
    27e0:	99 1f       	adc	r25, r25
    27e2:	61 f0       	breq	.+24     	; 0x27fc <__fp_splitA+0x20>
    27e4:	9f 3f       	cpi	r25, 0xFF	; 255
    27e6:	79 f0       	breq	.+30     	; 0x2806 <__fp_splitA+0x2a>
    27e8:	87 95       	ror	r24
    27ea:	08 95       	ret
    27ec:	12 16       	cp	r1, r18
    27ee:	13 06       	cpc	r1, r19
    27f0:	14 06       	cpc	r1, r20
    27f2:	55 1f       	adc	r21, r21
    27f4:	f2 cf       	rjmp	.-28     	; 0x27da <__fp_split3+0xe>
    27f6:	46 95       	lsr	r20
    27f8:	f1 df       	rcall	.-30     	; 0x27dc <__fp_splitA>
    27fa:	08 c0       	rjmp	.+16     	; 0x280c <__fp_splitA+0x30>
    27fc:	16 16       	cp	r1, r22
    27fe:	17 06       	cpc	r1, r23
    2800:	18 06       	cpc	r1, r24
    2802:	99 1f       	adc	r25, r25
    2804:	f1 cf       	rjmp	.-30     	; 0x27e8 <__fp_splitA+0xc>
    2806:	86 95       	lsr	r24
    2808:	71 05       	cpc	r23, r1
    280a:	61 05       	cpc	r22, r1
    280c:	08 94       	sec
    280e:	08 95       	ret

00002810 <_exit>:
    2810:	f8 94       	cli

00002812 <__stop_program>:
    2812:	ff cf       	rjmp	.-2      	; 0x2812 <__stop_program>
